// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	context "golang.org/x/net/context"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Header struct{ capnp.Struct }

// Header_TypeID is the unique identifier for the type Header.
const Header_TypeID = 0x8ededcb57f98aaf0

func NewHeader(s *capnp.Segment) (Header, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 7})
	return Header{st}, err
}

func NewRootHeader(s *capnp.Segment) (Header, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 7})
	return Header{st}, err
}

func ReadRootHeader(msg *capnp.Message) (Header, error) {
	root, err := msg.RootPtr()
	return Header{root.Struct()}, err
}

func (s Header) String() string {
	str, _ := text.Marshal(0x8ededcb57f98aaf0, s.Struct)
	return str
}

func (s Header) Version() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s Header) SetVersion(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s Header) Time() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s Header) SetTime(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s Header) TxsHash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Header) HasTxsHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Header) SetTxsHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Header) StateHash() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Header) HasStateHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Header) SetStateHash(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s Header) NextValidatorsHash() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s Header) HasNextValidatorsHash() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Header) SetNextValidatorsHash(v []byte) error {
	return s.Struct.SetData(2, v)
}

func (s Header) LastBlockHash() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s Header) HasLastBlockHash() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Header) SetLastBlockHash(v []byte) error {
	return s.Struct.SetData(3, v)
}

func (s Header) LastCommitHash() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return []byte(p.Data()), err
}

func (s Header) HasLastCommitHash() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s Header) SetLastCommitHash(v []byte) error {
	return s.Struct.SetData(4, v)
}

func (s Header) LastReceiptsHash() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return []byte(p.Data()), err
}

func (s Header) HasLastReceiptsHash() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s Header) SetLastReceiptsHash(v []byte) error {
	return s.Struct.SetData(5, v)
}

func (s Header) ProposerAddress() ([]byte, error) {
	p, err := s.Struct.Ptr(6)
	return []byte(p.Data()), err
}

func (s Header) HasProposerAddress() bool {
	p, err := s.Struct.Ptr(6)
	return p.IsValid() || err != nil
}

func (s Header) SetProposerAddress(v []byte) error {
	return s.Struct.SetData(6, v)
}

// Header_List is a list of Header.
type Header_List struct{ capnp.List }

// NewHeader creates a new list of Header.
func NewHeader_List(s *capnp.Segment, sz int32) (Header_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 7}, sz)
	return Header_List{l}, err
}

func (s Header_List) At(i int) Header { return Header{s.List.Struct(i)} }

func (s Header_List) Set(i int, v Header) error { return s.List.SetStruct(i, v.Struct) }

func (s Header_List) String() string {
	str, _ := text.MarshalList(0x8ededcb57f98aaf0, s.List)
	return str
}

// Header_Promise is a wrapper for a Header promised by a client call.
type Header_Promise struct{ *capnp.Pipeline }

func (p Header_Promise) Struct() (Header, error) {
	s, err := p.Pipeline.Struct()
	return Header{s}, err
}

type Txs struct{ capnp.Struct }

// Txs_TypeID is the unique identifier for the type Txs.
const Txs_TypeID = 0xc120e2adef2af529

func NewTxs(s *capnp.Segment) (Txs, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Txs{st}, err
}

func NewRootTxs(s *capnp.Segment) (Txs, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Txs{st}, err
}

func ReadRootTxs(msg *capnp.Message) (Txs, error) {
	root, err := msg.RootPtr()
	return Txs{root.Struct()}, err
}

func (s Txs) String() string {
	str, _ := text.Marshal(0xc120e2adef2af529, s.Struct)
	return str
}

func (s Txs) Hashes() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.DataList{List: p.List()}, err
}

func (s Txs) HasHashes() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Txs) SetHashes(v capnp.DataList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewHashes sets the hashes field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Txs) NewHashes(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Txs_List is a list of Txs.
type Txs_List struct{ capnp.List }

// NewTxs creates a new list of Txs.
func NewTxs_List(s *capnp.Segment, sz int32) (Txs_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Txs_List{l}, err
}

func (s Txs_List) At(i int) Txs { return Txs{s.List.Struct(i)} }

func (s Txs_List) Set(i int, v Txs) error { return s.List.SetStruct(i, v.Struct) }

func (s Txs_List) String() string {
	str, _ := text.MarshalList(0xc120e2adef2af529, s.List)
	return str
}

// Txs_Promise is a wrapper for a Txs promised by a client call.
type Txs_Promise struct{ *capnp.Pipeline }

func (p Txs_Promise) Struct() (Txs, error) {
	s, err := p.Pipeline.Struct()
	return Txs{s}, err
}

type Commit struct{ capnp.Struct }

// Commit_TypeID is the unique identifier for the type Commit.
const Commit_TypeID = 0xf106488f1d14ab37

func NewCommit(s *capnp.Segment) (Commit, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Commit{st}, err
}

func NewRootCommit(s *capnp.Segment) (Commit, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Commit{st}, err
}

func ReadRootCommit(msg *capnp.Message) (Commit, error) {
	root, err := msg.RootPtr()
	return Commit{root.Struct()}, err
}

func (s Commit) String() string {
	str, _ := text.Marshal(0xf106488f1d14ab37, s.Struct)
	return str
}

func (s Commit) Round() uint32 {
	return s.Struct.Uint32(0)
}

func (s Commit) SetRound(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s Commit) Commiters() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.DataList{List: p.List()}, err
}

func (s Commit) HasCommiters() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Commit) SetCommiters(v capnp.DataList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewCommiters sets the commiters field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Commit) NewCommiters(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Commit) Signatures() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.DataList{List: p.List()}, err
}

func (s Commit) HasSignatures() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Commit) SetSignatures(v capnp.DataList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Commit) NewSignatures(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Commit_List is a list of Commit.
type Commit_List struct{ capnp.List }

// NewCommit creates a new list of Commit.
func NewCommit_List(s *capnp.Segment, sz int32) (Commit_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Commit_List{l}, err
}

func (s Commit_List) At(i int) Commit { return Commit{s.List.Struct(i)} }

func (s Commit_List) Set(i int, v Commit) error { return s.List.SetStruct(i, v.Struct) }

func (s Commit_List) String() string {
	str, _ := text.MarshalList(0xf106488f1d14ab37, s.List)
	return str
}

// Commit_Promise is a wrapper for a Commit promised by a client call.
type Commit_Promise struct{ *capnp.Pipeline }

func (p Commit_Promise) Struct() (Commit, error) {
	s, err := p.Pipeline.Struct()
	return Commit{s}, err
}

type Block struct{ capnp.Struct }

// Block_TypeID is the unique identifier for the type Block.
const Block_TypeID = 0xb8f393fd6f7f0c44

func NewBlock(s *capnp.Segment) (Block, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Block{st}, err
}

func NewRootBlock(s *capnp.Segment) (Block, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Block{st}, err
}

func ReadRootBlock(msg *capnp.Message) (Block, error) {
	root, err := msg.RootPtr()
	return Block{root.Struct()}, err
}

func (s Block) String() string {
	str, _ := text.Marshal(0xb8f393fd6f7f0c44, s.Struct)
	return str
}

func (s Block) Header() (Header, error) {
	p, err := s.Struct.Ptr(0)
	return Header{Struct: p.Struct()}, err
}

func (s Block) HasHeader() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Block) SetHeader(v Header) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHeader sets the header field to a newly
// allocated Header struct, preferring placement in s's segment.
func (s Block) NewHeader() (Header, error) {
	ss, err := NewHeader(s.Struct.Segment())
	if err != nil {
		return Header{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Block) Txs() (Txs, error) {
	p, err := s.Struct.Ptr(1)
	return Txs{Struct: p.Struct()}, err
}

func (s Block) HasTxs() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Block) SetTxs(v Txs) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewTxs sets the txs field to a newly
// allocated Txs struct, preferring placement in s's segment.
func (s Block) NewTxs() (Txs, error) {
	ss, err := NewTxs(s.Struct.Segment())
	if err != nil {
		return Txs{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Block) LastCommit() (Commit, error) {
	p, err := s.Struct.Ptr(2)
	return Commit{Struct: p.Struct()}, err
}

func (s Block) HasLastCommit() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Block) SetLastCommit(v Commit) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewLastCommit sets the lastCommit field to a newly
// allocated Commit struct, preferring placement in s's segment.
func (s Block) NewLastCommit() (Commit, error) {
	ss, err := NewCommit(s.Struct.Segment())
	if err != nil {
		return Commit{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// Block_List is a list of Block.
type Block_List struct{ capnp.List }

// NewBlock creates a new list of Block.
func NewBlock_List(s *capnp.Segment, sz int32) (Block_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Block_List{l}, err
}

func (s Block_List) At(i int) Block { return Block{s.List.Struct(i)} }

func (s Block_List) Set(i int, v Block) error { return s.List.SetStruct(i, v.Struct) }

func (s Block_List) String() string {
	str, _ := text.MarshalList(0xb8f393fd6f7f0c44, s.List)
	return str
}

// Block_Promise is a wrapper for a Block promised by a client call.
type Block_Promise struct{ *capnp.Pipeline }

func (p Block_Promise) Struct() (Block, error) {
	s, err := p.Pipeline.Struct()
	return Block{s}, err
}

func (p Block_Promise) Header() Header_Promise {
	return Header_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Block_Promise) Txs() Txs_Promise {
	return Txs_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p Block_Promise) LastCommit() Commit_Promise {
	return Commit_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type BlockInfo struct{ capnp.Struct }

// BlockInfo_TypeID is the unique identifier for the type BlockInfo.
const BlockInfo_TypeID = 0xe4bd2fc3497ade9b

func NewBlockInfo(s *capnp.Segment) (BlockInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return BlockInfo{st}, err
}

func NewRootBlockInfo(s *capnp.Segment) (BlockInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return BlockInfo{st}, err
}

func ReadRootBlockInfo(msg *capnp.Message) (BlockInfo, error) {
	root, err := msg.RootPtr()
	return BlockInfo{root.Struct()}, err
}

func (s BlockInfo) String() string {
	str, _ := text.Marshal(0xe4bd2fc3497ade9b, s.Struct)
	return str
}

func (s BlockInfo) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s BlockInfo) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s BlockInfo) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s BlockInfo) Height() uint32 {
	return s.Struct.Uint32(0)
}

func (s BlockInfo) SetHeight(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s BlockInfo) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s BlockInfo) HasData() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s BlockInfo) SetData(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s BlockInfo) Block() (Block, error) {
	p, err := s.Struct.Ptr(2)
	return Block{Struct: p.Struct()}, err
}

func (s BlockInfo) HasBlock() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s BlockInfo) SetBlock(v Block) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewBlock sets the block field to a newly
// allocated Block struct, preferring placement in s's segment.
func (s BlockInfo) NewBlock() (Block, error) {
	ss, err := NewBlock(s.Struct.Segment())
	if err != nil {
		return Block{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// BlockInfo_List is a list of BlockInfo.
type BlockInfo_List struct{ capnp.List }

// NewBlockInfo creates a new list of BlockInfo.
func NewBlockInfo_List(s *capnp.Segment, sz int32) (BlockInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return BlockInfo_List{l}, err
}

func (s BlockInfo_List) At(i int) BlockInfo { return BlockInfo{s.List.Struct(i)} }

func (s BlockInfo_List) Set(i int, v BlockInfo) error { return s.List.SetStruct(i, v.Struct) }

func (s BlockInfo_List) String() string {
	str, _ := text.MarshalList(0xe4bd2fc3497ade9b, s.List)
	return str
}

// BlockInfo_Promise is a wrapper for a BlockInfo promised by a client call.
type BlockInfo_Promise struct{ *capnp.Pipeline }

func (p BlockInfo_Promise) Struct() (BlockInfo, error) {
	s, err := p.Pipeline.Struct()
	return BlockInfo{s}, err
}

func (p BlockInfo_Promise) Block() Block_Promise {
	return Block_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type Tx struct{ capnp.Struct }

// Tx_TypeID is the unique identifier for the type Tx.
const Tx_TypeID = 0xa1d5f1677ab15215

func NewTx(s *capnp.Segment) (Tx, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return Tx{st}, err
}

func NewRootTx(s *capnp.Segment) (Tx, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return Tx{st}, err
}

func ReadRootTx(msg *capnp.Message) (Tx, error) {
	root, err := msg.RootPtr()
	return Tx{root.Struct()}, err
}

func (s Tx) String() string {
	str, _ := text.Marshal(0xa1d5f1677ab15215, s.Struct)
	return str
}

func (s Tx) Stamp() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Tx) HasStamp() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Tx) SetStamp(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Tx) Sender() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Tx) HasSender() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Tx) SetSender(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s Tx) Receiver() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s Tx) HasReceiver() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Tx) SetReceiver(v []byte) error {
	return s.Struct.SetData(2, v)
}

func (s Tx) Amount() uint64 {
	return s.Struct.Uint64(0)
}

func (s Tx) SetAmount(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s Tx) Fee() uint64 {
	return s.Struct.Uint64(8)
}

func (s Tx) SetFee(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s Tx) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s Tx) HasData() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Tx) SetData(v []byte) error {
	return s.Struct.SetData(3, v)
}

func (s Tx) Memo() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s Tx) HasMemo() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s Tx) MemoBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s Tx) SetMemo(v string) error {
	return s.Struct.SetText(4, v)
}

// Tx_List is a list of Tx.
type Tx_List struct{ capnp.List }

// NewTx creates a new list of Tx.
func NewTx_List(s *capnp.Segment, sz int32) (Tx_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5}, sz)
	return Tx_List{l}, err
}

func (s Tx_List) At(i int) Tx { return Tx{s.List.Struct(i)} }

func (s Tx_List) Set(i int, v Tx) error { return s.List.SetStruct(i, v.Struct) }

func (s Tx_List) String() string {
	str, _ := text.MarshalList(0xa1d5f1677ab15215, s.List)
	return str
}

// Tx_Promise is a wrapper for a Tx promised by a client call.
type Tx_Promise struct{ *capnp.Pipeline }

func (p Tx_Promise) Struct() (Tx, error) {
	s, err := p.Pipeline.Struct()
	return Tx{s}, err
}

type TxInfo struct{ capnp.Struct }

// TxInfo_TypeID is the unique identifier for the type TxInfo.
const TxInfo_TypeID = 0xf5a0d0fb09da17c7

func NewTxInfo(s *capnp.Segment) (TxInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return TxInfo{st}, err
}

func NewRootTxInfo(s *capnp.Segment) (TxInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return TxInfo{st}, err
}

func ReadRootTxInfo(msg *capnp.Message) (TxInfo, error) {
	root, err := msg.RootPtr()
	return TxInfo{root.Struct()}, err
}

func (s TxInfo) String() string {
	str, _ := text.Marshal(0xf5a0d0fb09da17c7, s.Struct)
	return str
}

func (s TxInfo) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s TxInfo) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TxInfo) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s TxInfo) Height() uint32 {
	return s.Struct.Uint32(0)
}

func (s TxInfo) SetHeight(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s TxInfo) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s TxInfo) HasData() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TxInfo) SetData(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s TxInfo) Tx() (Tx, error) {
	p, err := s.Struct.Ptr(2)
	return Tx{Struct: p.Struct()}, err
}

func (s TxInfo) HasTx() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s TxInfo) SetTx(v Tx) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewTx sets the tx field to a newly
// allocated Tx struct, preferring placement in s's segment.
func (s TxInfo) NewTx() (Tx, error) {
	ss, err := NewTx(s.Struct.Segment())
	if err != nil {
		return Tx{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// TxInfo_List is a list of TxInfo.
type TxInfo_List struct{ capnp.List }

// NewTxInfo creates a new list of TxInfo.
func NewTxInfo_List(s *capnp.Segment, sz int32) (TxInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return TxInfo_List{l}, err
}

func (s TxInfo_List) At(i int) TxInfo { return TxInfo{s.List.Struct(i)} }

func (s TxInfo_List) Set(i int, v TxInfo) error { return s.List.SetStruct(i, v.Struct) }

func (s TxInfo_List) String() string {
	str, _ := text.MarshalList(0xf5a0d0fb09da17c7, s.List)
	return str
}

// TxInfo_Promise is a wrapper for a TxInfo promised by a client call.
type TxInfo_Promise struct{ *capnp.Pipeline }

func (p TxInfo_Promise) Struct() (TxInfo, error) {
	s, err := p.Pipeline.Struct()
	return TxInfo{s}, err
}

func (p TxInfo_Promise) Tx() Tx_Promise {
	return Tx_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type ZarbServer struct{ Client capnp.Client }

// ZarbServer_TypeID is the unique identifier for the type ZarbServer.
const ZarbServer_TypeID = 0xf906e2ae0dd37fe4

func (c ZarbServer) BlockAt(ctx context.Context, params func(ZarbServer_blockAt_Params) error, opts ...capnp.CallOption) ZarbServer_blockAt_Results_Promise {
	if c.Client == nil {
		return ZarbServer_blockAt_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      0,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "blockAt",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_blockAt_Params{Struct: s}) }
	}
	return ZarbServer_blockAt_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) Block(ctx context.Context, params func(ZarbServer_block_Params) error, opts ...capnp.CallOption) ZarbServer_block_Results_Promise {
	if c.Client == nil {
		return ZarbServer_block_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      1,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "block",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_block_Params{Struct: s}) }
	}
	return ZarbServer_block_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) Tx(ctx context.Context, params func(ZarbServer_tx_Params) error, opts ...capnp.CallOption) ZarbServer_tx_Results_Promise {
	if c.Client == nil {
		return ZarbServer_tx_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      2,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "tx",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_tx_Params{Struct: s}) }
	}
	return ZarbServer_tx_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type ZarbServer_Server interface {
	BlockAt(ZarbServer_blockAt) error

	Block(ZarbServer_block) error

	Tx(ZarbServer_tx) error
}

func ZarbServer_ServerToClient(s ZarbServer_Server) ZarbServer {
	c, _ := s.(server.Closer)
	return ZarbServer{Client: server.New(ZarbServer_Methods(nil, s), c)}
}

func ZarbServer_Methods(methods []server.Method, s ZarbServer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      0,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "blockAt",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_blockAt{c, opts, ZarbServer_blockAt_Params{Struct: p}, ZarbServer_blockAt_Results{Struct: r}}
			return s.BlockAt(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      1,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "block",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_block{c, opts, ZarbServer_block_Params{Struct: p}, ZarbServer_block_Results{Struct: r}}
			return s.Block(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      2,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "tx",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_tx{c, opts, ZarbServer_tx_Params{Struct: p}, ZarbServer_tx_Results{Struct: r}}
			return s.Tx(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// ZarbServer_blockAt holds the arguments for a server call to ZarbServer.blockAt.
type ZarbServer_blockAt struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_blockAt_Params
	Results ZarbServer_blockAt_Results
}

// ZarbServer_block holds the arguments for a server call to ZarbServer.block.
type ZarbServer_block struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_block_Params
	Results ZarbServer_block_Results
}

// ZarbServer_tx holds the arguments for a server call to ZarbServer.tx.
type ZarbServer_tx struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_tx_Params
	Results ZarbServer_tx_Results
}

type ZarbServer_blockAt_Params struct{ capnp.Struct }

// ZarbServer_blockAt_Params_TypeID is the unique identifier for the type ZarbServer_blockAt_Params.
const ZarbServer_blockAt_Params_TypeID = 0x8df1c729f8d2ca00

func NewZarbServer_blockAt_Params(s *capnp.Segment) (ZarbServer_blockAt_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ZarbServer_blockAt_Params{st}, err
}

func NewRootZarbServer_blockAt_Params(s *capnp.Segment) (ZarbServer_blockAt_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ZarbServer_blockAt_Params{st}, err
}

func ReadRootZarbServer_blockAt_Params(msg *capnp.Message) (ZarbServer_blockAt_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_blockAt_Params{root.Struct()}, err
}

func (s ZarbServer_blockAt_Params) String() string {
	str, _ := text.Marshal(0x8df1c729f8d2ca00, s.Struct)
	return str
}

func (s ZarbServer_blockAt_Params) Height() uint32 {
	return s.Struct.Uint32(0)
}

func (s ZarbServer_blockAt_Params) SetHeight(v uint32) {
	s.Struct.SetUint32(0, v)
}

// ZarbServer_blockAt_Params_List is a list of ZarbServer_blockAt_Params.
type ZarbServer_blockAt_Params_List struct{ capnp.List }

// NewZarbServer_blockAt_Params creates a new list of ZarbServer_blockAt_Params.
func NewZarbServer_blockAt_Params_List(s *capnp.Segment, sz int32) (ZarbServer_blockAt_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return ZarbServer_blockAt_Params_List{l}, err
}

func (s ZarbServer_blockAt_Params_List) At(i int) ZarbServer_blockAt_Params {
	return ZarbServer_blockAt_Params{s.List.Struct(i)}
}

func (s ZarbServer_blockAt_Params_List) Set(i int, v ZarbServer_blockAt_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_blockAt_Params_List) String() string {
	str, _ := text.MarshalList(0x8df1c729f8d2ca00, s.List)
	return str
}

// ZarbServer_blockAt_Params_Promise is a wrapper for a ZarbServer_blockAt_Params promised by a client call.
type ZarbServer_blockAt_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_blockAt_Params_Promise) Struct() (ZarbServer_blockAt_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_blockAt_Params{s}, err
}

type ZarbServer_blockAt_Results struct{ capnp.Struct }

// ZarbServer_blockAt_Results_TypeID is the unique identifier for the type ZarbServer_blockAt_Results.
const ZarbServer_blockAt_Results_TypeID = 0xf5e8509c82a71e1c

func NewZarbServer_blockAt_Results(s *capnp.Segment) (ZarbServer_blockAt_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_blockAt_Results{st}, err
}

func NewRootZarbServer_blockAt_Results(s *capnp.Segment) (ZarbServer_blockAt_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_blockAt_Results{st}, err
}

func ReadRootZarbServer_blockAt_Results(msg *capnp.Message) (ZarbServer_blockAt_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_blockAt_Results{root.Struct()}, err
}

func (s ZarbServer_blockAt_Results) String() string {
	str, _ := text.Marshal(0xf5e8509c82a71e1c, s.Struct)
	return str
}

func (s ZarbServer_blockAt_Results) BlockInfo() (BlockInfo, error) {
	p, err := s.Struct.Ptr(0)
	return BlockInfo{Struct: p.Struct()}, err
}

func (s ZarbServer_blockAt_Results) HasBlockInfo() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_blockAt_Results) SetBlockInfo(v BlockInfo) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBlockInfo sets the blockInfo field to a newly
// allocated BlockInfo struct, preferring placement in s's segment.
func (s ZarbServer_blockAt_Results) NewBlockInfo() (BlockInfo, error) {
	ss, err := NewBlockInfo(s.Struct.Segment())
	if err != nil {
		return BlockInfo{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_blockAt_Results_List is a list of ZarbServer_blockAt_Results.
type ZarbServer_blockAt_Results_List struct{ capnp.List }

// NewZarbServer_blockAt_Results creates a new list of ZarbServer_blockAt_Results.
func NewZarbServer_blockAt_Results_List(s *capnp.Segment, sz int32) (ZarbServer_blockAt_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_blockAt_Results_List{l}, err
}

func (s ZarbServer_blockAt_Results_List) At(i int) ZarbServer_blockAt_Results {
	return ZarbServer_blockAt_Results{s.List.Struct(i)}
}

func (s ZarbServer_blockAt_Results_List) Set(i int, v ZarbServer_blockAt_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_blockAt_Results_List) String() string {
	str, _ := text.MarshalList(0xf5e8509c82a71e1c, s.List)
	return str
}

// ZarbServer_blockAt_Results_Promise is a wrapper for a ZarbServer_blockAt_Results promised by a client call.
type ZarbServer_blockAt_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_blockAt_Results_Promise) Struct() (ZarbServer_blockAt_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_blockAt_Results{s}, err
}

func (p ZarbServer_blockAt_Results_Promise) BlockInfo() BlockInfo_Promise {
	return BlockInfo_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ZarbServer_block_Params struct{ capnp.Struct }

// ZarbServer_block_Params_TypeID is the unique identifier for the type ZarbServer_block_Params.
const ZarbServer_block_Params_TypeID = 0x85252b1ec1c352d2

func NewZarbServer_block_Params(s *capnp.Segment) (ZarbServer_block_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_block_Params{st}, err
}

func NewRootZarbServer_block_Params(s *capnp.Segment) (ZarbServer_block_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_block_Params{st}, err
}

func ReadRootZarbServer_block_Params(msg *capnp.Message) (ZarbServer_block_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_block_Params{root.Struct()}, err
}

func (s ZarbServer_block_Params) String() string {
	str, _ := text.Marshal(0x85252b1ec1c352d2, s.Struct)
	return str
}

func (s ZarbServer_block_Params) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ZarbServer_block_Params) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_block_Params) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

// ZarbServer_block_Params_List is a list of ZarbServer_block_Params.
type ZarbServer_block_Params_List struct{ capnp.List }

// NewZarbServer_block_Params creates a new list of ZarbServer_block_Params.
func NewZarbServer_block_Params_List(s *capnp.Segment, sz int32) (ZarbServer_block_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_block_Params_List{l}, err
}

func (s ZarbServer_block_Params_List) At(i int) ZarbServer_block_Params {
	return ZarbServer_block_Params{s.List.Struct(i)}
}

func (s ZarbServer_block_Params_List) Set(i int, v ZarbServer_block_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_block_Params_List) String() string {
	str, _ := text.MarshalList(0x85252b1ec1c352d2, s.List)
	return str
}

// ZarbServer_block_Params_Promise is a wrapper for a ZarbServer_block_Params promised by a client call.
type ZarbServer_block_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_block_Params_Promise) Struct() (ZarbServer_block_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_block_Params{s}, err
}

type ZarbServer_block_Results struct{ capnp.Struct }

// ZarbServer_block_Results_TypeID is the unique identifier for the type ZarbServer_block_Results.
const ZarbServer_block_Results_TypeID = 0x946b1f715eac1308

func NewZarbServer_block_Results(s *capnp.Segment) (ZarbServer_block_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_block_Results{st}, err
}

func NewRootZarbServer_block_Results(s *capnp.Segment) (ZarbServer_block_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_block_Results{st}, err
}

func ReadRootZarbServer_block_Results(msg *capnp.Message) (ZarbServer_block_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_block_Results{root.Struct()}, err
}

func (s ZarbServer_block_Results) String() string {
	str, _ := text.Marshal(0x946b1f715eac1308, s.Struct)
	return str
}

func (s ZarbServer_block_Results) BlockInfo() (BlockInfo, error) {
	p, err := s.Struct.Ptr(0)
	return BlockInfo{Struct: p.Struct()}, err
}

func (s ZarbServer_block_Results) HasBlockInfo() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_block_Results) SetBlockInfo(v BlockInfo) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBlockInfo sets the blockInfo field to a newly
// allocated BlockInfo struct, preferring placement in s's segment.
func (s ZarbServer_block_Results) NewBlockInfo() (BlockInfo, error) {
	ss, err := NewBlockInfo(s.Struct.Segment())
	if err != nil {
		return BlockInfo{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_block_Results_List is a list of ZarbServer_block_Results.
type ZarbServer_block_Results_List struct{ capnp.List }

// NewZarbServer_block_Results creates a new list of ZarbServer_block_Results.
func NewZarbServer_block_Results_List(s *capnp.Segment, sz int32) (ZarbServer_block_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_block_Results_List{l}, err
}

func (s ZarbServer_block_Results_List) At(i int) ZarbServer_block_Results {
	return ZarbServer_block_Results{s.List.Struct(i)}
}

func (s ZarbServer_block_Results_List) Set(i int, v ZarbServer_block_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_block_Results_List) String() string {
	str, _ := text.MarshalList(0x946b1f715eac1308, s.List)
	return str
}

// ZarbServer_block_Results_Promise is a wrapper for a ZarbServer_block_Results promised by a client call.
type ZarbServer_block_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_block_Results_Promise) Struct() (ZarbServer_block_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_block_Results{s}, err
}

func (p ZarbServer_block_Results_Promise) BlockInfo() BlockInfo_Promise {
	return BlockInfo_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ZarbServer_tx_Params struct{ capnp.Struct }

// ZarbServer_tx_Params_TypeID is the unique identifier for the type ZarbServer_tx_Params.
const ZarbServer_tx_Params_TypeID = 0xd3df8a6125925ab9

func NewZarbServer_tx_Params(s *capnp.Segment) (ZarbServer_tx_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_tx_Params{st}, err
}

func NewRootZarbServer_tx_Params(s *capnp.Segment) (ZarbServer_tx_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_tx_Params{st}, err
}

func ReadRootZarbServer_tx_Params(msg *capnp.Message) (ZarbServer_tx_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_tx_Params{root.Struct()}, err
}

func (s ZarbServer_tx_Params) String() string {
	str, _ := text.Marshal(0xd3df8a6125925ab9, s.Struct)
	return str
}

func (s ZarbServer_tx_Params) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ZarbServer_tx_Params) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_tx_Params) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

// ZarbServer_tx_Params_List is a list of ZarbServer_tx_Params.
type ZarbServer_tx_Params_List struct{ capnp.List }

// NewZarbServer_tx_Params creates a new list of ZarbServer_tx_Params.
func NewZarbServer_tx_Params_List(s *capnp.Segment, sz int32) (ZarbServer_tx_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_tx_Params_List{l}, err
}

func (s ZarbServer_tx_Params_List) At(i int) ZarbServer_tx_Params {
	return ZarbServer_tx_Params{s.List.Struct(i)}
}

func (s ZarbServer_tx_Params_List) Set(i int, v ZarbServer_tx_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_tx_Params_List) String() string {
	str, _ := text.MarshalList(0xd3df8a6125925ab9, s.List)
	return str
}

// ZarbServer_tx_Params_Promise is a wrapper for a ZarbServer_tx_Params promised by a client call.
type ZarbServer_tx_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_tx_Params_Promise) Struct() (ZarbServer_tx_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_tx_Params{s}, err
}

type ZarbServer_tx_Results struct{ capnp.Struct }

// ZarbServer_tx_Results_TypeID is the unique identifier for the type ZarbServer_tx_Results.
const ZarbServer_tx_Results_TypeID = 0xa2b1016cefab775b

func NewZarbServer_tx_Results(s *capnp.Segment) (ZarbServer_tx_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_tx_Results{st}, err
}

func NewRootZarbServer_tx_Results(s *capnp.Segment) (ZarbServer_tx_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_tx_Results{st}, err
}

func ReadRootZarbServer_tx_Results(msg *capnp.Message) (ZarbServer_tx_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_tx_Results{root.Struct()}, err
}

func (s ZarbServer_tx_Results) String() string {
	str, _ := text.Marshal(0xa2b1016cefab775b, s.Struct)
	return str
}

func (s ZarbServer_tx_Results) TxInfo() (BlockInfo, error) {
	p, err := s.Struct.Ptr(0)
	return BlockInfo{Struct: p.Struct()}, err
}

func (s ZarbServer_tx_Results) HasTxInfo() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_tx_Results) SetTxInfo(v BlockInfo) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTxInfo sets the txInfo field to a newly
// allocated BlockInfo struct, preferring placement in s's segment.
func (s ZarbServer_tx_Results) NewTxInfo() (BlockInfo, error) {
	ss, err := NewBlockInfo(s.Struct.Segment())
	if err != nil {
		return BlockInfo{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_tx_Results_List is a list of ZarbServer_tx_Results.
type ZarbServer_tx_Results_List struct{ capnp.List }

// NewZarbServer_tx_Results creates a new list of ZarbServer_tx_Results.
func NewZarbServer_tx_Results_List(s *capnp.Segment, sz int32) (ZarbServer_tx_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_tx_Results_List{l}, err
}

func (s ZarbServer_tx_Results_List) At(i int) ZarbServer_tx_Results {
	return ZarbServer_tx_Results{s.List.Struct(i)}
}

func (s ZarbServer_tx_Results_List) Set(i int, v ZarbServer_tx_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_tx_Results_List) String() string {
	str, _ := text.MarshalList(0xa2b1016cefab775b, s.List)
	return str
}

// ZarbServer_tx_Results_Promise is a wrapper for a ZarbServer_tx_Results promised by a client call.
type ZarbServer_tx_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_tx_Results_Promise) Struct() (ZarbServer_tx_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_tx_Results{s}, err
}

func (p ZarbServer_tx_Results_Promise) TxInfo() BlockInfo_Promise {
	return BlockInfo_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_84b56bd0975dfd33 = "x\xda\xac\x96mh\x1c\xd5\x1a\xc7\x9f\xff93;\x9b" +
	"\x904;\xcc\x86[J\xdb\xe4^R\xb8\xed\xbd\xb6\xda" +
	"\x08j\xbf$M[H\xa4BNVDR+N\xb3" +
	"\xd3f\xcd\xce\xcevf\xd2\x84`\x09\x16\xfd`A\x8b" +
	"/\xe0;XADk\xd5\x82\x01\x0b-\xb4\xd6\xd2\x17" +
	"Z\xe8\x8b\xa2\x14\xad\x10\x0a\xf6\x83\xd2\x06\x0d\xb4j]" +
	"y&\xc9\xeef\xd3\xd8T\xfdvx\xce3\xbf\xf3\x9c" +
	"\xff\xf9\x9f3\xcf\x9d\x1bd\xab\xb8K\xffJ#R\xf7" +
	"\xea\xb1\xc2\xb9\xae#\x87\x17\xffo\xc9\xd3d6\x82H" +
	"\x87A\xd4\xac\xc4\xe3 X\x1bE\x0b\xe1\xf7\x93\xe7\xae" +
	"-=6\xf6\xacj\x04\x884\x9e\xde.\x86x\xfa\x19" +
	"\x9e.\\}\xff\x95\xe1\x91o.>G\xaa\x1e\xa2\xd0" +
	"|c\xe3\xcbg\xfaF\x9e\"\xdd0\x88\xac\xf7\xc4\xa8" +
	"5\"\xf8\x9b}\xa2\x00B!n}\xf0\xe8\xd6\x86\xbe" +
	"\x97\xcaW;\xab\xf9\x8c\xfbVc\\}\xd7\xbe\xa1-" +
	"c_\xee\xae\xc4\xe9\x8c\x83\xfe\x99U\xc5\xa3f]\xdf" +
	"\xc5\xb8\x0d\x03{\xaed\xb1\xef\xedr\xdc\xf3\xb1n\xc6" +
	"\xbd\x19c\xdc\xda\x9aa\xef\xc6\x8b?}Jf=\xca" +
	"h\x92i\x07c\x17\xac\x131\x1e\x1d\x8d}D(," +
	"\x1d_ve\xefh\xe3\xe1\x8a\\\x86Z\xb6q\xd2r" +
	"\xa3-e\x0c\xe6\xee\xef~a\x89\xbd\xf3\xbb\xf3\xe5\x0b" +
	"\xbfjt\xf1\xc2\xefD\x09\xaf_\x1c\xea8\xb2\xe2\xe0" +
	"%\xde\xc7\x8c\x95\x8f\x1a\xbfXg#\xdai\xe3{B" +
	"\xe1\x9e=\xc9E\xbb\xdacc\x95\xc9\xac\x9c\xb5;>" +
	"j\xed\x8dGj\xc6\xb9\xccc\xff\xbaP\xf5\xeb\x99\xb7" +
	"\xc6oJ\xceT\x8dZ\xfdU<\xdaZ\xc5\xe4\x85\x8b" +
	"\xdf\xdd\xf1F\xe7\xe5\xf1\xf2:\xd7U\xef\xe0:U5" +
	"\xd7yi\xf8|\xed\x87\xa3\xb1\xebd\xd6\xcb\x12\x8c\xd0" +
	"\xdc_-`=Y\xcd\xa8\xed\xd5\xc7\xacq\x1e\x15\x06" +
	"\x06\x06V\xf4\xd8\xf9\x9c\x96_1d\xfb\x9b\x96\xf38" +
	"\xbf\xaa\xdb\xf67\xa5\x1c\x7f\x9b\xe3/\xdf\x94\xf5z\xfa" +
	"\x9a:\xed:\xdfv\x03\xa5I\x8dH\x03\x91Y\xbb\x8c" +
	"H\xc5%TR\xa0\xae\xd7\x0ezQK\x02\xb5\x849" +
	"\"W\x87M-\x9dv%tU\x09\xda\xd2\xebd\xb6" +
	"\xf4\x86\x88\x93@\xbc\x0c+\xa6a\xdb\x1d\xdbH;~" +
	"'\xa0\x9a\x8a\x98\x1f\xdb\x88\xd4e\x09\xf5\xb3\x80\x09$" +
	"\xd9\xe7\xe6\x18\x17\xfc\x83\x84\xba&\x00\x91\x84 2\xc7" +
	"9\xf1\xaa\x84\xfaM\xc0\x94HB\x12\x99\xd7\xbb\x88\xd4" +
	"5\x89\x94\x06\x01S\x13Ih\xecT\xbcF\x94\xd2 " +
	"\x91Jp\\\x97I\xe8DV-|\xa2T\x0d\xc7\xe7" +
	"s<\xa6%\x11#\xb2\xea1D\x94Jr\xbc\x91\xe3" +
	"\x86\x9e\x8c|\xb7\x08;\x89R\x8d\x1c\xff?\xc7\xe3\xb1" +
	"$\xe2D\xd6R\xec J\xfd\x97\xe3wC`x\x9b" +
	"\xe3\x07\x19/\x07\x8d\x044B]\x98q\x1d\xe8$\xa0" +
	"\x13\x86\xc3\xc1\xa0\xbd\\\xf2 \xb4C\xa7\xdd\x0e\x08\xa5" +
	"X\xce\x19\x0c\x1f\xb2\xb3\x19\xa4\xed\xd0\xf3\x83v[\x96" +
	"}\x90\xb5\x83\xb0-\xeb\xf5PC\xdf4\x10\xc7\xd7x" +
	"\xaeK-\x99p\xc6D\x97\xd3\xe3 \x93\x0f\xa3\xb5\x89" +
	"\x8asy\xdf\xcb{\x81\xe3cu:\xed;A@\xb7" +
	"i\x85\xa6.\xa7!\xe8\xcf\x86\xd3\x9c\xc0\x87P#\xa1" +
	"\xe6\x0b\x14\xa2\xac\x8e\xdcf\x82\x87D\xe9\"\x12\x90\x98" +
	"\xd5\x18\x0f\x0e\x12\x9bba\x918\xb2\x92H},\xa1" +
	"\x0e\x94\x99b?\x1b\xee\x13\x09uH\xc0\x14\x93\xae8" +
	"x?\x91: \xa1\x8e\x0b@N\x98\xe2('\x1e\x92" +
	"P\xa7\xd8\x13\x88<a\x9e\xf8\x0f\x91\xfa\\B\x9d)" +
	"\x19\xc2<\xcd>;.\xa1\xbe(\xb9\xc1<\xcb\xc1S" +
	"\x12\xeak\x81\x86 \xb4\xdd\xfc\x94F-\x81\x93K;" +
	"~Q2\xdf\xe9q2\xdb\x1c\x9fJ\x02\xb7\xd8\xae\xd7" +
	"\x9f\x0bQE\x02U\x04c\xb3\xe3L\x8d\xeb\xd2vh" +
	"O\xe5\xd5\xb9\x8e\xeb\xa1\x86\x04j\xe6\xa2}8\xd8\xd4" +
	"\xe5\x04\xfdY\x19\xcez\x05\xc3\xc1\x8e\xdc\xe6\xb9k\xde" +
	"\x96\xf5dO\x1f\xcb^S\xe4\xadc^\xab\x84Z_" +
	"&{\x07\x0b\xb7VBu\x96\xc9\xfe@7\x91Z/" +
	"\xa1\x1e\x8e.\xbf\xcd\xaa$J\x7f\xa3\x89\x95\x8dp0" +
	"@\xa2\xf4\xb2O\xd6S\xf4\xad\xcc\x84H\x94\x9e\xdf[" +
	"X$\xa0\xc8$7\xd9}\x13\xd7`\x07\xbdN\x80y" +
	"\x84N\x89H\xe4ys\xd45z\xd8p{\xcf\xe5\x0c" +
	")[\"\xcf{\\`\xa2\xc8\xb1\x99\xf3\x88\x84\xea\x15" +
	"\x98R\xd3\xe1\xa2\x1f\x93PYV\x13\x13jf81" +
	"-\xa1\xf2\xfc\xb4\x89\x09\x17\xbb|\x07z%TXQ" +
	"E\xc5c;\xcdV\x0d\xd1\xf5C\xa2\xf4\xeb\xfdSU" +
	"\xd7x\xae\xe1f\xc2\x0a\x17\xac,\xb9\xa0h\x02\xbe\xe2" +
	"\xed\x12*]V\xb6\xdd=\xb9\x97'\x04\x1a|\xaf?" +
	"\x97.\xfe\x00z<\xd7\xcd\x84\x8eO\x98q&Af" +
	"K\xce\x0e\xfb}\x92\xb3\x9fW\xe5\xd9w\x18\xff\xb4\xb8" +
	"\x0b\xfe\x82\xb82\x1cD\xa2\xd4#U(\xab\xdf\xea\x17" +
	"\x1a]\xe00\xa0\xbf\xf7r\xcaY\x96\xa1\x89C\xd4\x89" +
	"\xa6z\xc6\xb2\xf6C\xb5\x910\xd7\x19@\xb1\xe1\xc4T" +
	"/h\xde\xb7\x92\x84y\x87\x01Ql\xab0\xd5\xd8\x99" +
	"\xff^@\xc2\xac7\x86'\xb7\xd0:\xe9\xafV\x96\xa2" +
	"\x15\x9d\xc0\x1f\x01\x00\x00\xff\xff\xbb\xc0\x9f\x9c"

func init() {
	schemas.Register(schema_84b56bd0975dfd33,
		0x85252b1ec1c352d2,
		0x8df1c729f8d2ca00,
		0x8ededcb57f98aaf0,
		0x946b1f715eac1308,
		0xa1d5f1677ab15215,
		0xa2b1016cefab775b,
		0xb8f393fd6f7f0c44,
		0xc120e2adef2af529,
		0xd3df8a6125925ab9,
		0xe4bd2fc3497ade9b,
		0xf106488f1d14ab37,
		0xf5a0d0fb09da17c7,
		0xf5e8509c82a71e1c,
		0xf906e2ae0dd37fe4)
}
