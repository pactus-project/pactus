// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	context "golang.org/x/net/context"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Header struct{ capnp.Struct }

// Header_TypeID is the unique identifier for the type Header.
const Header_TypeID = 0x8ededcb57f98aaf0

func NewHeader(s *capnp.Segment) (Header, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 6})
	return Header{st}, err
}

func NewRootHeader(s *capnp.Segment) (Header, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 6})
	return Header{st}, err
}

func ReadRootHeader(msg *capnp.Message) (Header, error) {
	root, err := msg.RootPtr()
	return Header{root.Struct()}, err
}

func (s Header) String() string {
	str, _ := text.Marshal(0x8ededcb57f98aaf0, s.Struct)
	return str
}

func (s Header) Version() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s Header) SetVersion(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s Header) Time() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s Header) SetTime(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s Header) LastBlockHash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Header) HasLastBlockHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Header) SetLastBlockHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Header) StateHash() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Header) HasStateHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Header) SetStateHash(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s Header) TxsHash() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s Header) HasTxsHash() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Header) SetTxsHash(v []byte) error {
	return s.Struct.SetData(2, v)
}

func (s Header) LastCertificateHash() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s Header) HasLastCertificateHash() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Header) SetLastCertificateHash(v []byte) error {
	return s.Struct.SetData(3, v)
}

func (s Header) SortitionSeed() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return []byte(p.Data()), err
}

func (s Header) HasSortitionSeed() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s Header) SetSortitionSeed(v []byte) error {
	return s.Struct.SetData(4, v)
}

func (s Header) ProposerAddress() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return []byte(p.Data()), err
}

func (s Header) HasProposerAddress() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s Header) SetProposerAddress(v []byte) error {
	return s.Struct.SetData(5, v)
}

// Header_List is a list of Header.
type Header_List struct{ capnp.List }

// NewHeader creates a new list of Header.
func NewHeader_List(s *capnp.Segment, sz int32) (Header_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 6}, sz)
	return Header_List{l}, err
}

func (s Header_List) At(i int) Header { return Header{s.List.Struct(i)} }

func (s Header_List) Set(i int, v Header) error { return s.List.SetStruct(i, v.Struct) }

func (s Header_List) String() string {
	str, _ := text.MarshalList(0x8ededcb57f98aaf0, s.List)
	return str
}

// Header_Promise is a wrapper for a Header promised by a client call.
type Header_Promise struct{ *capnp.Pipeline }

func (p Header_Promise) Struct() (Header, error) {
	s, err := p.Pipeline.Struct()
	return Header{s}, err
}

type Txs struct{ capnp.Struct }

// Txs_TypeID is the unique identifier for the type Txs.
const Txs_TypeID = 0xc120e2adef2af529

func NewTxs(s *capnp.Segment) (Txs, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Txs{st}, err
}

func NewRootTxs(s *capnp.Segment) (Txs, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Txs{st}, err
}

func ReadRootTxs(msg *capnp.Message) (Txs, error) {
	root, err := msg.RootPtr()
	return Txs{root.Struct()}, err
}

func (s Txs) String() string {
	str, _ := text.Marshal(0xc120e2adef2af529, s.Struct)
	return str
}

func (s Txs) Hashes() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.DataList{List: p.List()}, err
}

func (s Txs) HasHashes() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Txs) SetHashes(v capnp.DataList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewHashes sets the hashes field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Txs) NewHashes(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Txs_List is a list of Txs.
type Txs_List struct{ capnp.List }

// NewTxs creates a new list of Txs.
func NewTxs_List(s *capnp.Segment, sz int32) (Txs_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Txs_List{l}, err
}

func (s Txs_List) At(i int) Txs { return Txs{s.List.Struct(i)} }

func (s Txs_List) Set(i int, v Txs) error { return s.List.SetStruct(i, v.Struct) }

func (s Txs_List) String() string {
	str, _ := text.MarshalList(0xc120e2adef2af529, s.List)
	return str
}

// Txs_Promise is a wrapper for a Txs promised by a client call.
type Txs_Promise struct{ *capnp.Pipeline }

func (p Txs_Promise) Struct() (Txs, error) {
	s, err := p.Pipeline.Struct()
	return Txs{s}, err
}

type Certificate struct{ capnp.Struct }

// Certificate_TypeID is the unique identifier for the type Certificate.
const Certificate_TypeID = 0xf94646af9560150b

func NewCertificate(s *capnp.Segment) (Certificate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Certificate{st}, err
}

func NewRootCertificate(s *capnp.Segment) (Certificate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Certificate{st}, err
}

func ReadRootCertificate(msg *capnp.Message) (Certificate, error) {
	root, err := msg.RootPtr()
	return Certificate{root.Struct()}, err
}

func (s Certificate) String() string {
	str, _ := text.Marshal(0xf94646af9560150b, s.Struct)
	return str
}

func (s Certificate) BlockHash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Certificate) HasBlockHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Certificate) SetBlockHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Certificate) Round() uint32 {
	return s.Struct.Uint32(0)
}

func (s Certificate) SetRound(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s Certificate) Committers() (capnp.Int32List, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.Int32List{List: p.List()}, err
}

func (s Certificate) HasCommitters() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Certificate) SetCommitters(v capnp.Int32List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewCommitters sets the committers field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s Certificate) NewCommitters(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Certificate) Absences() (capnp.Int32List, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.Int32List{List: p.List()}, err
}

func (s Certificate) HasAbsences() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Certificate) SetAbsences(v capnp.Int32List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewAbsences sets the absences field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s Certificate) NewAbsences(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s Certificate) Signature() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s Certificate) HasSignature() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Certificate) SetSignature(v []byte) error {
	return s.Struct.SetData(3, v)
}

// Certificate_List is a list of Certificate.
type Certificate_List struct{ capnp.List }

// NewCertificate creates a new list of Certificate.
func NewCertificate_List(s *capnp.Segment, sz int32) (Certificate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return Certificate_List{l}, err
}

func (s Certificate_List) At(i int) Certificate { return Certificate{s.List.Struct(i)} }

func (s Certificate_List) Set(i int, v Certificate) error { return s.List.SetStruct(i, v.Struct) }

func (s Certificate_List) String() string {
	str, _ := text.MarshalList(0xf94646af9560150b, s.List)
	return str
}

// Certificate_Promise is a wrapper for a Certificate promised by a client call.
type Certificate_Promise struct{ *capnp.Pipeline }

func (p Certificate_Promise) Struct() (Certificate, error) {
	s, err := p.Pipeline.Struct()
	return Certificate{s}, err
}

type Block struct{ capnp.Struct }

// Block_TypeID is the unique identifier for the type Block.
const Block_TypeID = 0xb8f393fd6f7f0c44

func NewBlock(s *capnp.Segment) (Block, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Block{st}, err
}

func NewRootBlock(s *capnp.Segment) (Block, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Block{st}, err
}

func ReadRootBlock(msg *capnp.Message) (Block, error) {
	root, err := msg.RootPtr()
	return Block{root.Struct()}, err
}

func (s Block) String() string {
	str, _ := text.Marshal(0xb8f393fd6f7f0c44, s.Struct)
	return str
}

func (s Block) Header() (Header, error) {
	p, err := s.Struct.Ptr(0)
	return Header{Struct: p.Struct()}, err
}

func (s Block) HasHeader() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Block) SetHeader(v Header) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHeader sets the header field to a newly
// allocated Header struct, preferring placement in s's segment.
func (s Block) NewHeader() (Header, error) {
	ss, err := NewHeader(s.Struct.Segment())
	if err != nil {
		return Header{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Block) LastCertificate() (Certificate, error) {
	p, err := s.Struct.Ptr(1)
	return Certificate{Struct: p.Struct()}, err
}

func (s Block) HasLastCertificate() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Block) SetLastCertificate(v Certificate) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewLastCertificate sets the lastCertificate field to a newly
// allocated Certificate struct, preferring placement in s's segment.
func (s Block) NewLastCertificate() (Certificate, error) {
	ss, err := NewCertificate(s.Struct.Segment())
	if err != nil {
		return Certificate{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Block) Txs() (Txs, error) {
	p, err := s.Struct.Ptr(2)
	return Txs{Struct: p.Struct()}, err
}

func (s Block) HasTxs() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Block) SetTxs(v Txs) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewTxs sets the txs field to a newly
// allocated Txs struct, preferring placement in s's segment.
func (s Block) NewTxs() (Txs, error) {
	ss, err := NewTxs(s.Struct.Segment())
	if err != nil {
		return Txs{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// Block_List is a list of Block.
type Block_List struct{ capnp.List }

// NewBlock creates a new list of Block.
func NewBlock_List(s *capnp.Segment, sz int32) (Block_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Block_List{l}, err
}

func (s Block_List) At(i int) Block { return Block{s.List.Struct(i)} }

func (s Block_List) Set(i int, v Block) error { return s.List.SetStruct(i, v.Struct) }

func (s Block_List) String() string {
	str, _ := text.MarshalList(0xb8f393fd6f7f0c44, s.List)
	return str
}

// Block_Promise is a wrapper for a Block promised by a client call.
type Block_Promise struct{ *capnp.Pipeline }

func (p Block_Promise) Struct() (Block, error) {
	s, err := p.Pipeline.Struct()
	return Block{s}, err
}

func (p Block_Promise) Header() Header_Promise {
	return Header_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Block_Promise) LastCertificate() Certificate_Promise {
	return Certificate_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p Block_Promise) Txs() Txs_Promise {
	return Txs_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type BlockchainResult struct{ capnp.Struct }

// BlockchainResult_TypeID is the unique identifier for the type BlockchainResult.
const BlockchainResult_TypeID = 0xbd88d0eab3826ba9

func NewBlockchainResult(s *capnp.Segment) (BlockchainResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BlockchainResult{st}, err
}

func NewRootBlockchainResult(s *capnp.Segment) (BlockchainResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BlockchainResult{st}, err
}

func ReadRootBlockchainResult(msg *capnp.Message) (BlockchainResult, error) {
	root, err := msg.RootPtr()
	return BlockchainResult{root.Struct()}, err
}

func (s BlockchainResult) String() string {
	str, _ := text.Marshal(0xbd88d0eab3826ba9, s.Struct)
	return str
}

func (s BlockchainResult) Height() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s BlockchainResult) SetHeight(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

// BlockchainResult_List is a list of BlockchainResult.
type BlockchainResult_List struct{ capnp.List }

// NewBlockchainResult creates a new list of BlockchainResult.
func NewBlockchainResult_List(s *capnp.Segment, sz int32) (BlockchainResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return BlockchainResult_List{l}, err
}

func (s BlockchainResult_List) At(i int) BlockchainResult { return BlockchainResult{s.List.Struct(i)} }

func (s BlockchainResult_List) Set(i int, v BlockchainResult) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s BlockchainResult_List) String() string {
	str, _ := text.MarshalList(0xbd88d0eab3826ba9, s.List)
	return str
}

// BlockchainResult_Promise is a wrapper for a BlockchainResult promised by a client call.
type BlockchainResult_Promise struct{ *capnp.Pipeline }

func (p BlockchainResult_Promise) Struct() (BlockchainResult, error) {
	s, err := p.Pipeline.Struct()
	return BlockchainResult{s}, err
}

type BlockResult struct{ capnp.Struct }

// BlockResult_TypeID is the unique identifier for the type BlockResult.
const BlockResult_TypeID = 0x83143f06598cf9e8

func NewBlockResult(s *capnp.Segment) (BlockResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return BlockResult{st}, err
}

func NewRootBlockResult(s *capnp.Segment) (BlockResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return BlockResult{st}, err
}

func ReadRootBlockResult(msg *capnp.Message) (BlockResult, error) {
	root, err := msg.RootPtr()
	return BlockResult{root.Struct()}, err
}

func (s BlockResult) String() string {
	str, _ := text.Marshal(0x83143f06598cf9e8, s.Struct)
	return str
}

func (s BlockResult) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s BlockResult) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s BlockResult) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s BlockResult) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s BlockResult) HasData() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s BlockResult) SetData(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s BlockResult) Block() (Block, error) {
	p, err := s.Struct.Ptr(2)
	return Block{Struct: p.Struct()}, err
}

func (s BlockResult) HasBlock() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s BlockResult) SetBlock(v Block) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewBlock sets the block field to a newly
// allocated Block struct, preferring placement in s's segment.
func (s BlockResult) NewBlock() (Block, error) {
	ss, err := NewBlock(s.Struct.Segment())
	if err != nil {
		return Block{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// BlockResult_List is a list of BlockResult.
type BlockResult_List struct{ capnp.List }

// NewBlockResult creates a new list of BlockResult.
func NewBlockResult_List(s *capnp.Segment, sz int32) (BlockResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return BlockResult_List{l}, err
}

func (s BlockResult_List) At(i int) BlockResult { return BlockResult{s.List.Struct(i)} }

func (s BlockResult_List) Set(i int, v BlockResult) error { return s.List.SetStruct(i, v.Struct) }

func (s BlockResult_List) String() string {
	str, _ := text.MarshalList(0x83143f06598cf9e8, s.List)
	return str
}

// BlockResult_Promise is a wrapper for a BlockResult promised by a client call.
type BlockResult_Promise struct{ *capnp.Pipeline }

func (p BlockResult_Promise) Struct() (BlockResult, error) {
	s, err := p.Pipeline.Struct()
	return BlockResult{s}, err
}

func (p BlockResult_Promise) Block() Block_Promise {
	return Block_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type TransactionResult struct{ capnp.Struct }

// TransactionResult_TypeID is the unique identifier for the type TransactionResult.
const TransactionResult_TypeID = 0xbd77371c14feb668

func NewTransactionResult(s *capnp.Segment) (TransactionResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return TransactionResult{st}, err
}

func NewRootTransactionResult(s *capnp.Segment) (TransactionResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return TransactionResult{st}, err
}

func ReadRootTransactionResult(msg *capnp.Message) (TransactionResult, error) {
	root, err := msg.RootPtr()
	return TransactionResult{root.Struct()}, err
}

func (s TransactionResult) String() string {
	str, _ := text.Marshal(0xbd77371c14feb668, s.Struct)
	return str
}

func (s TransactionResult) Id() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s TransactionResult) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TransactionResult) SetId(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s TransactionResult) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s TransactionResult) HasData() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TransactionResult) SetData(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s TransactionResult) Transaction() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s TransactionResult) HasTransaction() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s TransactionResult) SetTransaction(v []byte) error {
	return s.Struct.SetData(2, v)
}

// TransactionResult_List is a list of TransactionResult.
type TransactionResult_List struct{ capnp.List }

// NewTransactionResult creates a new list of TransactionResult.
func NewTransactionResult_List(s *capnp.Segment, sz int32) (TransactionResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return TransactionResult_List{l}, err
}

func (s TransactionResult_List) At(i int) TransactionResult {
	return TransactionResult{s.List.Struct(i)}
}

func (s TransactionResult_List) Set(i int, v TransactionResult) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s TransactionResult_List) String() string {
	str, _ := text.MarshalList(0xbd77371c14feb668, s.List)
	return str
}

// TransactionResult_Promise is a wrapper for a TransactionResult promised by a client call.
type TransactionResult_Promise struct{ *capnp.Pipeline }

func (p TransactionResult_Promise) Struct() (TransactionResult, error) {
	s, err := p.Pipeline.Struct()
	return TransactionResult{s}, err
}

type AccountResult struct{ capnp.Struct }

// AccountResult_TypeID is the unique identifier for the type AccountResult.
const AccountResult_TypeID = 0xa3bd4ddc3e0a5017

func NewAccountResult(s *capnp.Segment) (AccountResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AccountResult{st}, err
}

func NewRootAccountResult(s *capnp.Segment) (AccountResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AccountResult{st}, err
}

func ReadRootAccountResult(msg *capnp.Message) (AccountResult, error) {
	root, err := msg.RootPtr()
	return AccountResult{root.Struct()}, err
}

func (s AccountResult) String() string {
	str, _ := text.Marshal(0xa3bd4ddc3e0a5017, s.Struct)
	return str
}

func (s AccountResult) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s AccountResult) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AccountResult) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// AccountResult_List is a list of AccountResult.
type AccountResult_List struct{ capnp.List }

// NewAccountResult creates a new list of AccountResult.
func NewAccountResult_List(s *capnp.Segment, sz int32) (AccountResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return AccountResult_List{l}, err
}

func (s AccountResult_List) At(i int) AccountResult { return AccountResult{s.List.Struct(i)} }

func (s AccountResult_List) Set(i int, v AccountResult) error { return s.List.SetStruct(i, v.Struct) }

func (s AccountResult_List) String() string {
	str, _ := text.MarshalList(0xa3bd4ddc3e0a5017, s.List)
	return str
}

// AccountResult_Promise is a wrapper for a AccountResult promised by a client call.
type AccountResult_Promise struct{ *capnp.Pipeline }

func (p AccountResult_Promise) Struct() (AccountResult, error) {
	s, err := p.Pipeline.Struct()
	return AccountResult{s}, err
}

type ValidatorResult struct{ capnp.Struct }

// ValidatorResult_TypeID is the unique identifier for the type ValidatorResult.
const ValidatorResult_TypeID = 0xec1c828dae8bffa3

func NewValidatorResult(s *capnp.Segment) (ValidatorResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ValidatorResult{st}, err
}

func NewRootValidatorResult(s *capnp.Segment) (ValidatorResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ValidatorResult{st}, err
}

func ReadRootValidatorResult(msg *capnp.Message) (ValidatorResult, error) {
	root, err := msg.RootPtr()
	return ValidatorResult{root.Struct()}, err
}

func (s ValidatorResult) String() string {
	str, _ := text.Marshal(0xec1c828dae8bffa3, s.Struct)
	return str
}

func (s ValidatorResult) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ValidatorResult) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ValidatorResult) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// ValidatorResult_List is a list of ValidatorResult.
type ValidatorResult_List struct{ capnp.List }

// NewValidatorResult creates a new list of ValidatorResult.
func NewValidatorResult_List(s *capnp.Segment, sz int32) (ValidatorResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ValidatorResult_List{l}, err
}

func (s ValidatorResult_List) At(i int) ValidatorResult { return ValidatorResult{s.List.Struct(i)} }

func (s ValidatorResult_List) Set(i int, v ValidatorResult) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ValidatorResult_List) String() string {
	str, _ := text.MarshalList(0xec1c828dae8bffa3, s.List)
	return str
}

// ValidatorResult_Promise is a wrapper for a ValidatorResult promised by a client call.
type ValidatorResult_Promise struct{ *capnp.Pipeline }

func (p ValidatorResult_Promise) Struct() (ValidatorResult, error) {
	s, err := p.Pipeline.Struct()
	return ValidatorResult{s}, err
}

type Peer struct{ capnp.Struct }

// Peer_TypeID is the unique identifier for the type Peer.
const Peer_TypeID = 0xdeb9cfe7754f053f

func NewPeer(s *capnp.Segment) (Peer, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 4})
	return Peer{st}, err
}

func NewRootPeer(s *capnp.Segment) (Peer, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 4})
	return Peer{st}, err
}

func ReadRootPeer(msg *capnp.Message) (Peer, error) {
	root, err := msg.RootPtr()
	return Peer{root.Struct()}, err
}

func (s Peer) String() string {
	str, _ := text.Marshal(0xdeb9cfe7754f053f, s.Struct)
	return str
}

func (s Peer) Moniker() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Peer) HasMoniker() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Peer) MonikerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Peer) SetMoniker(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Peer) NodeVersion() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Peer) HasNodeVersion() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Peer) SetNodeVersion(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s Peer) PeerID() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Peer) HasPeerID() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Peer) PeerIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Peer) SetPeerID(v string) error {
	return s.Struct.SetText(2, v)
}

func (s Peer) PublicKey() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s Peer) HasPublicKey() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Peer) PublicKeyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s Peer) SetPublicKey(v string) error {
	return s.Struct.SetText(3, v)
}

func (s Peer) InitialBlockDownload() bool {
	return s.Struct.Bit(0)
}

func (s Peer) SetInitialBlockDownload(v bool) {
	s.Struct.SetBit(0, v)
}

func (s Peer) Height() int32 {
	return int32(s.Struct.Uint32(4))
}

func (s Peer) SetHeight(v int32) {
	s.Struct.SetUint32(4, uint32(v))
}

func (s Peer) ReceivedMessages() int32 {
	return int32(s.Struct.Uint32(8))
}

func (s Peer) SetReceivedMessages(v int32) {
	s.Struct.SetUint32(8, uint32(v))
}

func (s Peer) InvalidMessages() int32 {
	return int32(s.Struct.Uint32(12))
}

func (s Peer) SetInvalidMessages(v int32) {
	s.Struct.SetUint32(12, uint32(v))
}

func (s Peer) ReceivedBytes() int32 {
	return int32(s.Struct.Uint32(16))
}

func (s Peer) SetReceivedBytes(v int32) {
	s.Struct.SetUint32(16, uint32(v))
}

// Peer_List is a list of Peer.
type Peer_List struct{ capnp.List }

// NewPeer creates a new list of Peer.
func NewPeer_List(s *capnp.Segment, sz int32) (Peer_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 4}, sz)
	return Peer_List{l}, err
}

func (s Peer_List) At(i int) Peer { return Peer{s.List.Struct(i)} }

func (s Peer_List) Set(i int, v Peer) error { return s.List.SetStruct(i, v.Struct) }

func (s Peer_List) String() string {
	str, _ := text.MarshalList(0xdeb9cfe7754f053f, s.List)
	return str
}

// Peer_Promise is a wrapper for a Peer promised by a client call.
type Peer_Promise struct{ *capnp.Pipeline }

func (p Peer_Promise) Struct() (Peer, error) {
	s, err := p.Pipeline.Struct()
	return Peer{s}, err
}

type NetworkResult struct{ capnp.Struct }

// NetworkResult_TypeID is the unique identifier for the type NetworkResult.
const NetworkResult_TypeID = 0xefbaa00121a2907b

func NewNetworkResult(s *capnp.Segment) (NetworkResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return NetworkResult{st}, err
}

func NewRootNetworkResult(s *capnp.Segment) (NetworkResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return NetworkResult{st}, err
}

func ReadRootNetworkResult(msg *capnp.Message) (NetworkResult, error) {
	root, err := msg.RootPtr()
	return NetworkResult{root.Struct()}, err
}

func (s NetworkResult) String() string {
	str, _ := text.Marshal(0xefbaa00121a2907b, s.Struct)
	return str
}

func (s NetworkResult) PeerID() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s NetworkResult) HasPeerID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s NetworkResult) PeerIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s NetworkResult) SetPeerID(v string) error {
	return s.Struct.SetText(0, v)
}

func (s NetworkResult) Peers() (Peer_List, error) {
	p, err := s.Struct.Ptr(1)
	return Peer_List{List: p.List()}, err
}

func (s NetworkResult) HasPeers() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s NetworkResult) SetPeers(v Peer_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewPeers sets the peers field to a newly
// allocated Peer_List, preferring placement in s's segment.
func (s NetworkResult) NewPeers(n int32) (Peer_List, error) {
	l, err := NewPeer_List(s.Struct.Segment(), n)
	if err != nil {
		return Peer_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// NetworkResult_List is a list of NetworkResult.
type NetworkResult_List struct{ capnp.List }

// NewNetworkResult creates a new list of NetworkResult.
func NewNetworkResult_List(s *capnp.Segment, sz int32) (NetworkResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return NetworkResult_List{l}, err
}

func (s NetworkResult_List) At(i int) NetworkResult { return NetworkResult{s.List.Struct(i)} }

func (s NetworkResult_List) Set(i int, v NetworkResult) error { return s.List.SetStruct(i, v.Struct) }

func (s NetworkResult_List) String() string {
	str, _ := text.MarshalList(0xefbaa00121a2907b, s.List)
	return str
}

// NetworkResult_Promise is a wrapper for a NetworkResult promised by a client call.
type NetworkResult_Promise struct{ *capnp.Pipeline }

func (p NetworkResult_Promise) Struct() (NetworkResult, error) {
	s, err := p.Pipeline.Struct()
	return NetworkResult{s}, err
}

type SendTransactionResult struct{ capnp.Struct }

// SendTransactionResult_TypeID is the unique identifier for the type SendTransactionResult.
const SendTransactionResult_TypeID = 0xcfd704b9b2c62a4a

func NewSendTransactionResult(s *capnp.Segment) (SendTransactionResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SendTransactionResult{st}, err
}

func NewRootSendTransactionResult(s *capnp.Segment) (SendTransactionResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SendTransactionResult{st}, err
}

func ReadRootSendTransactionResult(msg *capnp.Message) (SendTransactionResult, error) {
	root, err := msg.RootPtr()
	return SendTransactionResult{root.Struct()}, err
}

func (s SendTransactionResult) String() string {
	str, _ := text.Marshal(0xcfd704b9b2c62a4a, s.Struct)
	return str
}

func (s SendTransactionResult) Status() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s SendTransactionResult) SetStatus(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s SendTransactionResult) Id() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s SendTransactionResult) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SendTransactionResult) SetId(v []byte) error {
	return s.Struct.SetData(0, v)
}

// SendTransactionResult_List is a list of SendTransactionResult.
type SendTransactionResult_List struct{ capnp.List }

// NewSendTransactionResult creates a new list of SendTransactionResult.
func NewSendTransactionResult_List(s *capnp.Segment, sz int32) (SendTransactionResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return SendTransactionResult_List{l}, err
}

func (s SendTransactionResult_List) At(i int) SendTransactionResult {
	return SendTransactionResult{s.List.Struct(i)}
}

func (s SendTransactionResult_List) Set(i int, v SendTransactionResult) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SendTransactionResult_List) String() string {
	str, _ := text.MarshalList(0xcfd704b9b2c62a4a, s.List)
	return str
}

// SendTransactionResult_Promise is a wrapper for a SendTransactionResult promised by a client call.
type SendTransactionResult_Promise struct{ *capnp.Pipeline }

func (p SendTransactionResult_Promise) Struct() (SendTransactionResult, error) {
	s, err := p.Pipeline.Struct()
	return SendTransactionResult{s}, err
}

type ZarbServer struct{ Client capnp.Client }

// ZarbServer_TypeID is the unique identifier for the type ZarbServer.
const ZarbServer_TypeID = 0xf906e2ae0dd37fe4

func (c ZarbServer) GetBlock(ctx context.Context, params func(ZarbServer_getBlock_Params) error, opts ...capnp.CallOption) ZarbServer_getBlock_Results_Promise {
	if c.Client == nil {
		return ZarbServer_getBlock_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      0,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getBlock",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 16, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_getBlock_Params{Struct: s}) }
	}
	return ZarbServer_getBlock_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) GetBlockHeight(ctx context.Context, params func(ZarbServer_getBlockHeight_Params) error, opts ...capnp.CallOption) ZarbServer_getBlockHeight_Results_Promise {
	if c.Client == nil {
		return ZarbServer_getBlockHeight_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      1,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getBlockHeight",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_getBlockHeight_Params{Struct: s}) }
	}
	return ZarbServer_getBlockHeight_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) GetTransaction(ctx context.Context, params func(ZarbServer_getTransaction_Params) error, opts ...capnp.CallOption) ZarbServer_getTransaction_Results_Promise {
	if c.Client == nil {
		return ZarbServer_getTransaction_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      2,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getTransaction",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_getTransaction_Params{Struct: s}) }
	}
	return ZarbServer_getTransaction_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) GetAccount(ctx context.Context, params func(ZarbServer_getAccount_Params) error, opts ...capnp.CallOption) ZarbServer_getAccount_Results_Promise {
	if c.Client == nil {
		return ZarbServer_getAccount_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      3,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getAccount",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_getAccount_Params{Struct: s}) }
	}
	return ZarbServer_getAccount_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) GetValidator(ctx context.Context, params func(ZarbServer_getValidator_Params) error, opts ...capnp.CallOption) ZarbServer_getValidator_Results_Promise {
	if c.Client == nil {
		return ZarbServer_getValidator_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      4,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getValidator",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_getValidator_Params{Struct: s}) }
	}
	return ZarbServer_getValidator_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) GetBlockchainInfo(ctx context.Context, params func(ZarbServer_getBlockchainInfo_Params) error, opts ...capnp.CallOption) ZarbServer_getBlockchainInfo_Results_Promise {
	if c.Client == nil {
		return ZarbServer_getBlockchainInfo_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      5,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getBlockchainInfo",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_getBlockchainInfo_Params{Struct: s}) }
	}
	return ZarbServer_getBlockchainInfo_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) GetNetworkInfo(ctx context.Context, params func(ZarbServer_getNetworkInfo_Params) error, opts ...capnp.CallOption) ZarbServer_getNetworkInfo_Results_Promise {
	if c.Client == nil {
		return ZarbServer_getNetworkInfo_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      6,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getNetworkInfo",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_getNetworkInfo_Params{Struct: s}) }
	}
	return ZarbServer_getNetworkInfo_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) SendRawTransaction(ctx context.Context, params func(ZarbServer_sendRawTransaction_Params) error, opts ...capnp.CallOption) ZarbServer_sendRawTransaction_Results_Promise {
	if c.Client == nil {
		return ZarbServer_sendRawTransaction_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      7,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "sendRawTransaction",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_sendRawTransaction_Params{Struct: s}) }
	}
	return ZarbServer_sendRawTransaction_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type ZarbServer_Server interface {
	GetBlock(ZarbServer_getBlock) error

	GetBlockHeight(ZarbServer_getBlockHeight) error

	GetTransaction(ZarbServer_getTransaction) error

	GetAccount(ZarbServer_getAccount) error

	GetValidator(ZarbServer_getValidator) error

	GetBlockchainInfo(ZarbServer_getBlockchainInfo) error

	GetNetworkInfo(ZarbServer_getNetworkInfo) error

	SendRawTransaction(ZarbServer_sendRawTransaction) error
}

func ZarbServer_ServerToClient(s ZarbServer_Server) ZarbServer {
	c, _ := s.(server.Closer)
	return ZarbServer{Client: server.New(ZarbServer_Methods(nil, s), c)}
}

func ZarbServer_Methods(methods []server.Method, s ZarbServer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 8)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      0,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getBlock",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_getBlock{c, opts, ZarbServer_getBlock_Params{Struct: p}, ZarbServer_getBlock_Results{Struct: r}}
			return s.GetBlock(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      1,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getBlockHeight",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_getBlockHeight{c, opts, ZarbServer_getBlockHeight_Params{Struct: p}, ZarbServer_getBlockHeight_Results{Struct: r}}
			return s.GetBlockHeight(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      2,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getTransaction",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_getTransaction{c, opts, ZarbServer_getTransaction_Params{Struct: p}, ZarbServer_getTransaction_Results{Struct: r}}
			return s.GetTransaction(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      3,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getAccount",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_getAccount{c, opts, ZarbServer_getAccount_Params{Struct: p}, ZarbServer_getAccount_Results{Struct: r}}
			return s.GetAccount(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      4,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getValidator",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_getValidator{c, opts, ZarbServer_getValidator_Params{Struct: p}, ZarbServer_getValidator_Results{Struct: r}}
			return s.GetValidator(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      5,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getBlockchainInfo",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_getBlockchainInfo{c, opts, ZarbServer_getBlockchainInfo_Params{Struct: p}, ZarbServer_getBlockchainInfo_Results{Struct: r}}
			return s.GetBlockchainInfo(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      6,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getNetworkInfo",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_getNetworkInfo{c, opts, ZarbServer_getNetworkInfo_Params{Struct: p}, ZarbServer_getNetworkInfo_Results{Struct: r}}
			return s.GetNetworkInfo(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      7,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "sendRawTransaction",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_sendRawTransaction{c, opts, ZarbServer_sendRawTransaction_Params{Struct: p}, ZarbServer_sendRawTransaction_Results{Struct: r}}
			return s.SendRawTransaction(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// ZarbServer_getBlock holds the arguments for a server call to ZarbServer.getBlock.
type ZarbServer_getBlock struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_getBlock_Params
	Results ZarbServer_getBlock_Results
}

// ZarbServer_getBlockHeight holds the arguments for a server call to ZarbServer.getBlockHeight.
type ZarbServer_getBlockHeight struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_getBlockHeight_Params
	Results ZarbServer_getBlockHeight_Results
}

// ZarbServer_getTransaction holds the arguments for a server call to ZarbServer.getTransaction.
type ZarbServer_getTransaction struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_getTransaction_Params
	Results ZarbServer_getTransaction_Results
}

// ZarbServer_getAccount holds the arguments for a server call to ZarbServer.getAccount.
type ZarbServer_getAccount struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_getAccount_Params
	Results ZarbServer_getAccount_Results
}

// ZarbServer_getValidator holds the arguments for a server call to ZarbServer.getValidator.
type ZarbServer_getValidator struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_getValidator_Params
	Results ZarbServer_getValidator_Results
}

// ZarbServer_getBlockchainInfo holds the arguments for a server call to ZarbServer.getBlockchainInfo.
type ZarbServer_getBlockchainInfo struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_getBlockchainInfo_Params
	Results ZarbServer_getBlockchainInfo_Results
}

// ZarbServer_getNetworkInfo holds the arguments for a server call to ZarbServer.getNetworkInfo.
type ZarbServer_getNetworkInfo struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_getNetworkInfo_Params
	Results ZarbServer_getNetworkInfo_Results
}

// ZarbServer_sendRawTransaction holds the arguments for a server call to ZarbServer.sendRawTransaction.
type ZarbServer_sendRawTransaction struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_sendRawTransaction_Params
	Results ZarbServer_sendRawTransaction_Results
}

type ZarbServer_getBlock_Params struct{ capnp.Struct }

// ZarbServer_getBlock_Params_TypeID is the unique identifier for the type ZarbServer_getBlock_Params.
const ZarbServer_getBlock_Params_TypeID = 0x8df1c729f8d2ca00

func NewZarbServer_getBlock_Params(s *capnp.Segment) (ZarbServer_getBlock_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ZarbServer_getBlock_Params{st}, err
}

func NewRootZarbServer_getBlock_Params(s *capnp.Segment) (ZarbServer_getBlock_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ZarbServer_getBlock_Params{st}, err
}

func ReadRootZarbServer_getBlock_Params(msg *capnp.Message) (ZarbServer_getBlock_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getBlock_Params{root.Struct()}, err
}

func (s ZarbServer_getBlock_Params) String() string {
	str, _ := text.Marshal(0x8df1c729f8d2ca00, s.Struct)
	return str
}

func (s ZarbServer_getBlock_Params) Height() uint64 {
	return s.Struct.Uint64(0)
}

func (s ZarbServer_getBlock_Params) SetHeight(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s ZarbServer_getBlock_Params) Verbosity() int32 {
	return int32(s.Struct.Uint32(8))
}

func (s ZarbServer_getBlock_Params) SetVerbosity(v int32) {
	s.Struct.SetUint32(8, uint32(v))
}

// ZarbServer_getBlock_Params_List is a list of ZarbServer_getBlock_Params.
type ZarbServer_getBlock_Params_List struct{ capnp.List }

// NewZarbServer_getBlock_Params creates a new list of ZarbServer_getBlock_Params.
func NewZarbServer_getBlock_Params_List(s *capnp.Segment, sz int32) (ZarbServer_getBlock_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return ZarbServer_getBlock_Params_List{l}, err
}

func (s ZarbServer_getBlock_Params_List) At(i int) ZarbServer_getBlock_Params {
	return ZarbServer_getBlock_Params{s.List.Struct(i)}
}

func (s ZarbServer_getBlock_Params_List) Set(i int, v ZarbServer_getBlock_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getBlock_Params_List) String() string {
	str, _ := text.MarshalList(0x8df1c729f8d2ca00, s.List)
	return str
}

// ZarbServer_getBlock_Params_Promise is a wrapper for a ZarbServer_getBlock_Params promised by a client call.
type ZarbServer_getBlock_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getBlock_Params_Promise) Struct() (ZarbServer_getBlock_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getBlock_Params{s}, err
}

type ZarbServer_getBlock_Results struct{ capnp.Struct }

// ZarbServer_getBlock_Results_TypeID is the unique identifier for the type ZarbServer_getBlock_Results.
const ZarbServer_getBlock_Results_TypeID = 0xf5e8509c82a71e1c

func NewZarbServer_getBlock_Results(s *capnp.Segment) (ZarbServer_getBlock_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getBlock_Results{st}, err
}

func NewRootZarbServer_getBlock_Results(s *capnp.Segment) (ZarbServer_getBlock_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getBlock_Results{st}, err
}

func ReadRootZarbServer_getBlock_Results(msg *capnp.Message) (ZarbServer_getBlock_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getBlock_Results{root.Struct()}, err
}

func (s ZarbServer_getBlock_Results) String() string {
	str, _ := text.Marshal(0xf5e8509c82a71e1c, s.Struct)
	return str
}

func (s ZarbServer_getBlock_Results) Result() (BlockResult, error) {
	p, err := s.Struct.Ptr(0)
	return BlockResult{Struct: p.Struct()}, err
}

func (s ZarbServer_getBlock_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getBlock_Results) SetResult(v BlockResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated BlockResult struct, preferring placement in s's segment.
func (s ZarbServer_getBlock_Results) NewResult() (BlockResult, error) {
	ss, err := NewBlockResult(s.Struct.Segment())
	if err != nil {
		return BlockResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_getBlock_Results_List is a list of ZarbServer_getBlock_Results.
type ZarbServer_getBlock_Results_List struct{ capnp.List }

// NewZarbServer_getBlock_Results creates a new list of ZarbServer_getBlock_Results.
func NewZarbServer_getBlock_Results_List(s *capnp.Segment, sz int32) (ZarbServer_getBlock_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_getBlock_Results_List{l}, err
}

func (s ZarbServer_getBlock_Results_List) At(i int) ZarbServer_getBlock_Results {
	return ZarbServer_getBlock_Results{s.List.Struct(i)}
}

func (s ZarbServer_getBlock_Results_List) Set(i int, v ZarbServer_getBlock_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getBlock_Results_List) String() string {
	str, _ := text.MarshalList(0xf5e8509c82a71e1c, s.List)
	return str
}

// ZarbServer_getBlock_Results_Promise is a wrapper for a ZarbServer_getBlock_Results promised by a client call.
type ZarbServer_getBlock_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getBlock_Results_Promise) Struct() (ZarbServer_getBlock_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getBlock_Results{s}, err
}

func (p ZarbServer_getBlock_Results_Promise) Result() BlockResult_Promise {
	return BlockResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ZarbServer_getBlockHeight_Params struct{ capnp.Struct }

// ZarbServer_getBlockHeight_Params_TypeID is the unique identifier for the type ZarbServer_getBlockHeight_Params.
const ZarbServer_getBlockHeight_Params_TypeID = 0x85252b1ec1c352d2

func NewZarbServer_getBlockHeight_Params(s *capnp.Segment) (ZarbServer_getBlockHeight_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getBlockHeight_Params{st}, err
}

func NewRootZarbServer_getBlockHeight_Params(s *capnp.Segment) (ZarbServer_getBlockHeight_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getBlockHeight_Params{st}, err
}

func ReadRootZarbServer_getBlockHeight_Params(msg *capnp.Message) (ZarbServer_getBlockHeight_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getBlockHeight_Params{root.Struct()}, err
}

func (s ZarbServer_getBlockHeight_Params) String() string {
	str, _ := text.Marshal(0x85252b1ec1c352d2, s.Struct)
	return str
}

func (s ZarbServer_getBlockHeight_Params) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ZarbServer_getBlockHeight_Params) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getBlockHeight_Params) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

// ZarbServer_getBlockHeight_Params_List is a list of ZarbServer_getBlockHeight_Params.
type ZarbServer_getBlockHeight_Params_List struct{ capnp.List }

// NewZarbServer_getBlockHeight_Params creates a new list of ZarbServer_getBlockHeight_Params.
func NewZarbServer_getBlockHeight_Params_List(s *capnp.Segment, sz int32) (ZarbServer_getBlockHeight_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_getBlockHeight_Params_List{l}, err
}

func (s ZarbServer_getBlockHeight_Params_List) At(i int) ZarbServer_getBlockHeight_Params {
	return ZarbServer_getBlockHeight_Params{s.List.Struct(i)}
}

func (s ZarbServer_getBlockHeight_Params_List) Set(i int, v ZarbServer_getBlockHeight_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getBlockHeight_Params_List) String() string {
	str, _ := text.MarshalList(0x85252b1ec1c352d2, s.List)
	return str
}

// ZarbServer_getBlockHeight_Params_Promise is a wrapper for a ZarbServer_getBlockHeight_Params promised by a client call.
type ZarbServer_getBlockHeight_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getBlockHeight_Params_Promise) Struct() (ZarbServer_getBlockHeight_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getBlockHeight_Params{s}, err
}

type ZarbServer_getBlockHeight_Results struct{ capnp.Struct }

// ZarbServer_getBlockHeight_Results_TypeID is the unique identifier for the type ZarbServer_getBlockHeight_Results.
const ZarbServer_getBlockHeight_Results_TypeID = 0x946b1f715eac1308

func NewZarbServer_getBlockHeight_Results(s *capnp.Segment) (ZarbServer_getBlockHeight_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ZarbServer_getBlockHeight_Results{st}, err
}

func NewRootZarbServer_getBlockHeight_Results(s *capnp.Segment) (ZarbServer_getBlockHeight_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ZarbServer_getBlockHeight_Results{st}, err
}

func ReadRootZarbServer_getBlockHeight_Results(msg *capnp.Message) (ZarbServer_getBlockHeight_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getBlockHeight_Results{root.Struct()}, err
}

func (s ZarbServer_getBlockHeight_Results) String() string {
	str, _ := text.Marshal(0x946b1f715eac1308, s.Struct)
	return str
}

func (s ZarbServer_getBlockHeight_Results) Result() uint64 {
	return s.Struct.Uint64(0)
}

func (s ZarbServer_getBlockHeight_Results) SetResult(v uint64) {
	s.Struct.SetUint64(0, v)
}

// ZarbServer_getBlockHeight_Results_List is a list of ZarbServer_getBlockHeight_Results.
type ZarbServer_getBlockHeight_Results_List struct{ capnp.List }

// NewZarbServer_getBlockHeight_Results creates a new list of ZarbServer_getBlockHeight_Results.
func NewZarbServer_getBlockHeight_Results_List(s *capnp.Segment, sz int32) (ZarbServer_getBlockHeight_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return ZarbServer_getBlockHeight_Results_List{l}, err
}

func (s ZarbServer_getBlockHeight_Results_List) At(i int) ZarbServer_getBlockHeight_Results {
	return ZarbServer_getBlockHeight_Results{s.List.Struct(i)}
}

func (s ZarbServer_getBlockHeight_Results_List) Set(i int, v ZarbServer_getBlockHeight_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getBlockHeight_Results_List) String() string {
	str, _ := text.MarshalList(0x946b1f715eac1308, s.List)
	return str
}

// ZarbServer_getBlockHeight_Results_Promise is a wrapper for a ZarbServer_getBlockHeight_Results promised by a client call.
type ZarbServer_getBlockHeight_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getBlockHeight_Results_Promise) Struct() (ZarbServer_getBlockHeight_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getBlockHeight_Results{s}, err
}

type ZarbServer_getTransaction_Params struct{ capnp.Struct }

// ZarbServer_getTransaction_Params_TypeID is the unique identifier for the type ZarbServer_getTransaction_Params.
const ZarbServer_getTransaction_Params_TypeID = 0xd3df8a6125925ab9

func NewZarbServer_getTransaction_Params(s *capnp.Segment) (ZarbServer_getTransaction_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZarbServer_getTransaction_Params{st}, err
}

func NewRootZarbServer_getTransaction_Params(s *capnp.Segment) (ZarbServer_getTransaction_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZarbServer_getTransaction_Params{st}, err
}

func ReadRootZarbServer_getTransaction_Params(msg *capnp.Message) (ZarbServer_getTransaction_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getTransaction_Params{root.Struct()}, err
}

func (s ZarbServer_getTransaction_Params) String() string {
	str, _ := text.Marshal(0xd3df8a6125925ab9, s.Struct)
	return str
}

func (s ZarbServer_getTransaction_Params) Id() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ZarbServer_getTransaction_Params) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getTransaction_Params) SetId(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s ZarbServer_getTransaction_Params) Verbosity() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s ZarbServer_getTransaction_Params) SetVerbosity(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// ZarbServer_getTransaction_Params_List is a list of ZarbServer_getTransaction_Params.
type ZarbServer_getTransaction_Params_List struct{ capnp.List }

// NewZarbServer_getTransaction_Params creates a new list of ZarbServer_getTransaction_Params.
func NewZarbServer_getTransaction_Params_List(s *capnp.Segment, sz int32) (ZarbServer_getTransaction_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ZarbServer_getTransaction_Params_List{l}, err
}

func (s ZarbServer_getTransaction_Params_List) At(i int) ZarbServer_getTransaction_Params {
	return ZarbServer_getTransaction_Params{s.List.Struct(i)}
}

func (s ZarbServer_getTransaction_Params_List) Set(i int, v ZarbServer_getTransaction_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getTransaction_Params_List) String() string {
	str, _ := text.MarshalList(0xd3df8a6125925ab9, s.List)
	return str
}

// ZarbServer_getTransaction_Params_Promise is a wrapper for a ZarbServer_getTransaction_Params promised by a client call.
type ZarbServer_getTransaction_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getTransaction_Params_Promise) Struct() (ZarbServer_getTransaction_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getTransaction_Params{s}, err
}

type ZarbServer_getTransaction_Results struct{ capnp.Struct }

// ZarbServer_getTransaction_Results_TypeID is the unique identifier for the type ZarbServer_getTransaction_Results.
const ZarbServer_getTransaction_Results_TypeID = 0xa2b1016cefab775b

func NewZarbServer_getTransaction_Results(s *capnp.Segment) (ZarbServer_getTransaction_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getTransaction_Results{st}, err
}

func NewRootZarbServer_getTransaction_Results(s *capnp.Segment) (ZarbServer_getTransaction_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getTransaction_Results{st}, err
}

func ReadRootZarbServer_getTransaction_Results(msg *capnp.Message) (ZarbServer_getTransaction_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getTransaction_Results{root.Struct()}, err
}

func (s ZarbServer_getTransaction_Results) String() string {
	str, _ := text.Marshal(0xa2b1016cefab775b, s.Struct)
	return str
}

func (s ZarbServer_getTransaction_Results) Result() (TransactionResult, error) {
	p, err := s.Struct.Ptr(0)
	return TransactionResult{Struct: p.Struct()}, err
}

func (s ZarbServer_getTransaction_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getTransaction_Results) SetResult(v TransactionResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated TransactionResult struct, preferring placement in s's segment.
func (s ZarbServer_getTransaction_Results) NewResult() (TransactionResult, error) {
	ss, err := NewTransactionResult(s.Struct.Segment())
	if err != nil {
		return TransactionResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_getTransaction_Results_List is a list of ZarbServer_getTransaction_Results.
type ZarbServer_getTransaction_Results_List struct{ capnp.List }

// NewZarbServer_getTransaction_Results creates a new list of ZarbServer_getTransaction_Results.
func NewZarbServer_getTransaction_Results_List(s *capnp.Segment, sz int32) (ZarbServer_getTransaction_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_getTransaction_Results_List{l}, err
}

func (s ZarbServer_getTransaction_Results_List) At(i int) ZarbServer_getTransaction_Results {
	return ZarbServer_getTransaction_Results{s.List.Struct(i)}
}

func (s ZarbServer_getTransaction_Results_List) Set(i int, v ZarbServer_getTransaction_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getTransaction_Results_List) String() string {
	str, _ := text.MarshalList(0xa2b1016cefab775b, s.List)
	return str
}

// ZarbServer_getTransaction_Results_Promise is a wrapper for a ZarbServer_getTransaction_Results promised by a client call.
type ZarbServer_getTransaction_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getTransaction_Results_Promise) Struct() (ZarbServer_getTransaction_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getTransaction_Results{s}, err
}

func (p ZarbServer_getTransaction_Results_Promise) Result() TransactionResult_Promise {
	return TransactionResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ZarbServer_getAccount_Params struct{ capnp.Struct }

// ZarbServer_getAccount_Params_TypeID is the unique identifier for the type ZarbServer_getAccount_Params.
const ZarbServer_getAccount_Params_TypeID = 0xcd6c734787642800

func NewZarbServer_getAccount_Params(s *capnp.Segment) (ZarbServer_getAccount_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZarbServer_getAccount_Params{st}, err
}

func NewRootZarbServer_getAccount_Params(s *capnp.Segment) (ZarbServer_getAccount_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZarbServer_getAccount_Params{st}, err
}

func ReadRootZarbServer_getAccount_Params(msg *capnp.Message) (ZarbServer_getAccount_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getAccount_Params{root.Struct()}, err
}

func (s ZarbServer_getAccount_Params) String() string {
	str, _ := text.Marshal(0xcd6c734787642800, s.Struct)
	return str
}

func (s ZarbServer_getAccount_Params) Address() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ZarbServer_getAccount_Params) HasAddress() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getAccount_Params) SetAddress(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s ZarbServer_getAccount_Params) Verbosity() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s ZarbServer_getAccount_Params) SetVerbosity(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// ZarbServer_getAccount_Params_List is a list of ZarbServer_getAccount_Params.
type ZarbServer_getAccount_Params_List struct{ capnp.List }

// NewZarbServer_getAccount_Params creates a new list of ZarbServer_getAccount_Params.
func NewZarbServer_getAccount_Params_List(s *capnp.Segment, sz int32) (ZarbServer_getAccount_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ZarbServer_getAccount_Params_List{l}, err
}

func (s ZarbServer_getAccount_Params_List) At(i int) ZarbServer_getAccount_Params {
	return ZarbServer_getAccount_Params{s.List.Struct(i)}
}

func (s ZarbServer_getAccount_Params_List) Set(i int, v ZarbServer_getAccount_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getAccount_Params_List) String() string {
	str, _ := text.MarshalList(0xcd6c734787642800, s.List)
	return str
}

// ZarbServer_getAccount_Params_Promise is a wrapper for a ZarbServer_getAccount_Params promised by a client call.
type ZarbServer_getAccount_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getAccount_Params_Promise) Struct() (ZarbServer_getAccount_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getAccount_Params{s}, err
}

type ZarbServer_getAccount_Results struct{ capnp.Struct }

// ZarbServer_getAccount_Results_TypeID is the unique identifier for the type ZarbServer_getAccount_Results.
const ZarbServer_getAccount_Results_TypeID = 0x8e979661cc6a1161

func NewZarbServer_getAccount_Results(s *capnp.Segment) (ZarbServer_getAccount_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getAccount_Results{st}, err
}

func NewRootZarbServer_getAccount_Results(s *capnp.Segment) (ZarbServer_getAccount_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getAccount_Results{st}, err
}

func ReadRootZarbServer_getAccount_Results(msg *capnp.Message) (ZarbServer_getAccount_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getAccount_Results{root.Struct()}, err
}

func (s ZarbServer_getAccount_Results) String() string {
	str, _ := text.Marshal(0x8e979661cc6a1161, s.Struct)
	return str
}

func (s ZarbServer_getAccount_Results) Result() (AccountResult, error) {
	p, err := s.Struct.Ptr(0)
	return AccountResult{Struct: p.Struct()}, err
}

func (s ZarbServer_getAccount_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getAccount_Results) SetResult(v AccountResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated AccountResult struct, preferring placement in s's segment.
func (s ZarbServer_getAccount_Results) NewResult() (AccountResult, error) {
	ss, err := NewAccountResult(s.Struct.Segment())
	if err != nil {
		return AccountResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_getAccount_Results_List is a list of ZarbServer_getAccount_Results.
type ZarbServer_getAccount_Results_List struct{ capnp.List }

// NewZarbServer_getAccount_Results creates a new list of ZarbServer_getAccount_Results.
func NewZarbServer_getAccount_Results_List(s *capnp.Segment, sz int32) (ZarbServer_getAccount_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_getAccount_Results_List{l}, err
}

func (s ZarbServer_getAccount_Results_List) At(i int) ZarbServer_getAccount_Results {
	return ZarbServer_getAccount_Results{s.List.Struct(i)}
}

func (s ZarbServer_getAccount_Results_List) Set(i int, v ZarbServer_getAccount_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getAccount_Results_List) String() string {
	str, _ := text.MarshalList(0x8e979661cc6a1161, s.List)
	return str
}

// ZarbServer_getAccount_Results_Promise is a wrapper for a ZarbServer_getAccount_Results promised by a client call.
type ZarbServer_getAccount_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getAccount_Results_Promise) Struct() (ZarbServer_getAccount_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getAccount_Results{s}, err
}

func (p ZarbServer_getAccount_Results_Promise) Result() AccountResult_Promise {
	return AccountResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ZarbServer_getValidator_Params struct{ capnp.Struct }

// ZarbServer_getValidator_Params_TypeID is the unique identifier for the type ZarbServer_getValidator_Params.
const ZarbServer_getValidator_Params_TypeID = 0xeed94cf76be61d8e

func NewZarbServer_getValidator_Params(s *capnp.Segment) (ZarbServer_getValidator_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZarbServer_getValidator_Params{st}, err
}

func NewRootZarbServer_getValidator_Params(s *capnp.Segment) (ZarbServer_getValidator_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZarbServer_getValidator_Params{st}, err
}

func ReadRootZarbServer_getValidator_Params(msg *capnp.Message) (ZarbServer_getValidator_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getValidator_Params{root.Struct()}, err
}

func (s ZarbServer_getValidator_Params) String() string {
	str, _ := text.Marshal(0xeed94cf76be61d8e, s.Struct)
	return str
}

func (s ZarbServer_getValidator_Params) Address() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ZarbServer_getValidator_Params) HasAddress() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getValidator_Params) SetAddress(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s ZarbServer_getValidator_Params) Verbosity() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s ZarbServer_getValidator_Params) SetVerbosity(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// ZarbServer_getValidator_Params_List is a list of ZarbServer_getValidator_Params.
type ZarbServer_getValidator_Params_List struct{ capnp.List }

// NewZarbServer_getValidator_Params creates a new list of ZarbServer_getValidator_Params.
func NewZarbServer_getValidator_Params_List(s *capnp.Segment, sz int32) (ZarbServer_getValidator_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ZarbServer_getValidator_Params_List{l}, err
}

func (s ZarbServer_getValidator_Params_List) At(i int) ZarbServer_getValidator_Params {
	return ZarbServer_getValidator_Params{s.List.Struct(i)}
}

func (s ZarbServer_getValidator_Params_List) Set(i int, v ZarbServer_getValidator_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getValidator_Params_List) String() string {
	str, _ := text.MarshalList(0xeed94cf76be61d8e, s.List)
	return str
}

// ZarbServer_getValidator_Params_Promise is a wrapper for a ZarbServer_getValidator_Params promised by a client call.
type ZarbServer_getValidator_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getValidator_Params_Promise) Struct() (ZarbServer_getValidator_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getValidator_Params{s}, err
}

type ZarbServer_getValidator_Results struct{ capnp.Struct }

// ZarbServer_getValidator_Results_TypeID is the unique identifier for the type ZarbServer_getValidator_Results.
const ZarbServer_getValidator_Results_TypeID = 0xfb42d1f26b074c15

func NewZarbServer_getValidator_Results(s *capnp.Segment) (ZarbServer_getValidator_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getValidator_Results{st}, err
}

func NewRootZarbServer_getValidator_Results(s *capnp.Segment) (ZarbServer_getValidator_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getValidator_Results{st}, err
}

func ReadRootZarbServer_getValidator_Results(msg *capnp.Message) (ZarbServer_getValidator_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getValidator_Results{root.Struct()}, err
}

func (s ZarbServer_getValidator_Results) String() string {
	str, _ := text.Marshal(0xfb42d1f26b074c15, s.Struct)
	return str
}

func (s ZarbServer_getValidator_Results) Result() (ValidatorResult, error) {
	p, err := s.Struct.Ptr(0)
	return ValidatorResult{Struct: p.Struct()}, err
}

func (s ZarbServer_getValidator_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getValidator_Results) SetResult(v ValidatorResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated ValidatorResult struct, preferring placement in s's segment.
func (s ZarbServer_getValidator_Results) NewResult() (ValidatorResult, error) {
	ss, err := NewValidatorResult(s.Struct.Segment())
	if err != nil {
		return ValidatorResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_getValidator_Results_List is a list of ZarbServer_getValidator_Results.
type ZarbServer_getValidator_Results_List struct{ capnp.List }

// NewZarbServer_getValidator_Results creates a new list of ZarbServer_getValidator_Results.
func NewZarbServer_getValidator_Results_List(s *capnp.Segment, sz int32) (ZarbServer_getValidator_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_getValidator_Results_List{l}, err
}

func (s ZarbServer_getValidator_Results_List) At(i int) ZarbServer_getValidator_Results {
	return ZarbServer_getValidator_Results{s.List.Struct(i)}
}

func (s ZarbServer_getValidator_Results_List) Set(i int, v ZarbServer_getValidator_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getValidator_Results_List) String() string {
	str, _ := text.MarshalList(0xfb42d1f26b074c15, s.List)
	return str
}

// ZarbServer_getValidator_Results_Promise is a wrapper for a ZarbServer_getValidator_Results promised by a client call.
type ZarbServer_getValidator_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getValidator_Results_Promise) Struct() (ZarbServer_getValidator_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getValidator_Results{s}, err
}

func (p ZarbServer_getValidator_Results_Promise) Result() ValidatorResult_Promise {
	return ValidatorResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ZarbServer_getBlockchainInfo_Params struct{ capnp.Struct }

// ZarbServer_getBlockchainInfo_Params_TypeID is the unique identifier for the type ZarbServer_getBlockchainInfo_Params.
const ZarbServer_getBlockchainInfo_Params_TypeID = 0x8fb41d4bd35c5a30

func NewZarbServer_getBlockchainInfo_Params(s *capnp.Segment) (ZarbServer_getBlockchainInfo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ZarbServer_getBlockchainInfo_Params{st}, err
}

func NewRootZarbServer_getBlockchainInfo_Params(s *capnp.Segment) (ZarbServer_getBlockchainInfo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ZarbServer_getBlockchainInfo_Params{st}, err
}

func ReadRootZarbServer_getBlockchainInfo_Params(msg *capnp.Message) (ZarbServer_getBlockchainInfo_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getBlockchainInfo_Params{root.Struct()}, err
}

func (s ZarbServer_getBlockchainInfo_Params) String() string {
	str, _ := text.Marshal(0x8fb41d4bd35c5a30, s.Struct)
	return str
}

// ZarbServer_getBlockchainInfo_Params_List is a list of ZarbServer_getBlockchainInfo_Params.
type ZarbServer_getBlockchainInfo_Params_List struct{ capnp.List }

// NewZarbServer_getBlockchainInfo_Params creates a new list of ZarbServer_getBlockchainInfo_Params.
func NewZarbServer_getBlockchainInfo_Params_List(s *capnp.Segment, sz int32) (ZarbServer_getBlockchainInfo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return ZarbServer_getBlockchainInfo_Params_List{l}, err
}

func (s ZarbServer_getBlockchainInfo_Params_List) At(i int) ZarbServer_getBlockchainInfo_Params {
	return ZarbServer_getBlockchainInfo_Params{s.List.Struct(i)}
}

func (s ZarbServer_getBlockchainInfo_Params_List) Set(i int, v ZarbServer_getBlockchainInfo_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getBlockchainInfo_Params_List) String() string {
	str, _ := text.MarshalList(0x8fb41d4bd35c5a30, s.List)
	return str
}

// ZarbServer_getBlockchainInfo_Params_Promise is a wrapper for a ZarbServer_getBlockchainInfo_Params promised by a client call.
type ZarbServer_getBlockchainInfo_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getBlockchainInfo_Params_Promise) Struct() (ZarbServer_getBlockchainInfo_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getBlockchainInfo_Params{s}, err
}

type ZarbServer_getBlockchainInfo_Results struct{ capnp.Struct }

// ZarbServer_getBlockchainInfo_Results_TypeID is the unique identifier for the type ZarbServer_getBlockchainInfo_Results.
const ZarbServer_getBlockchainInfo_Results_TypeID = 0xa128fe760c2612c4

func NewZarbServer_getBlockchainInfo_Results(s *capnp.Segment) (ZarbServer_getBlockchainInfo_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getBlockchainInfo_Results{st}, err
}

func NewRootZarbServer_getBlockchainInfo_Results(s *capnp.Segment) (ZarbServer_getBlockchainInfo_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getBlockchainInfo_Results{st}, err
}

func ReadRootZarbServer_getBlockchainInfo_Results(msg *capnp.Message) (ZarbServer_getBlockchainInfo_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getBlockchainInfo_Results{root.Struct()}, err
}

func (s ZarbServer_getBlockchainInfo_Results) String() string {
	str, _ := text.Marshal(0xa128fe760c2612c4, s.Struct)
	return str
}

func (s ZarbServer_getBlockchainInfo_Results) Result() (BlockchainResult, error) {
	p, err := s.Struct.Ptr(0)
	return BlockchainResult{Struct: p.Struct()}, err
}

func (s ZarbServer_getBlockchainInfo_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getBlockchainInfo_Results) SetResult(v BlockchainResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated BlockchainResult struct, preferring placement in s's segment.
func (s ZarbServer_getBlockchainInfo_Results) NewResult() (BlockchainResult, error) {
	ss, err := NewBlockchainResult(s.Struct.Segment())
	if err != nil {
		return BlockchainResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_getBlockchainInfo_Results_List is a list of ZarbServer_getBlockchainInfo_Results.
type ZarbServer_getBlockchainInfo_Results_List struct{ capnp.List }

// NewZarbServer_getBlockchainInfo_Results creates a new list of ZarbServer_getBlockchainInfo_Results.
func NewZarbServer_getBlockchainInfo_Results_List(s *capnp.Segment, sz int32) (ZarbServer_getBlockchainInfo_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_getBlockchainInfo_Results_List{l}, err
}

func (s ZarbServer_getBlockchainInfo_Results_List) At(i int) ZarbServer_getBlockchainInfo_Results {
	return ZarbServer_getBlockchainInfo_Results{s.List.Struct(i)}
}

func (s ZarbServer_getBlockchainInfo_Results_List) Set(i int, v ZarbServer_getBlockchainInfo_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getBlockchainInfo_Results_List) String() string {
	str, _ := text.MarshalList(0xa128fe760c2612c4, s.List)
	return str
}

// ZarbServer_getBlockchainInfo_Results_Promise is a wrapper for a ZarbServer_getBlockchainInfo_Results promised by a client call.
type ZarbServer_getBlockchainInfo_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getBlockchainInfo_Results_Promise) Struct() (ZarbServer_getBlockchainInfo_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getBlockchainInfo_Results{s}, err
}

func (p ZarbServer_getBlockchainInfo_Results_Promise) Result() BlockchainResult_Promise {
	return BlockchainResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ZarbServer_getNetworkInfo_Params struct{ capnp.Struct }

// ZarbServer_getNetworkInfo_Params_TypeID is the unique identifier for the type ZarbServer_getNetworkInfo_Params.
const ZarbServer_getNetworkInfo_Params_TypeID = 0xe051a47070c97f9e

func NewZarbServer_getNetworkInfo_Params(s *capnp.Segment) (ZarbServer_getNetworkInfo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ZarbServer_getNetworkInfo_Params{st}, err
}

func NewRootZarbServer_getNetworkInfo_Params(s *capnp.Segment) (ZarbServer_getNetworkInfo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ZarbServer_getNetworkInfo_Params{st}, err
}

func ReadRootZarbServer_getNetworkInfo_Params(msg *capnp.Message) (ZarbServer_getNetworkInfo_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getNetworkInfo_Params{root.Struct()}, err
}

func (s ZarbServer_getNetworkInfo_Params) String() string {
	str, _ := text.Marshal(0xe051a47070c97f9e, s.Struct)
	return str
}

// ZarbServer_getNetworkInfo_Params_List is a list of ZarbServer_getNetworkInfo_Params.
type ZarbServer_getNetworkInfo_Params_List struct{ capnp.List }

// NewZarbServer_getNetworkInfo_Params creates a new list of ZarbServer_getNetworkInfo_Params.
func NewZarbServer_getNetworkInfo_Params_List(s *capnp.Segment, sz int32) (ZarbServer_getNetworkInfo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return ZarbServer_getNetworkInfo_Params_List{l}, err
}

func (s ZarbServer_getNetworkInfo_Params_List) At(i int) ZarbServer_getNetworkInfo_Params {
	return ZarbServer_getNetworkInfo_Params{s.List.Struct(i)}
}

func (s ZarbServer_getNetworkInfo_Params_List) Set(i int, v ZarbServer_getNetworkInfo_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getNetworkInfo_Params_List) String() string {
	str, _ := text.MarshalList(0xe051a47070c97f9e, s.List)
	return str
}

// ZarbServer_getNetworkInfo_Params_Promise is a wrapper for a ZarbServer_getNetworkInfo_Params promised by a client call.
type ZarbServer_getNetworkInfo_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getNetworkInfo_Params_Promise) Struct() (ZarbServer_getNetworkInfo_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getNetworkInfo_Params{s}, err
}

type ZarbServer_getNetworkInfo_Results struct{ capnp.Struct }

// ZarbServer_getNetworkInfo_Results_TypeID is the unique identifier for the type ZarbServer_getNetworkInfo_Results.
const ZarbServer_getNetworkInfo_Results_TypeID = 0x8d7ad02d9eab8fb7

func NewZarbServer_getNetworkInfo_Results(s *capnp.Segment) (ZarbServer_getNetworkInfo_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getNetworkInfo_Results{st}, err
}

func NewRootZarbServer_getNetworkInfo_Results(s *capnp.Segment) (ZarbServer_getNetworkInfo_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getNetworkInfo_Results{st}, err
}

func ReadRootZarbServer_getNetworkInfo_Results(msg *capnp.Message) (ZarbServer_getNetworkInfo_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getNetworkInfo_Results{root.Struct()}, err
}

func (s ZarbServer_getNetworkInfo_Results) String() string {
	str, _ := text.Marshal(0x8d7ad02d9eab8fb7, s.Struct)
	return str
}

func (s ZarbServer_getNetworkInfo_Results) Result() (NetworkResult, error) {
	p, err := s.Struct.Ptr(0)
	return NetworkResult{Struct: p.Struct()}, err
}

func (s ZarbServer_getNetworkInfo_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getNetworkInfo_Results) SetResult(v NetworkResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated NetworkResult struct, preferring placement in s's segment.
func (s ZarbServer_getNetworkInfo_Results) NewResult() (NetworkResult, error) {
	ss, err := NewNetworkResult(s.Struct.Segment())
	if err != nil {
		return NetworkResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_getNetworkInfo_Results_List is a list of ZarbServer_getNetworkInfo_Results.
type ZarbServer_getNetworkInfo_Results_List struct{ capnp.List }

// NewZarbServer_getNetworkInfo_Results creates a new list of ZarbServer_getNetworkInfo_Results.
func NewZarbServer_getNetworkInfo_Results_List(s *capnp.Segment, sz int32) (ZarbServer_getNetworkInfo_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_getNetworkInfo_Results_List{l}, err
}

func (s ZarbServer_getNetworkInfo_Results_List) At(i int) ZarbServer_getNetworkInfo_Results {
	return ZarbServer_getNetworkInfo_Results{s.List.Struct(i)}
}

func (s ZarbServer_getNetworkInfo_Results_List) Set(i int, v ZarbServer_getNetworkInfo_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getNetworkInfo_Results_List) String() string {
	str, _ := text.MarshalList(0x8d7ad02d9eab8fb7, s.List)
	return str
}

// ZarbServer_getNetworkInfo_Results_Promise is a wrapper for a ZarbServer_getNetworkInfo_Results promised by a client call.
type ZarbServer_getNetworkInfo_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getNetworkInfo_Results_Promise) Struct() (ZarbServer_getNetworkInfo_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getNetworkInfo_Results{s}, err
}

func (p ZarbServer_getNetworkInfo_Results_Promise) Result() NetworkResult_Promise {
	return NetworkResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ZarbServer_sendRawTransaction_Params struct{ capnp.Struct }

// ZarbServer_sendRawTransaction_Params_TypeID is the unique identifier for the type ZarbServer_sendRawTransaction_Params.
const ZarbServer_sendRawTransaction_Params_TypeID = 0x8317eae56a55f0ba

func NewZarbServer_sendRawTransaction_Params(s *capnp.Segment) (ZarbServer_sendRawTransaction_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_sendRawTransaction_Params{st}, err
}

func NewRootZarbServer_sendRawTransaction_Params(s *capnp.Segment) (ZarbServer_sendRawTransaction_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_sendRawTransaction_Params{st}, err
}

func ReadRootZarbServer_sendRawTransaction_Params(msg *capnp.Message) (ZarbServer_sendRawTransaction_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_sendRawTransaction_Params{root.Struct()}, err
}

func (s ZarbServer_sendRawTransaction_Params) String() string {
	str, _ := text.Marshal(0x8317eae56a55f0ba, s.Struct)
	return str
}

func (s ZarbServer_sendRawTransaction_Params) RawTx() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ZarbServer_sendRawTransaction_Params) HasRawTx() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_sendRawTransaction_Params) SetRawTx(v []byte) error {
	return s.Struct.SetData(0, v)
}

// ZarbServer_sendRawTransaction_Params_List is a list of ZarbServer_sendRawTransaction_Params.
type ZarbServer_sendRawTransaction_Params_List struct{ capnp.List }

// NewZarbServer_sendRawTransaction_Params creates a new list of ZarbServer_sendRawTransaction_Params.
func NewZarbServer_sendRawTransaction_Params_List(s *capnp.Segment, sz int32) (ZarbServer_sendRawTransaction_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_sendRawTransaction_Params_List{l}, err
}

func (s ZarbServer_sendRawTransaction_Params_List) At(i int) ZarbServer_sendRawTransaction_Params {
	return ZarbServer_sendRawTransaction_Params{s.List.Struct(i)}
}

func (s ZarbServer_sendRawTransaction_Params_List) Set(i int, v ZarbServer_sendRawTransaction_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_sendRawTransaction_Params_List) String() string {
	str, _ := text.MarshalList(0x8317eae56a55f0ba, s.List)
	return str
}

// ZarbServer_sendRawTransaction_Params_Promise is a wrapper for a ZarbServer_sendRawTransaction_Params promised by a client call.
type ZarbServer_sendRawTransaction_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_sendRawTransaction_Params_Promise) Struct() (ZarbServer_sendRawTransaction_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_sendRawTransaction_Params{s}, err
}

type ZarbServer_sendRawTransaction_Results struct{ capnp.Struct }

// ZarbServer_sendRawTransaction_Results_TypeID is the unique identifier for the type ZarbServer_sendRawTransaction_Results.
const ZarbServer_sendRawTransaction_Results_TypeID = 0xc0689e5f33bf949d

func NewZarbServer_sendRawTransaction_Results(s *capnp.Segment) (ZarbServer_sendRawTransaction_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_sendRawTransaction_Results{st}, err
}

func NewRootZarbServer_sendRawTransaction_Results(s *capnp.Segment) (ZarbServer_sendRawTransaction_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_sendRawTransaction_Results{st}, err
}

func ReadRootZarbServer_sendRawTransaction_Results(msg *capnp.Message) (ZarbServer_sendRawTransaction_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_sendRawTransaction_Results{root.Struct()}, err
}

func (s ZarbServer_sendRawTransaction_Results) String() string {
	str, _ := text.Marshal(0xc0689e5f33bf949d, s.Struct)
	return str
}

func (s ZarbServer_sendRawTransaction_Results) Result() (SendTransactionResult, error) {
	p, err := s.Struct.Ptr(0)
	return SendTransactionResult{Struct: p.Struct()}, err
}

func (s ZarbServer_sendRawTransaction_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_sendRawTransaction_Results) SetResult(v SendTransactionResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated SendTransactionResult struct, preferring placement in s's segment.
func (s ZarbServer_sendRawTransaction_Results) NewResult() (SendTransactionResult, error) {
	ss, err := NewSendTransactionResult(s.Struct.Segment())
	if err != nil {
		return SendTransactionResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_sendRawTransaction_Results_List is a list of ZarbServer_sendRawTransaction_Results.
type ZarbServer_sendRawTransaction_Results_List struct{ capnp.List }

// NewZarbServer_sendRawTransaction_Results creates a new list of ZarbServer_sendRawTransaction_Results.
func NewZarbServer_sendRawTransaction_Results_List(s *capnp.Segment, sz int32) (ZarbServer_sendRawTransaction_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_sendRawTransaction_Results_List{l}, err
}

func (s ZarbServer_sendRawTransaction_Results_List) At(i int) ZarbServer_sendRawTransaction_Results {
	return ZarbServer_sendRawTransaction_Results{s.List.Struct(i)}
}

func (s ZarbServer_sendRawTransaction_Results_List) Set(i int, v ZarbServer_sendRawTransaction_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_sendRawTransaction_Results_List) String() string {
	str, _ := text.MarshalList(0xc0689e5f33bf949d, s.List)
	return str
}

// ZarbServer_sendRawTransaction_Results_Promise is a wrapper for a ZarbServer_sendRawTransaction_Results promised by a client call.
type ZarbServer_sendRawTransaction_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_sendRawTransaction_Results_Promise) Struct() (ZarbServer_sendRawTransaction_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_sendRawTransaction_Results{s}, err
}

func (p ZarbServer_sendRawTransaction_Results_Promise) Result() SendTransactionResult_Promise {
	return SendTransactionResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_84b56bd0975dfd33 = "x\xda\xacXo\x8cTW\x15?\xe7\xdey3\xb3\xbb" +
	"\xc3\xce\xbe\xbe\xd9\xb4!\xd0Y\xccb\x00KK\xd9\x12" +
	"\x0d\x1f\x1cX\xa1\x02\x05\xdd\xb7\x83\x8d]\xad\xfav\xe6" +
	"\x96}\xec0\xb3\xbe\xf7v\x97\xa2\xcd\xda\xad\x8d\x80\x85" +
	"Z\xacV\x1a!\x85\xb61Pi#\x8av\x89D\x89" +
	"\xad\x0d\xa4M)\x84\xd86P+\xa1\x0aM\x11\xd0n" +
	",\xb10\xe6\xdc7\xef\xcd\x9b\xe9\xfe%~\x9bw\xef" +
	"\x99\xf3\xf7w~\xe7\xde;oXY\xc4nW\x8a5" +
	"\x00\xba\xa3\x84\x8b\xe7\xae<rO8\x95x\x08\xd4F" +
	",\xb6\\\xbd\xf7\x89c\xdd\x07\xbe\x0f\x0a\x8f\x00\xb4\xbc" +
	"\x17\xaaEm8\x14\x01\xd0.\x87^\x00,\x1e\xbc\xf4" +
	"\x95\xb5\xef\xbd\x7f\xe3C\xa06!\x80\x82$\xb4I9" +
	"\x8e\x80\xda\x0e%\x05X<\xde\xfe\xa7\xc37\x7ff\xe6" +
	"\xc3A\x81C\xca~\x12xM\x0a\xfc\xee\xd1\xe7v\xce" +
	"=\xb6aKP\xe0\x82r\x90\x04\xae\x92\xc0\xb5\xa3\xc7" +
	"?\x9a\xfd\xca\xe5-z\x132\x002\xdd2=<H" +
	"\xdb\xb3\xc3\xfd\x80EC]\xfb\xaa\xf1\xd3'\xb6Vx" +
	"\x10~\x92\x04\xb6\x87\xc9\xc0\xa5\xbd?\x1b8p\xea\x9d" +
	"\xad\xa07\"\x0b\x04\x14\xa6(\x86\xc2g\xb4\x97\xe9W" +
	"\xcb\xe1\xf0+\x08X\x9c\xd7\xf1\xf5\x13wM\xff\xcd\xa3" +
	"\xae:inG\xf4(B\xa8\x18\xd5~\xf9\x8do'" +
	"\xbb\x1f\x07\xbd\x09\xbd\xad\xc7\xa2\xd2\xd1]Q2\xf4\xd2" +
	"\x0d\x9f\x8e\xf5]\x9b\xb5+\xe8\xc9\xe1\xa8\xcc\xc5I)" +
	"\xf0\xb5\xfe\xe7.\xe6\xf0W\xbb\x83\x02\xc3\xae\x06\xa5\x86" +
	"\x04nl\xab\xfd\xfc\xa9U\x87\x9e\xaeJ\xbd\x14\x9cY" +
	"3\x15\xb5\x055\xe4\xf4\xedRxIl\xa0p\xf5\xc7" +
	"\xff~q\x84:iz\xcd\xdb\xda\xbdR\xf6\x9e\x1a*" +
	"S\xd7o\xaf%\xa6}\xb6\xff\xd0H5\x1d\xaeY\x88" +
	"\x9aRK\xc2XK\xc2{\xba\x07\x7f\xfd\xfe\xb1\x8d\x87" +
	"(a\x01i7\x17\xb5\xf3Q\xdb'\x85\xf7\xd4\x92\x17" +
	";\x1e\xffC\xcb7wv\xfd1\x18\xd3\x91\xda\xb7)" +
	"\xa6\xd3R`\xf6\xf0\x9c\x8b\xfb\xce4\x1d\x1e!&\xed" +
	"j\xedQ\xad\xa6\x8e~)uT\xeaY\xd9\x1f|\xd1" +
	"\xce\xbd\xe6&\xd8\xd5\xb5\xa0n\x1b\xe9ZZG\xb5^" +
	"1\xe7\xcf\xfb\x87B\x7fy\xbd\xca3W\xf2\xd9\xba\x0e" +
	"\xd4\x86\xa4\xb6\x03Rz\xa8c\xdbLc\xf3_O@" +
	"P\x9f\x1a\x93\xd8\x9b\x11#\x89\x94\xf2\xe5\xde\x7f\xbc>" +
	"\xf4\x0e\xe9\xe3\x01}\x12\xe0\x0f\xc6\x8ek[b\x12N" +
	"\xb1\"Ac\xe7\xc0\x91\x9e\x9eg\xf4w\x03\xd0\xd8S" +
	"\xbf\x9f\xa0\xf1t\xf1\x87\xcfo\x19\x9c\xf6\xc1Hu\xdb" +
	"^?\x07\xb5=\xf5\xa4\xf1\xd9zJ\xc8\xd6\xe9\x7f\xef" +
	"\xfe\xcf\xca\xb7\xfeY\xe1\xd6\xcb\xf5\xbb%N\xea\xc9\xad" +
	"\xef\xfch\xf7\x0c|\xea\xe0\xc5*uL\xe6#>\x15" +
	"\xb5\xa5qR\xb78N\xc2\xd3n\xfe\xc5\xe0\xcf\xdb\xce" +
	"\x0d\x07\x0b\xb0/\xbe\x99\xb4\x1d\x8a\x93\xbd\xb3\x03'\xa6" +
	"<\x7f&|\x05\xd4\xc6@\x8c\x80-\xa7\xe3\x0c\xb5\xf3" +
	"q\xd9\xd7\xf1\x08\xd3V\xa9\x11\x80b]\xe3\xb7~\xf2" +
	"\xc2\x9dw^\xa9\xce\xb1\x8cw\x81Z\x8b\xdaR\x92k" +
	"Y\xac&))\x8d+#\xdd\xffz\xa3\xf5\xbfA\xf3" +
	"\x0f\xde\xb0\x97\xcc?v\x03\x99\xef\xef\xef\xbf-c\xf4" +
	"\xe4y\xcfm\x1b\x0c\xab\xf3V\xfa\xdd\xb3\xb05W\xc8" +
	"t\xb7\x0b\xbb7\xe7\x00\xb4!\xea1\x1e\x02\x08!\x80" +
	"\xbat\x0e\x80\xbe\x88\xa3\xbe\x92\xa1\x8a\x98\xa0$\xa9\xcb" +
	"iq\x09G\xbd\x8d\xa1\xcaX\x82\xb8@]5\x1f@" +
	"_\xc6Q_\xcd0\xdee\xd8]8\x05\x18N\x01\x8c" +
	"g\x0d\xc7\xf0>\x92\x9dd\x0b\x1b\xca\x0d\x03\x88\x0d\x01" +
	"\xcf\xc2\x15\x9eu\x18VgZX}\xc2\xba\xd5\x16\xf9" +
	"l\xbb\xd1\xbf\xda2\xf2\xb6\x91q\xccB\xbe\xb9\xcd\xb0" +
	"\x8cuh\xeb!\xdf\xdd)\xe4D\x94\xa3\x9e`\x98\xb4" +
	"\x8c\xfe\xd5\xeb=\xc3\xbe\x01e4\x03k\x84#\x13\xb1" +
	"L\x98k\xba\x9c\xe6\xb6$i\xafP>\xa7\xac\xbc\"" +
	"\xc2\x09\xe9\xfe\x92p\xfa\x0bV\xf7\xf2\xfc}\x85\xe6\xf6" +
	"\x94Lv\x85\xf2\x85e\xe5)KncC\x19|U" +
	"Y\x1a7\x08776\xa9\xf4,\xcc&\x0b\xcd\x1c\xf5" +
	"yTJ\xe6\x96rn;\x80~\x0bG\xfds\x0cS" +
	"]2r\xac\x01\x865\x80\xc5>au\x16l\xd3\x01" +
	"\xbc\x1fC\xc004A\x07\x16g2\x85\xde\xbc\xd3," +
	"\x11\xc5'\x10\xa5\xcf\xb4UQ\xb2\x0a#\xcb\x84\x11\xc9" +
	"\x0a\x8b\xf0\xd9\xe4+|\xa3\x15@\x7f\x95\xa3\xfef\x00" +
	"\x9f'\xa9P\xc78\xea\xa7\x18b\x09\x9eoY\x00\xfa" +
	"\x9b\x1c\xf5\xb3\x0cU\x8e\x09\xe4\x00\xea\xdf(\xfaw9" +
	"\xea\x1f0TC,\x81!\x00\xf5<\xa9<\xcbQ\xbf" +
	"\xc4PUx\x02\x15\x00\xf5\xc2n\x00\xfd\x12G\xfdc" +
	"\x86j8\x94\xc00\x80z\x85t~\xc41\x1dB\x86" +
	"jDIH\x1eE\x1c\x04hG\x8e\xe9\x182\x1c\xe8" +
	"\x13\x96m\x16\xf2^\x06\xe3\x8e\xb9N\xa0\x02\x0c\x15\xc0" +
	"b\xce\xb0e\xbd \xd9\xbd,\x08(\xdb1\x1c\xb1\xcc" +
	"\xb0\x01\xfd\xb5\x01g\xbd]!C\xff\xfd\x82\xb0\x1c4" +
	"\xef33$\x1e\xa9\xd0P\xb0\x1c\xd31\x0b\x90\xcc\xa7" +
	"\x85\xc8\xfa\xeb=V\xa1\xa7`\x0b\x0b\x17g\xb3\x96\xb0" +
	"m\xf8\x04\x88\xc3\xe3a+\xd3e\x98y\x89\xe3\x12\xc8" +
	"`\xd2\xcd5\xc1\x06\xf0\x90x\x1d\xae\xb9t\x86\xe3\x83" +
	"\xcf\x1f\xb0\x93h\xb1 \x09M\xb8\x97\xfd\xb1_e\xa8" +
	"\x92\x8bK\xcdC\xee\xf3\x9cC`\x1f\x85\x80\x82\xac:" +
	"J\xc7\xb4\xe6\x0a<\xd3]E\xe8\x0bG\"\xf4\xc12" +
	"w\xfb\x84\xae\x7f\x0a@_\xc9Q\xff\xaa\xa4\x06#+" +
	",l(\x1f\xe0JQT\xa3\x10\xb0\xa1<\xb5\\\x99" +
	"\x88\xb3\xde\xc6\x86\xf2\xd9c\xcc\xf8\x03\xa9M\xb95\xac" +
	"\xf2\x7f\xea\x84\x07Rg\xd9\x7fnfG\x1cGE\xa7" +
	"d\x0e\"\xd4\xa3\xd5\xe9\x1caLJ\x84\xb5'}\xcf" +
	"F\xa9z\x89J\xbd>\xbf\x9e\xe96a\xfa\xf4\x0fb" +
	"c\xd2\xe7\xea\xf5\xb6;\xdcGP\xd7L\x1e\x1bv\x97" +
	"\xb0\xb1\x1e\xb0\x8d\xa3\xccD\xfd$\xf9\xde\x1b\xc7\x81\x91" +
	"\xd3Z\x1e9^\xad\x82\x13g\xc0pI\xc8O\xfcX" +
	"#'T\xe1BZ\xe4\xb3\x81l\x05\xfae\xe4\x89\xe7" +
	"\x9b'\xfc\xcc\xe2\xa8\xdf\xc10E4\xdbk{\x96\x02" +
	" \x994\x0bx\xa7\x85\x80\xf1\xa9c\xc7\x1e\xb46V" +
	"\xd8\x95Ul\x13\x02\xe5\x08l\xf6\x0d]\xa0$\x9f\xe3" +
	"\xa8\x7f\x18\xe8\x88\xcb\x9d\x81y\xe5u\xc4\x15\xca\xc7\x87" +
	"\x1c\xdbi\\q\xee\xce\xc0\xab\xe4\xd3\xc7\x1c\xd3Qd" +
	"\x88!9\x035\x05\xf7\x02\xa4\xa34\xc4\x12$\xac\xa0" +
	"\x1c\x83\x9a\x8a\x0b\x01\xd21Z\xbf\x89\xd6\xc3LNB" +
	"\xad\x117\x03\xa4o\xa2\xf5f9\x0b\xb9;\x0bg\xd0" +
	",L7\xd1\xfa-\xb4\x1e\x0d%0\x0a\xa0\xcdF\x0b" +
	" =\x8b\xd6\xef\xa0!\xb9\xae\x907\xbb\x85\x851`" +
	"\x18\x03,\xe6\x0bYq\xb7\xb0\xec\x8a\xb6L\xf5\x08a" +
	"-_\xe2\x0b\xf5\xf4v\xe6\xcc\xcc]\x82\xb2\xe6\xad\x99" +
	"y\xd31\x8d\\+R\xaf.)\xf4\xe7\xe3\xb9\x82\x91" +
	"E\x04\x86\x08~[z9\xb6DF\x98}\"\x8b\xab" +
	"\x84m\x1bk\x84\x0d\xe0\xef\x99\xf9>#gfW\xa1" +
	"\xb7\xf5\x89\x7fA\xb2\xf5~G\xd8\x93:\x1b\x05O\x81" +
	"%\xcc\x8c\xc26w\x93u\xc3)X\xed\">\x02\xd9" +
	"\x8c;\x0a\xc6\xf2\xc2\xd7M=\x1b\xa9\xc2\xed\xff\xb3g" +
	"+C*\x05?n\xaf\xfa(\x9e;\xbf\xd4\xacKX" +
	"u\xf5\x93\xf4\xe9\xd3UC\xf9\xf6\x088a\xe2rO" +
	"\xca\xee\x94\xb1\x01\xc6%Z\xff1f\xcc\x09V\xb6\x01" +
	"\xeeYU\x01\xf0\xdeM\x02\x17\xc4\xcb+\x80\xa9\xe7#" +
	"X~\x95A\xefQC=\xbd\x01\x98z2\x82\xcc\xbf" +
	"6\xa3\xf7\\\xa1\x1e\xa1\xbd\xc3\x11\xe4\xde\x05=\xf0\xe8" +
	"r\xa0\x03\x98\xba/\x82!\xff^\x8b\xde\x95P\xdd\xb5" +
	"\x16\x98\xba=\x82\x8a\xff\xaa\x82\xde\x1b\x89\xbae\x1b0" +
	"uS\x04\xc3\xfe\xb5\x1a\xbd\x97 \xf5\x01\xb2\xd7\x1b\xc1" +
	"\x88\xff\xbc\x84\xde3\x83j>\x09L\x15\x91\xa2\x97K" +
	"\x00X\x84\xe5\xaf\x94{\xdas\x97$[B\xca\xe5K" +
	"wI\x0e\x0e\xe0\xf9\x92\x84D%\xc4\x09\x97\x01-\xe8" +
	"\x9d\xe9\xb0\xe0\xaeJ\x14A\xcam\xa2EX\xf4F'" +
	"zt\xccI\x7f\x1b\x8eV\x1f:\xadx\x87\x15Y\xa1" +
	"\x84_\xf6\x07\x08\xe7\xdf\xe5\xa8o,c\xffa\xc2\xe0" +
	"\xf78\xea\x8f\x10\x93\xa2\xcb\xa4\x9b:\x00\xf4\x8d\x1c\xf5" +
	"g\x88I\x99\xcb\xa4\xbbV\x00\xe8Oq\xd4\x7fO\xb7" +
	"\x09\xee\xde&\x86H\xe5\x8b\x1c\xf5\x97\x18\x16\xe5\xe5\xb7" +
	"\xf2X\x9f\xb4\x0a\xbd\xf9,F\x81a\x14\xb0\x98)\xac" +
	"[g:\x8e\x00^\x06w\xa84\x8b\x8dN[\xe43" +
	"DRP\xbde\x9bk\xf2\x86\xd3k\x01\x8a\xeb$\x82" +
	"va\xc7't\x8c\xf5\x9fW\xdc&\xf8_\x00\x00\x00" +
	"\xff\xffd\xe9n\xae"

func init() {
	schemas.Register(schema_84b56bd0975dfd33,
		0x83143f06598cf9e8,
		0x8317eae56a55f0ba,
		0x85252b1ec1c352d2,
		0x8d7ad02d9eab8fb7,
		0x8df1c729f8d2ca00,
		0x8e979661cc6a1161,
		0x8ededcb57f98aaf0,
		0x8fb41d4bd35c5a30,
		0x946b1f715eac1308,
		0xa128fe760c2612c4,
		0xa2b1016cefab775b,
		0xa3bd4ddc3e0a5017,
		0xb8f393fd6f7f0c44,
		0xbd77371c14feb668,
		0xbd88d0eab3826ba9,
		0xc0689e5f33bf949d,
		0xc120e2adef2af529,
		0xcd6c734787642800,
		0xcfd704b9b2c62a4a,
		0xd3df8a6125925ab9,
		0xdeb9cfe7754f053f,
		0xe051a47070c97f9e,
		0xec1c828dae8bffa3,
		0xeed94cf76be61d8e,
		0xefbaa00121a2907b,
		0xf5e8509c82a71e1c,
		0xf906e2ae0dd37fe4,
		0xf94646af9560150b,
		0xfb42d1f26b074c15)
}
