// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	context "golang.org/x/net/context"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Header struct{ capnp.Struct }

// Header_TypeID is the unique identifier for the type Header.
const Header_TypeID = 0x8ededcb57f98aaf0

func NewHeader(s *capnp.Segment) (Header, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Header{st}, err
}

func NewRootHeader(s *capnp.Segment) (Header, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Header{st}, err
}

func ReadRootHeader(msg *capnp.Message) (Header, error) {
	root, err := msg.RootPtr()
	return Header{root.Struct()}, err
}

func (s Header) String() string {
	str, _ := text.Marshal(0x8ededcb57f98aaf0, s.Struct)
	return str
}

func (s Header) Version() uint8 {
	return s.Struct.Uint8(0)
}

func (s Header) SetVersion(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s Header) Time() int32 {
	return int32(s.Struct.Uint32(4))
}

func (s Header) SetTime(v int32) {
	s.Struct.SetUint32(4, uint32(v))
}

func (s Header) PrevBlockHash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Header) HasPrevBlockHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Header) SetPrevBlockHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Header) StateRoot() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Header) HasStateRoot() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Header) SetStateRoot(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s Header) SortitionSeed() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s Header) HasSortitionSeed() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Header) SetSortitionSeed(v []byte) error {
	return s.Struct.SetData(2, v)
}

func (s Header) ProposerAddress() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s Header) HasProposerAddress() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Header) SetProposerAddress(v []byte) error {
	return s.Struct.SetData(3, v)
}

// Header_List is a list of Header.
type Header_List struct{ capnp.List }

// NewHeader creates a new list of Header.
func NewHeader_List(s *capnp.Segment, sz int32) (Header_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return Header_List{l}, err
}

func (s Header_List) At(i int) Header { return Header{s.List.Struct(i)} }

func (s Header_List) Set(i int, v Header) error { return s.List.SetStruct(i, v.Struct) }

func (s Header_List) String() string {
	str, _ := text.MarshalList(0x8ededcb57f98aaf0, s.List)
	return str
}

// Header_Promise is a wrapper for a Header promised by a client call.
type Header_Promise struct{ *capnp.Pipeline }

func (p Header_Promise) Struct() (Header, error) {
	s, err := p.Pipeline.Struct()
	return Header{s}, err
}

type Certificate struct{ capnp.Struct }

// Certificate_TypeID is the unique identifier for the type Certificate.
const Certificate_TypeID = 0xf94646af9560150b

func NewCertificate(s *capnp.Segment) (Certificate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Certificate{st}, err
}

func NewRootCertificate(s *capnp.Segment) (Certificate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Certificate{st}, err
}

func ReadRootCertificate(msg *capnp.Message) (Certificate, error) {
	root, err := msg.RootPtr()
	return Certificate{root.Struct()}, err
}

func (s Certificate) String() string {
	str, _ := text.Marshal(0xf94646af9560150b, s.Struct)
	return str
}

func (s Certificate) Round() int16 {
	return int16(s.Struct.Uint16(0))
}

func (s Certificate) SetRound(v int16) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Certificate) Committers() (capnp.Int32List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.Int32List{List: p.List()}, err
}

func (s Certificate) HasCommitters() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Certificate) SetCommitters(v capnp.Int32List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewCommitters sets the committers field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s Certificate) NewCommitters(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Certificate) Absentees() (capnp.Int32List, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.Int32List{List: p.List()}, err
}

func (s Certificate) HasAbsentees() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Certificate) SetAbsentees(v capnp.Int32List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewAbsentees sets the absentees field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s Certificate) NewAbsentees(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Certificate) Signature() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s Certificate) HasSignature() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Certificate) SetSignature(v []byte) error {
	return s.Struct.SetData(2, v)
}

// Certificate_List is a list of Certificate.
type Certificate_List struct{ capnp.List }

// NewCertificate creates a new list of Certificate.
func NewCertificate_List(s *capnp.Segment, sz int32) (Certificate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return Certificate_List{l}, err
}

func (s Certificate_List) At(i int) Certificate { return Certificate{s.List.Struct(i)} }

func (s Certificate_List) Set(i int, v Certificate) error { return s.List.SetStruct(i, v.Struct) }

func (s Certificate_List) String() string {
	str, _ := text.MarshalList(0xf94646af9560150b, s.List)
	return str
}

// Certificate_Promise is a wrapper for a Certificate promised by a client call.
type Certificate_Promise struct{ *capnp.Pipeline }

func (p Certificate_Promise) Struct() (Certificate, error) {
	s, err := p.Pipeline.Struct()
	return Certificate{s}, err
}

type Block struct{ capnp.Struct }

// Block_TypeID is the unique identifier for the type Block.
const Block_TypeID = 0xb8f393fd6f7f0c44

func NewBlock(s *capnp.Segment) (Block, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Block{st}, err
}

func NewRootBlock(s *capnp.Segment) (Block, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Block{st}, err
}

func ReadRootBlock(msg *capnp.Message) (Block, error) {
	root, err := msg.RootPtr()
	return Block{root.Struct()}, err
}

func (s Block) String() string {
	str, _ := text.Marshal(0xb8f393fd6f7f0c44, s.Struct)
	return str
}

func (s Block) Header() (Header, error) {
	p, err := s.Struct.Ptr(0)
	return Header{Struct: p.Struct()}, err
}

func (s Block) HasHeader() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Block) SetHeader(v Header) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHeader sets the header field to a newly
// allocated Header struct, preferring placement in s's segment.
func (s Block) NewHeader() (Header, error) {
	ss, err := NewHeader(s.Struct.Segment())
	if err != nil {
		return Header{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Block) PrevCert() (Certificate, error) {
	p, err := s.Struct.Ptr(1)
	return Certificate{Struct: p.Struct()}, err
}

func (s Block) HasPrevCert() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Block) SetPrevCert(v Certificate) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewPrevCert sets the prevCert field to a newly
// allocated Certificate struct, preferring placement in s's segment.
func (s Block) NewPrevCert() (Certificate, error) {
	ss, err := NewCertificate(s.Struct.Segment())
	if err != nil {
		return Certificate{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Block) Txs() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.DataList{List: p.List()}, err
}

func (s Block) HasTxs() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Block) SetTxs(v capnp.DataList) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewTxs sets the txs field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Block) NewTxs(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// Block_List is a list of Block.
type Block_List struct{ capnp.List }

// NewBlock creates a new list of Block.
func NewBlock_List(s *capnp.Segment, sz int32) (Block_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Block_List{l}, err
}

func (s Block_List) At(i int) Block { return Block{s.List.Struct(i)} }

func (s Block_List) Set(i int, v Block) error { return s.List.SetStruct(i, v.Struct) }

func (s Block_List) String() string {
	str, _ := text.MarshalList(0xb8f393fd6f7f0c44, s.List)
	return str
}

// Block_Promise is a wrapper for a Block promised by a client call.
type Block_Promise struct{ *capnp.Pipeline }

func (p Block_Promise) Struct() (Block, error) {
	s, err := p.Pipeline.Struct()
	return Block{s}, err
}

func (p Block_Promise) Header() Header_Promise {
	return Header_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Block_Promise) PrevCert() Certificate_Promise {
	return Certificate_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type BlockchainResult struct{ capnp.Struct }

// BlockchainResult_TypeID is the unique identifier for the type BlockchainResult.
const BlockchainResult_TypeID = 0xbd88d0eab3826ba9

func NewBlockchainResult(s *capnp.Segment) (BlockchainResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BlockchainResult{st}, err
}

func NewRootBlockchainResult(s *capnp.Segment) (BlockchainResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return BlockchainResult{st}, err
}

func ReadRootBlockchainResult(msg *capnp.Message) (BlockchainResult, error) {
	root, err := msg.RootPtr()
	return BlockchainResult{root.Struct()}, err
}

func (s BlockchainResult) String() string {
	str, _ := text.Marshal(0xbd88d0eab3826ba9, s.Struct)
	return str
}

func (s BlockchainResult) LastBlockHeight() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s BlockchainResult) SetLastBlockHeight(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s BlockchainResult) LastBlockHash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s BlockchainResult) HasLastBlockHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s BlockchainResult) SetLastBlockHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

// BlockchainResult_List is a list of BlockchainResult.
type BlockchainResult_List struct{ capnp.List }

// NewBlockchainResult creates a new list of BlockchainResult.
func NewBlockchainResult_List(s *capnp.Segment, sz int32) (BlockchainResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return BlockchainResult_List{l}, err
}

func (s BlockchainResult_List) At(i int) BlockchainResult { return BlockchainResult{s.List.Struct(i)} }

func (s BlockchainResult_List) Set(i int, v BlockchainResult) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s BlockchainResult_List) String() string {
	str, _ := text.MarshalList(0xbd88d0eab3826ba9, s.List)
	return str
}

// BlockchainResult_Promise is a wrapper for a BlockchainResult promised by a client call.
type BlockchainResult_Promise struct{ *capnp.Pipeline }

func (p BlockchainResult_Promise) Struct() (BlockchainResult, error) {
	s, err := p.Pipeline.Struct()
	return BlockchainResult{s}, err
}

type BlockResult struct{ capnp.Struct }

// BlockResult_TypeID is the unique identifier for the type BlockResult.
const BlockResult_TypeID = 0x83143f06598cf9e8

func NewBlockResult(s *capnp.Segment) (BlockResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return BlockResult{st}, err
}

func NewRootBlockResult(s *capnp.Segment) (BlockResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return BlockResult{st}, err
}

func ReadRootBlockResult(msg *capnp.Message) (BlockResult, error) {
	root, err := msg.RootPtr()
	return BlockResult{root.Struct()}, err
}

func (s BlockResult) String() string {
	str, _ := text.Marshal(0x83143f06598cf9e8, s.Struct)
	return str
}

func (s BlockResult) Height() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s BlockResult) HasHeight() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s BlockResult) SetHeight(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s BlockResult) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s BlockResult) HasHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s BlockResult) SetHash(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s BlockResult) Block() (Block, error) {
	p, err := s.Struct.Ptr(2)
	return Block{Struct: p.Struct()}, err
}

func (s BlockResult) HasBlock() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s BlockResult) SetBlock(v Block) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewBlock sets the block field to a newly
// allocated Block struct, preferring placement in s's segment.
func (s BlockResult) NewBlock() (Block, error) {
	ss, err := NewBlock(s.Struct.Segment())
	if err != nil {
		return Block{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s BlockResult) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s BlockResult) HasData() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s BlockResult) SetData(v []byte) error {
	return s.Struct.SetData(3, v)
}

// BlockResult_List is a list of BlockResult.
type BlockResult_List struct{ capnp.List }

// NewBlockResult creates a new list of BlockResult.
func NewBlockResult_List(s *capnp.Segment, sz int32) (BlockResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return BlockResult_List{l}, err
}

func (s BlockResult_List) At(i int) BlockResult { return BlockResult{s.List.Struct(i)} }

func (s BlockResult_List) Set(i int, v BlockResult) error { return s.List.SetStruct(i, v.Struct) }

func (s BlockResult_List) String() string {
	str, _ := text.MarshalList(0x83143f06598cf9e8, s.List)
	return str
}

// BlockResult_Promise is a wrapper for a BlockResult promised by a client call.
type BlockResult_Promise struct{ *capnp.Pipeline }

func (p BlockResult_Promise) Struct() (BlockResult, error) {
	s, err := p.Pipeline.Struct()
	return BlockResult{s}, err
}

func (p BlockResult_Promise) Block() Block_Promise {
	return Block_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type TransactionResult struct{ capnp.Struct }

// TransactionResult_TypeID is the unique identifier for the type TransactionResult.
const TransactionResult_TypeID = 0xbd77371c14feb668

func NewTransactionResult(s *capnp.Segment) (TransactionResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return TransactionResult{st}, err
}

func NewRootTransactionResult(s *capnp.Segment) (TransactionResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return TransactionResult{st}, err
}

func ReadRootTransactionResult(msg *capnp.Message) (TransactionResult, error) {
	root, err := msg.RootPtr()
	return TransactionResult{root.Struct()}, err
}

func (s TransactionResult) String() string {
	str, _ := text.Marshal(0xbd77371c14feb668, s.Struct)
	return str
}

func (s TransactionResult) Id() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s TransactionResult) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TransactionResult) SetId(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s TransactionResult) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s TransactionResult) HasData() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TransactionResult) SetData(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s TransactionResult) Transaction() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s TransactionResult) HasTransaction() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s TransactionResult) SetTransaction(v []byte) error {
	return s.Struct.SetData(2, v)
}

// TransactionResult_List is a list of TransactionResult.
type TransactionResult_List struct{ capnp.List }

// NewTransactionResult creates a new list of TransactionResult.
func NewTransactionResult_List(s *capnp.Segment, sz int32) (TransactionResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return TransactionResult_List{l}, err
}

func (s TransactionResult_List) At(i int) TransactionResult {
	return TransactionResult{s.List.Struct(i)}
}

func (s TransactionResult_List) Set(i int, v TransactionResult) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s TransactionResult_List) String() string {
	str, _ := text.MarshalList(0xbd77371c14feb668, s.List)
	return str
}

// TransactionResult_Promise is a wrapper for a TransactionResult promised by a client call.
type TransactionResult_Promise struct{ *capnp.Pipeline }

func (p TransactionResult_Promise) Struct() (TransactionResult, error) {
	s, err := p.Pipeline.Struct()
	return TransactionResult{s}, err
}

type AccountResult struct{ capnp.Struct }

// AccountResult_TypeID is the unique identifier for the type AccountResult.
const AccountResult_TypeID = 0xa3bd4ddc3e0a5017

func NewAccountResult(s *capnp.Segment) (AccountResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AccountResult{st}, err
}

func NewRootAccountResult(s *capnp.Segment) (AccountResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AccountResult{st}, err
}

func ReadRootAccountResult(msg *capnp.Message) (AccountResult, error) {
	root, err := msg.RootPtr()
	return AccountResult{root.Struct()}, err
}

func (s AccountResult) String() string {
	str, _ := text.Marshal(0xa3bd4ddc3e0a5017, s.Struct)
	return str
}

func (s AccountResult) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s AccountResult) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AccountResult) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// AccountResult_List is a list of AccountResult.
type AccountResult_List struct{ capnp.List }

// NewAccountResult creates a new list of AccountResult.
func NewAccountResult_List(s *capnp.Segment, sz int32) (AccountResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return AccountResult_List{l}, err
}

func (s AccountResult_List) At(i int) AccountResult { return AccountResult{s.List.Struct(i)} }

func (s AccountResult_List) Set(i int, v AccountResult) error { return s.List.SetStruct(i, v.Struct) }

func (s AccountResult_List) String() string {
	str, _ := text.MarshalList(0xa3bd4ddc3e0a5017, s.List)
	return str
}

// AccountResult_Promise is a wrapper for a AccountResult promised by a client call.
type AccountResult_Promise struct{ *capnp.Pipeline }

func (p AccountResult_Promise) Struct() (AccountResult, error) {
	s, err := p.Pipeline.Struct()
	return AccountResult{s}, err
}

type ValidatorResult struct{ capnp.Struct }

// ValidatorResult_TypeID is the unique identifier for the type ValidatorResult.
const ValidatorResult_TypeID = 0xec1c828dae8bffa3

func NewValidatorResult(s *capnp.Segment) (ValidatorResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ValidatorResult{st}, err
}

func NewRootValidatorResult(s *capnp.Segment) (ValidatorResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ValidatorResult{st}, err
}

func ReadRootValidatorResult(msg *capnp.Message) (ValidatorResult, error) {
	root, err := msg.RootPtr()
	return ValidatorResult{root.Struct()}, err
}

func (s ValidatorResult) String() string {
	str, _ := text.Marshal(0xec1c828dae8bffa3, s.Struct)
	return str
}

func (s ValidatorResult) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ValidatorResult) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ValidatorResult) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// ValidatorResult_List is a list of ValidatorResult.
type ValidatorResult_List struct{ capnp.List }

// NewValidatorResult creates a new list of ValidatorResult.
func NewValidatorResult_List(s *capnp.Segment, sz int32) (ValidatorResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ValidatorResult_List{l}, err
}

func (s ValidatorResult_List) At(i int) ValidatorResult { return ValidatorResult{s.List.Struct(i)} }

func (s ValidatorResult_List) Set(i int, v ValidatorResult) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ValidatorResult_List) String() string {
	str, _ := text.MarshalList(0xec1c828dae8bffa3, s.List)
	return str
}

// ValidatorResult_Promise is a wrapper for a ValidatorResult promised by a client call.
type ValidatorResult_Promise struct{ *capnp.Pipeline }

func (p ValidatorResult_Promise) Struct() (ValidatorResult, error) {
	s, err := p.Pipeline.Struct()
	return ValidatorResult{s}, err
}

type Peer struct{ capnp.Struct }

// Peer_TypeID is the unique identifier for the type Peer.
const Peer_TypeID = 0xdeb9cfe7754f053f

func NewPeer(s *capnp.Segment) (Peer, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 4})
	return Peer{st}, err
}

func NewRootPeer(s *capnp.Segment) (Peer, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 4})
	return Peer{st}, err
}

func ReadRootPeer(msg *capnp.Message) (Peer, error) {
	root, err := msg.RootPtr()
	return Peer{root.Struct()}, err
}

func (s Peer) String() string {
	str, _ := text.Marshal(0xdeb9cfe7754f053f, s.Struct)
	return str
}

func (s Peer) Status() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s Peer) SetStatus(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s Peer) Moniker() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Peer) HasMoniker() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Peer) MonikerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Peer) SetMoniker(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Peer) Agent() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Peer) HasAgent() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Peer) AgentBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Peer) SetAgent(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Peer) PeerID() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Peer) HasPeerID() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Peer) PeerIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Peer) SetPeerID(v string) error {
	return s.Struct.SetText(2, v)
}

func (s Peer) PublicKey() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s Peer) HasPublicKey() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Peer) PublicKeyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s Peer) SetPublicKey(v string) error {
	return s.Struct.SetText(3, v)
}

func (s Peer) Flags() int32 {
	return int32(s.Struct.Uint32(4))
}

func (s Peer) SetFlags(v int32) {
	s.Struct.SetUint32(4, uint32(v))
}

func (s Peer) Height() int32 {
	return int32(s.Struct.Uint32(8))
}

func (s Peer) SetHeight(v int32) {
	s.Struct.SetUint32(8, uint32(v))
}

func (s Peer) ReceivedMessages() int32 {
	return int32(s.Struct.Uint32(12))
}

func (s Peer) SetReceivedMessages(v int32) {
	s.Struct.SetUint32(12, uint32(v))
}

func (s Peer) InvalidMessages() int32 {
	return int32(s.Struct.Uint32(16))
}

func (s Peer) SetInvalidMessages(v int32) {
	s.Struct.SetUint32(16, uint32(v))
}

func (s Peer) ReceivedBytes() int32 {
	return int32(s.Struct.Uint32(20))
}

func (s Peer) SetReceivedBytes(v int32) {
	s.Struct.SetUint32(20, uint32(v))
}

// Peer_List is a list of Peer.
type Peer_List struct{ capnp.List }

// NewPeer creates a new list of Peer.
func NewPeer_List(s *capnp.Segment, sz int32) (Peer_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 4}, sz)
	return Peer_List{l}, err
}

func (s Peer_List) At(i int) Peer { return Peer{s.List.Struct(i)} }

func (s Peer_List) Set(i int, v Peer) error { return s.List.SetStruct(i, v.Struct) }

func (s Peer_List) String() string {
	str, _ := text.MarshalList(0xdeb9cfe7754f053f, s.List)
	return str
}

// Peer_Promise is a wrapper for a Peer promised by a client call.
type Peer_Promise struct{ *capnp.Pipeline }

func (p Peer_Promise) Struct() (Peer, error) {
	s, err := p.Pipeline.Struct()
	return Peer{s}, err
}

type NetworkResult struct{ capnp.Struct }

// NetworkResult_TypeID is the unique identifier for the type NetworkResult.
const NetworkResult_TypeID = 0xefbaa00121a2907b

func NewNetworkResult(s *capnp.Segment) (NetworkResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return NetworkResult{st}, err
}

func NewRootNetworkResult(s *capnp.Segment) (NetworkResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return NetworkResult{st}, err
}

func ReadRootNetworkResult(msg *capnp.Message) (NetworkResult, error) {
	root, err := msg.RootPtr()
	return NetworkResult{root.Struct()}, err
}

func (s NetworkResult) String() string {
	str, _ := text.Marshal(0xefbaa00121a2907b, s.Struct)
	return str
}

func (s NetworkResult) PeerID() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s NetworkResult) HasPeerID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s NetworkResult) PeerIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s NetworkResult) SetPeerID(v string) error {
	return s.Struct.SetText(0, v)
}

func (s NetworkResult) Peers() (Peer_List, error) {
	p, err := s.Struct.Ptr(1)
	return Peer_List{List: p.List()}, err
}

func (s NetworkResult) HasPeers() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s NetworkResult) SetPeers(v Peer_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewPeers sets the peers field to a newly
// allocated Peer_List, preferring placement in s's segment.
func (s NetworkResult) NewPeers(n int32) (Peer_List, error) {
	l, err := NewPeer_List(s.Struct.Segment(), n)
	if err != nil {
		return Peer_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// NetworkResult_List is a list of NetworkResult.
type NetworkResult_List struct{ capnp.List }

// NewNetworkResult creates a new list of NetworkResult.
func NewNetworkResult_List(s *capnp.Segment, sz int32) (NetworkResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return NetworkResult_List{l}, err
}

func (s NetworkResult_List) At(i int) NetworkResult { return NetworkResult{s.List.Struct(i)} }

func (s NetworkResult_List) Set(i int, v NetworkResult) error { return s.List.SetStruct(i, v.Struct) }

func (s NetworkResult_List) String() string {
	str, _ := text.MarshalList(0xefbaa00121a2907b, s.List)
	return str
}

// NetworkResult_Promise is a wrapper for a NetworkResult promised by a client call.
type NetworkResult_Promise struct{ *capnp.Pipeline }

func (p NetworkResult_Promise) Struct() (NetworkResult, error) {
	s, err := p.Pipeline.Struct()
	return NetworkResult{s}, err
}

type SendTransactionResult struct{ capnp.Struct }

// SendTransactionResult_TypeID is the unique identifier for the type SendTransactionResult.
const SendTransactionResult_TypeID = 0xcfd704b9b2c62a4a

func NewSendTransactionResult(s *capnp.Segment) (SendTransactionResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SendTransactionResult{st}, err
}

func NewRootSendTransactionResult(s *capnp.Segment) (SendTransactionResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SendTransactionResult{st}, err
}

func ReadRootSendTransactionResult(msg *capnp.Message) (SendTransactionResult, error) {
	root, err := msg.RootPtr()
	return SendTransactionResult{root.Struct()}, err
}

func (s SendTransactionResult) String() string {
	str, _ := text.Marshal(0xcfd704b9b2c62a4a, s.Struct)
	return str
}

func (s SendTransactionResult) Status() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s SendTransactionResult) SetStatus(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s SendTransactionResult) Id() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s SendTransactionResult) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SendTransactionResult) SetId(v []byte) error {
	return s.Struct.SetData(0, v)
}

// SendTransactionResult_List is a list of SendTransactionResult.
type SendTransactionResult_List struct{ capnp.List }

// NewSendTransactionResult creates a new list of SendTransactionResult.
func NewSendTransactionResult_List(s *capnp.Segment, sz int32) (SendTransactionResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return SendTransactionResult_List{l}, err
}

func (s SendTransactionResult_List) At(i int) SendTransactionResult {
	return SendTransactionResult{s.List.Struct(i)}
}

func (s SendTransactionResult_List) Set(i int, v SendTransactionResult) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SendTransactionResult_List) String() string {
	str, _ := text.MarshalList(0xcfd704b9b2c62a4a, s.List)
	return str
}

// SendTransactionResult_Promise is a wrapper for a SendTransactionResult promised by a client call.
type SendTransactionResult_Promise struct{ *capnp.Pipeline }

func (p SendTransactionResult_Promise) Struct() (SendTransactionResult, error) {
	s, err := p.Pipeline.Struct()
	return SendTransactionResult{s}, err
}

type ZarbServer struct{ Client capnp.Client }

// ZarbServer_TypeID is the unique identifier for the type ZarbServer.
const ZarbServer_TypeID = 0xf906e2ae0dd37fe4

func (c ZarbServer) GetBlock(ctx context.Context, params func(ZarbServer_getBlock_Params) error, opts ...capnp.CallOption) ZarbServer_getBlock_Results_Promise {
	if c.Client == nil {
		return ZarbServer_getBlock_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      0,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getBlock",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_getBlock_Params{Struct: s}) }
	}
	return ZarbServer_getBlock_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) GetBlockHash(ctx context.Context, params func(ZarbServer_getBlockHash_Params) error, opts ...capnp.CallOption) ZarbServer_getBlockHash_Results_Promise {
	if c.Client == nil {
		return ZarbServer_getBlockHash_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      1,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getBlockHash",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_getBlockHash_Params{Struct: s}) }
	}
	return ZarbServer_getBlockHash_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) GetTransaction(ctx context.Context, params func(ZarbServer_getTransaction_Params) error, opts ...capnp.CallOption) ZarbServer_getTransaction_Results_Promise {
	if c.Client == nil {
		return ZarbServer_getTransaction_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      2,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getTransaction",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_getTransaction_Params{Struct: s}) }
	}
	return ZarbServer_getTransaction_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) GetAccount(ctx context.Context, params func(ZarbServer_getAccount_Params) error, opts ...capnp.CallOption) ZarbServer_getAccount_Results_Promise {
	if c.Client == nil {
		return ZarbServer_getAccount_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      3,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getAccount",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_getAccount_Params{Struct: s}) }
	}
	return ZarbServer_getAccount_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) GetValidator(ctx context.Context, params func(ZarbServer_getValidator_Params) error, opts ...capnp.CallOption) ZarbServer_getValidator_Results_Promise {
	if c.Client == nil {
		return ZarbServer_getValidator_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      4,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getValidator",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_getValidator_Params{Struct: s}) }
	}
	return ZarbServer_getValidator_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) GetBlockchainInfo(ctx context.Context, params func(ZarbServer_getBlockchainInfo_Params) error, opts ...capnp.CallOption) ZarbServer_getBlockchainInfo_Results_Promise {
	if c.Client == nil {
		return ZarbServer_getBlockchainInfo_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      5,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getBlockchainInfo",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_getBlockchainInfo_Params{Struct: s}) }
	}
	return ZarbServer_getBlockchainInfo_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) GetNetworkInfo(ctx context.Context, params func(ZarbServer_getNetworkInfo_Params) error, opts ...capnp.CallOption) ZarbServer_getNetworkInfo_Results_Promise {
	if c.Client == nil {
		return ZarbServer_getNetworkInfo_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      6,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getNetworkInfo",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_getNetworkInfo_Params{Struct: s}) }
	}
	return ZarbServer_getNetworkInfo_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) SendRawTransaction(ctx context.Context, params func(ZarbServer_sendRawTransaction_Params) error, opts ...capnp.CallOption) ZarbServer_sendRawTransaction_Results_Promise {
	if c.Client == nil {
		return ZarbServer_sendRawTransaction_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      7,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "sendRawTransaction",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_sendRawTransaction_Params{Struct: s}) }
	}
	return ZarbServer_sendRawTransaction_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type ZarbServer_Server interface {
	GetBlock(ZarbServer_getBlock) error

	GetBlockHash(ZarbServer_getBlockHash) error

	GetTransaction(ZarbServer_getTransaction) error

	GetAccount(ZarbServer_getAccount) error

	GetValidator(ZarbServer_getValidator) error

	GetBlockchainInfo(ZarbServer_getBlockchainInfo) error

	GetNetworkInfo(ZarbServer_getNetworkInfo) error

	SendRawTransaction(ZarbServer_sendRawTransaction) error
}

func ZarbServer_ServerToClient(s ZarbServer_Server) ZarbServer {
	c, _ := s.(server.Closer)
	return ZarbServer{Client: server.New(ZarbServer_Methods(nil, s), c)}
}

func ZarbServer_Methods(methods []server.Method, s ZarbServer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 8)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      0,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getBlock",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_getBlock{c, opts, ZarbServer_getBlock_Params{Struct: p}, ZarbServer_getBlock_Results{Struct: r}}
			return s.GetBlock(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      1,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getBlockHash",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_getBlockHash{c, opts, ZarbServer_getBlockHash_Params{Struct: p}, ZarbServer_getBlockHash_Results{Struct: r}}
			return s.GetBlockHash(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      2,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getTransaction",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_getTransaction{c, opts, ZarbServer_getTransaction_Params{Struct: p}, ZarbServer_getTransaction_Results{Struct: r}}
			return s.GetTransaction(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      3,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getAccount",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_getAccount{c, opts, ZarbServer_getAccount_Params{Struct: p}, ZarbServer_getAccount_Results{Struct: r}}
			return s.GetAccount(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      4,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getValidator",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_getValidator{c, opts, ZarbServer_getValidator_Params{Struct: p}, ZarbServer_getValidator_Results{Struct: r}}
			return s.GetValidator(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      5,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getBlockchainInfo",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_getBlockchainInfo{c, opts, ZarbServer_getBlockchainInfo_Params{Struct: p}, ZarbServer_getBlockchainInfo_Results{Struct: r}}
			return s.GetBlockchainInfo(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      6,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getNetworkInfo",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_getNetworkInfo{c, opts, ZarbServer_getNetworkInfo_Params{Struct: p}, ZarbServer_getNetworkInfo_Results{Struct: r}}
			return s.GetNetworkInfo(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      7,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "sendRawTransaction",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_sendRawTransaction{c, opts, ZarbServer_sendRawTransaction_Params{Struct: p}, ZarbServer_sendRawTransaction_Results{Struct: r}}
			return s.SendRawTransaction(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// ZarbServer_getBlock holds the arguments for a server call to ZarbServer.getBlock.
type ZarbServer_getBlock struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_getBlock_Params
	Results ZarbServer_getBlock_Results
}

// ZarbServer_getBlockHash holds the arguments for a server call to ZarbServer.getBlockHash.
type ZarbServer_getBlockHash struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_getBlockHash_Params
	Results ZarbServer_getBlockHash_Results
}

// ZarbServer_getTransaction holds the arguments for a server call to ZarbServer.getTransaction.
type ZarbServer_getTransaction struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_getTransaction_Params
	Results ZarbServer_getTransaction_Results
}

// ZarbServer_getAccount holds the arguments for a server call to ZarbServer.getAccount.
type ZarbServer_getAccount struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_getAccount_Params
	Results ZarbServer_getAccount_Results
}

// ZarbServer_getValidator holds the arguments for a server call to ZarbServer.getValidator.
type ZarbServer_getValidator struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_getValidator_Params
	Results ZarbServer_getValidator_Results
}

// ZarbServer_getBlockchainInfo holds the arguments for a server call to ZarbServer.getBlockchainInfo.
type ZarbServer_getBlockchainInfo struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_getBlockchainInfo_Params
	Results ZarbServer_getBlockchainInfo_Results
}

// ZarbServer_getNetworkInfo holds the arguments for a server call to ZarbServer.getNetworkInfo.
type ZarbServer_getNetworkInfo struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_getNetworkInfo_Params
	Results ZarbServer_getNetworkInfo_Results
}

// ZarbServer_sendRawTransaction holds the arguments for a server call to ZarbServer.sendRawTransaction.
type ZarbServer_sendRawTransaction struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_sendRawTransaction_Params
	Results ZarbServer_sendRawTransaction_Results
}

type ZarbServer_getBlock_Params struct{ capnp.Struct }

// ZarbServer_getBlock_Params_TypeID is the unique identifier for the type ZarbServer_getBlock_Params.
const ZarbServer_getBlock_Params_TypeID = 0x8df1c729f8d2ca00

func NewZarbServer_getBlock_Params(s *capnp.Segment) (ZarbServer_getBlock_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZarbServer_getBlock_Params{st}, err
}

func NewRootZarbServer_getBlock_Params(s *capnp.Segment) (ZarbServer_getBlock_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZarbServer_getBlock_Params{st}, err
}

func ReadRootZarbServer_getBlock_Params(msg *capnp.Message) (ZarbServer_getBlock_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getBlock_Params{root.Struct()}, err
}

func (s ZarbServer_getBlock_Params) String() string {
	str, _ := text.Marshal(0x8df1c729f8d2ca00, s.Struct)
	return str
}

func (s ZarbServer_getBlock_Params) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ZarbServer_getBlock_Params) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getBlock_Params) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s ZarbServer_getBlock_Params) Verbosity() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s ZarbServer_getBlock_Params) SetVerbosity(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// ZarbServer_getBlock_Params_List is a list of ZarbServer_getBlock_Params.
type ZarbServer_getBlock_Params_List struct{ capnp.List }

// NewZarbServer_getBlock_Params creates a new list of ZarbServer_getBlock_Params.
func NewZarbServer_getBlock_Params_List(s *capnp.Segment, sz int32) (ZarbServer_getBlock_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ZarbServer_getBlock_Params_List{l}, err
}

func (s ZarbServer_getBlock_Params_List) At(i int) ZarbServer_getBlock_Params {
	return ZarbServer_getBlock_Params{s.List.Struct(i)}
}

func (s ZarbServer_getBlock_Params_List) Set(i int, v ZarbServer_getBlock_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getBlock_Params_List) String() string {
	str, _ := text.MarshalList(0x8df1c729f8d2ca00, s.List)
	return str
}

// ZarbServer_getBlock_Params_Promise is a wrapper for a ZarbServer_getBlock_Params promised by a client call.
type ZarbServer_getBlock_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getBlock_Params_Promise) Struct() (ZarbServer_getBlock_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getBlock_Params{s}, err
}

type ZarbServer_getBlock_Results struct{ capnp.Struct }

// ZarbServer_getBlock_Results_TypeID is the unique identifier for the type ZarbServer_getBlock_Results.
const ZarbServer_getBlock_Results_TypeID = 0xf5e8509c82a71e1c

func NewZarbServer_getBlock_Results(s *capnp.Segment) (ZarbServer_getBlock_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getBlock_Results{st}, err
}

func NewRootZarbServer_getBlock_Results(s *capnp.Segment) (ZarbServer_getBlock_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getBlock_Results{st}, err
}

func ReadRootZarbServer_getBlock_Results(msg *capnp.Message) (ZarbServer_getBlock_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getBlock_Results{root.Struct()}, err
}

func (s ZarbServer_getBlock_Results) String() string {
	str, _ := text.Marshal(0xf5e8509c82a71e1c, s.Struct)
	return str
}

func (s ZarbServer_getBlock_Results) Result() (BlockResult, error) {
	p, err := s.Struct.Ptr(0)
	return BlockResult{Struct: p.Struct()}, err
}

func (s ZarbServer_getBlock_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getBlock_Results) SetResult(v BlockResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated BlockResult struct, preferring placement in s's segment.
func (s ZarbServer_getBlock_Results) NewResult() (BlockResult, error) {
	ss, err := NewBlockResult(s.Struct.Segment())
	if err != nil {
		return BlockResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_getBlock_Results_List is a list of ZarbServer_getBlock_Results.
type ZarbServer_getBlock_Results_List struct{ capnp.List }

// NewZarbServer_getBlock_Results creates a new list of ZarbServer_getBlock_Results.
func NewZarbServer_getBlock_Results_List(s *capnp.Segment, sz int32) (ZarbServer_getBlock_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_getBlock_Results_List{l}, err
}

func (s ZarbServer_getBlock_Results_List) At(i int) ZarbServer_getBlock_Results {
	return ZarbServer_getBlock_Results{s.List.Struct(i)}
}

func (s ZarbServer_getBlock_Results_List) Set(i int, v ZarbServer_getBlock_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getBlock_Results_List) String() string {
	str, _ := text.MarshalList(0xf5e8509c82a71e1c, s.List)
	return str
}

// ZarbServer_getBlock_Results_Promise is a wrapper for a ZarbServer_getBlock_Results promised by a client call.
type ZarbServer_getBlock_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getBlock_Results_Promise) Struct() (ZarbServer_getBlock_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getBlock_Results{s}, err
}

func (p ZarbServer_getBlock_Results_Promise) Result() BlockResult_Promise {
	return BlockResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ZarbServer_getBlockHash_Params struct{ capnp.Struct }

// ZarbServer_getBlockHash_Params_TypeID is the unique identifier for the type ZarbServer_getBlockHash_Params.
const ZarbServer_getBlockHash_Params_TypeID = 0x85252b1ec1c352d2

func NewZarbServer_getBlockHash_Params(s *capnp.Segment) (ZarbServer_getBlockHash_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ZarbServer_getBlockHash_Params{st}, err
}

func NewRootZarbServer_getBlockHash_Params(s *capnp.Segment) (ZarbServer_getBlockHash_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ZarbServer_getBlockHash_Params{st}, err
}

func ReadRootZarbServer_getBlockHash_Params(msg *capnp.Message) (ZarbServer_getBlockHash_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getBlockHash_Params{root.Struct()}, err
}

func (s ZarbServer_getBlockHash_Params) String() string {
	str, _ := text.Marshal(0x85252b1ec1c352d2, s.Struct)
	return str
}

func (s ZarbServer_getBlockHash_Params) Height() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s ZarbServer_getBlockHash_Params) SetHeight(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// ZarbServer_getBlockHash_Params_List is a list of ZarbServer_getBlockHash_Params.
type ZarbServer_getBlockHash_Params_List struct{ capnp.List }

// NewZarbServer_getBlockHash_Params creates a new list of ZarbServer_getBlockHash_Params.
func NewZarbServer_getBlockHash_Params_List(s *capnp.Segment, sz int32) (ZarbServer_getBlockHash_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return ZarbServer_getBlockHash_Params_List{l}, err
}

func (s ZarbServer_getBlockHash_Params_List) At(i int) ZarbServer_getBlockHash_Params {
	return ZarbServer_getBlockHash_Params{s.List.Struct(i)}
}

func (s ZarbServer_getBlockHash_Params_List) Set(i int, v ZarbServer_getBlockHash_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getBlockHash_Params_List) String() string {
	str, _ := text.MarshalList(0x85252b1ec1c352d2, s.List)
	return str
}

// ZarbServer_getBlockHash_Params_Promise is a wrapper for a ZarbServer_getBlockHash_Params promised by a client call.
type ZarbServer_getBlockHash_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getBlockHash_Params_Promise) Struct() (ZarbServer_getBlockHash_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getBlockHash_Params{s}, err
}

type ZarbServer_getBlockHash_Results struct{ capnp.Struct }

// ZarbServer_getBlockHash_Results_TypeID is the unique identifier for the type ZarbServer_getBlockHash_Results.
const ZarbServer_getBlockHash_Results_TypeID = 0x946b1f715eac1308

func NewZarbServer_getBlockHash_Results(s *capnp.Segment) (ZarbServer_getBlockHash_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getBlockHash_Results{st}, err
}

func NewRootZarbServer_getBlockHash_Results(s *capnp.Segment) (ZarbServer_getBlockHash_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getBlockHash_Results{st}, err
}

func ReadRootZarbServer_getBlockHash_Results(msg *capnp.Message) (ZarbServer_getBlockHash_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getBlockHash_Results{root.Struct()}, err
}

func (s ZarbServer_getBlockHash_Results) String() string {
	str, _ := text.Marshal(0x946b1f715eac1308, s.Struct)
	return str
}

func (s ZarbServer_getBlockHash_Results) Result() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ZarbServer_getBlockHash_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getBlockHash_Results) SetResult(v []byte) error {
	return s.Struct.SetData(0, v)
}

// ZarbServer_getBlockHash_Results_List is a list of ZarbServer_getBlockHash_Results.
type ZarbServer_getBlockHash_Results_List struct{ capnp.List }

// NewZarbServer_getBlockHash_Results creates a new list of ZarbServer_getBlockHash_Results.
func NewZarbServer_getBlockHash_Results_List(s *capnp.Segment, sz int32) (ZarbServer_getBlockHash_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_getBlockHash_Results_List{l}, err
}

func (s ZarbServer_getBlockHash_Results_List) At(i int) ZarbServer_getBlockHash_Results {
	return ZarbServer_getBlockHash_Results{s.List.Struct(i)}
}

func (s ZarbServer_getBlockHash_Results_List) Set(i int, v ZarbServer_getBlockHash_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getBlockHash_Results_List) String() string {
	str, _ := text.MarshalList(0x946b1f715eac1308, s.List)
	return str
}

// ZarbServer_getBlockHash_Results_Promise is a wrapper for a ZarbServer_getBlockHash_Results promised by a client call.
type ZarbServer_getBlockHash_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getBlockHash_Results_Promise) Struct() (ZarbServer_getBlockHash_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getBlockHash_Results{s}, err
}

type ZarbServer_getTransaction_Params struct{ capnp.Struct }

// ZarbServer_getTransaction_Params_TypeID is the unique identifier for the type ZarbServer_getTransaction_Params.
const ZarbServer_getTransaction_Params_TypeID = 0xd3df8a6125925ab9

func NewZarbServer_getTransaction_Params(s *capnp.Segment) (ZarbServer_getTransaction_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZarbServer_getTransaction_Params{st}, err
}

func NewRootZarbServer_getTransaction_Params(s *capnp.Segment) (ZarbServer_getTransaction_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZarbServer_getTransaction_Params{st}, err
}

func ReadRootZarbServer_getTransaction_Params(msg *capnp.Message) (ZarbServer_getTransaction_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getTransaction_Params{root.Struct()}, err
}

func (s ZarbServer_getTransaction_Params) String() string {
	str, _ := text.Marshal(0xd3df8a6125925ab9, s.Struct)
	return str
}

func (s ZarbServer_getTransaction_Params) Id() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ZarbServer_getTransaction_Params) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getTransaction_Params) SetId(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s ZarbServer_getTransaction_Params) Verbosity() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s ZarbServer_getTransaction_Params) SetVerbosity(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// ZarbServer_getTransaction_Params_List is a list of ZarbServer_getTransaction_Params.
type ZarbServer_getTransaction_Params_List struct{ capnp.List }

// NewZarbServer_getTransaction_Params creates a new list of ZarbServer_getTransaction_Params.
func NewZarbServer_getTransaction_Params_List(s *capnp.Segment, sz int32) (ZarbServer_getTransaction_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ZarbServer_getTransaction_Params_List{l}, err
}

func (s ZarbServer_getTransaction_Params_List) At(i int) ZarbServer_getTransaction_Params {
	return ZarbServer_getTransaction_Params{s.List.Struct(i)}
}

func (s ZarbServer_getTransaction_Params_List) Set(i int, v ZarbServer_getTransaction_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getTransaction_Params_List) String() string {
	str, _ := text.MarshalList(0xd3df8a6125925ab9, s.List)
	return str
}

// ZarbServer_getTransaction_Params_Promise is a wrapper for a ZarbServer_getTransaction_Params promised by a client call.
type ZarbServer_getTransaction_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getTransaction_Params_Promise) Struct() (ZarbServer_getTransaction_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getTransaction_Params{s}, err
}

type ZarbServer_getTransaction_Results struct{ capnp.Struct }

// ZarbServer_getTransaction_Results_TypeID is the unique identifier for the type ZarbServer_getTransaction_Results.
const ZarbServer_getTransaction_Results_TypeID = 0xa2b1016cefab775b

func NewZarbServer_getTransaction_Results(s *capnp.Segment) (ZarbServer_getTransaction_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getTransaction_Results{st}, err
}

func NewRootZarbServer_getTransaction_Results(s *capnp.Segment) (ZarbServer_getTransaction_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getTransaction_Results{st}, err
}

func ReadRootZarbServer_getTransaction_Results(msg *capnp.Message) (ZarbServer_getTransaction_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getTransaction_Results{root.Struct()}, err
}

func (s ZarbServer_getTransaction_Results) String() string {
	str, _ := text.Marshal(0xa2b1016cefab775b, s.Struct)
	return str
}

func (s ZarbServer_getTransaction_Results) Result() (TransactionResult, error) {
	p, err := s.Struct.Ptr(0)
	return TransactionResult{Struct: p.Struct()}, err
}

func (s ZarbServer_getTransaction_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getTransaction_Results) SetResult(v TransactionResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated TransactionResult struct, preferring placement in s's segment.
func (s ZarbServer_getTransaction_Results) NewResult() (TransactionResult, error) {
	ss, err := NewTransactionResult(s.Struct.Segment())
	if err != nil {
		return TransactionResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_getTransaction_Results_List is a list of ZarbServer_getTransaction_Results.
type ZarbServer_getTransaction_Results_List struct{ capnp.List }

// NewZarbServer_getTransaction_Results creates a new list of ZarbServer_getTransaction_Results.
func NewZarbServer_getTransaction_Results_List(s *capnp.Segment, sz int32) (ZarbServer_getTransaction_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_getTransaction_Results_List{l}, err
}

func (s ZarbServer_getTransaction_Results_List) At(i int) ZarbServer_getTransaction_Results {
	return ZarbServer_getTransaction_Results{s.List.Struct(i)}
}

func (s ZarbServer_getTransaction_Results_List) Set(i int, v ZarbServer_getTransaction_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getTransaction_Results_List) String() string {
	str, _ := text.MarshalList(0xa2b1016cefab775b, s.List)
	return str
}

// ZarbServer_getTransaction_Results_Promise is a wrapper for a ZarbServer_getTransaction_Results promised by a client call.
type ZarbServer_getTransaction_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getTransaction_Results_Promise) Struct() (ZarbServer_getTransaction_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getTransaction_Results{s}, err
}

func (p ZarbServer_getTransaction_Results_Promise) Result() TransactionResult_Promise {
	return TransactionResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ZarbServer_getAccount_Params struct{ capnp.Struct }

// ZarbServer_getAccount_Params_TypeID is the unique identifier for the type ZarbServer_getAccount_Params.
const ZarbServer_getAccount_Params_TypeID = 0xcd6c734787642800

func NewZarbServer_getAccount_Params(s *capnp.Segment) (ZarbServer_getAccount_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZarbServer_getAccount_Params{st}, err
}

func NewRootZarbServer_getAccount_Params(s *capnp.Segment) (ZarbServer_getAccount_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZarbServer_getAccount_Params{st}, err
}

func ReadRootZarbServer_getAccount_Params(msg *capnp.Message) (ZarbServer_getAccount_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getAccount_Params{root.Struct()}, err
}

func (s ZarbServer_getAccount_Params) String() string {
	str, _ := text.Marshal(0xcd6c734787642800, s.Struct)
	return str
}

func (s ZarbServer_getAccount_Params) Address() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ZarbServer_getAccount_Params) HasAddress() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getAccount_Params) SetAddress(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s ZarbServer_getAccount_Params) Verbosity() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s ZarbServer_getAccount_Params) SetVerbosity(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// ZarbServer_getAccount_Params_List is a list of ZarbServer_getAccount_Params.
type ZarbServer_getAccount_Params_List struct{ capnp.List }

// NewZarbServer_getAccount_Params creates a new list of ZarbServer_getAccount_Params.
func NewZarbServer_getAccount_Params_List(s *capnp.Segment, sz int32) (ZarbServer_getAccount_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ZarbServer_getAccount_Params_List{l}, err
}

func (s ZarbServer_getAccount_Params_List) At(i int) ZarbServer_getAccount_Params {
	return ZarbServer_getAccount_Params{s.List.Struct(i)}
}

func (s ZarbServer_getAccount_Params_List) Set(i int, v ZarbServer_getAccount_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getAccount_Params_List) String() string {
	str, _ := text.MarshalList(0xcd6c734787642800, s.List)
	return str
}

// ZarbServer_getAccount_Params_Promise is a wrapper for a ZarbServer_getAccount_Params promised by a client call.
type ZarbServer_getAccount_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getAccount_Params_Promise) Struct() (ZarbServer_getAccount_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getAccount_Params{s}, err
}

type ZarbServer_getAccount_Results struct{ capnp.Struct }

// ZarbServer_getAccount_Results_TypeID is the unique identifier for the type ZarbServer_getAccount_Results.
const ZarbServer_getAccount_Results_TypeID = 0x8e979661cc6a1161

func NewZarbServer_getAccount_Results(s *capnp.Segment) (ZarbServer_getAccount_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getAccount_Results{st}, err
}

func NewRootZarbServer_getAccount_Results(s *capnp.Segment) (ZarbServer_getAccount_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getAccount_Results{st}, err
}

func ReadRootZarbServer_getAccount_Results(msg *capnp.Message) (ZarbServer_getAccount_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getAccount_Results{root.Struct()}, err
}

func (s ZarbServer_getAccount_Results) String() string {
	str, _ := text.Marshal(0x8e979661cc6a1161, s.Struct)
	return str
}

func (s ZarbServer_getAccount_Results) Result() (AccountResult, error) {
	p, err := s.Struct.Ptr(0)
	return AccountResult{Struct: p.Struct()}, err
}

func (s ZarbServer_getAccount_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getAccount_Results) SetResult(v AccountResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated AccountResult struct, preferring placement in s's segment.
func (s ZarbServer_getAccount_Results) NewResult() (AccountResult, error) {
	ss, err := NewAccountResult(s.Struct.Segment())
	if err != nil {
		return AccountResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_getAccount_Results_List is a list of ZarbServer_getAccount_Results.
type ZarbServer_getAccount_Results_List struct{ capnp.List }

// NewZarbServer_getAccount_Results creates a new list of ZarbServer_getAccount_Results.
func NewZarbServer_getAccount_Results_List(s *capnp.Segment, sz int32) (ZarbServer_getAccount_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_getAccount_Results_List{l}, err
}

func (s ZarbServer_getAccount_Results_List) At(i int) ZarbServer_getAccount_Results {
	return ZarbServer_getAccount_Results{s.List.Struct(i)}
}

func (s ZarbServer_getAccount_Results_List) Set(i int, v ZarbServer_getAccount_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getAccount_Results_List) String() string {
	str, _ := text.MarshalList(0x8e979661cc6a1161, s.List)
	return str
}

// ZarbServer_getAccount_Results_Promise is a wrapper for a ZarbServer_getAccount_Results promised by a client call.
type ZarbServer_getAccount_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getAccount_Results_Promise) Struct() (ZarbServer_getAccount_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getAccount_Results{s}, err
}

func (p ZarbServer_getAccount_Results_Promise) Result() AccountResult_Promise {
	return AccountResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ZarbServer_getValidator_Params struct{ capnp.Struct }

// ZarbServer_getValidator_Params_TypeID is the unique identifier for the type ZarbServer_getValidator_Params.
const ZarbServer_getValidator_Params_TypeID = 0xeed94cf76be61d8e

func NewZarbServer_getValidator_Params(s *capnp.Segment) (ZarbServer_getValidator_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZarbServer_getValidator_Params{st}, err
}

func NewRootZarbServer_getValidator_Params(s *capnp.Segment) (ZarbServer_getValidator_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZarbServer_getValidator_Params{st}, err
}

func ReadRootZarbServer_getValidator_Params(msg *capnp.Message) (ZarbServer_getValidator_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getValidator_Params{root.Struct()}, err
}

func (s ZarbServer_getValidator_Params) String() string {
	str, _ := text.Marshal(0xeed94cf76be61d8e, s.Struct)
	return str
}

func (s ZarbServer_getValidator_Params) Address() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ZarbServer_getValidator_Params) HasAddress() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getValidator_Params) SetAddress(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s ZarbServer_getValidator_Params) Verbosity() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s ZarbServer_getValidator_Params) SetVerbosity(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// ZarbServer_getValidator_Params_List is a list of ZarbServer_getValidator_Params.
type ZarbServer_getValidator_Params_List struct{ capnp.List }

// NewZarbServer_getValidator_Params creates a new list of ZarbServer_getValidator_Params.
func NewZarbServer_getValidator_Params_List(s *capnp.Segment, sz int32) (ZarbServer_getValidator_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ZarbServer_getValidator_Params_List{l}, err
}

func (s ZarbServer_getValidator_Params_List) At(i int) ZarbServer_getValidator_Params {
	return ZarbServer_getValidator_Params{s.List.Struct(i)}
}

func (s ZarbServer_getValidator_Params_List) Set(i int, v ZarbServer_getValidator_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getValidator_Params_List) String() string {
	str, _ := text.MarshalList(0xeed94cf76be61d8e, s.List)
	return str
}

// ZarbServer_getValidator_Params_Promise is a wrapper for a ZarbServer_getValidator_Params promised by a client call.
type ZarbServer_getValidator_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getValidator_Params_Promise) Struct() (ZarbServer_getValidator_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getValidator_Params{s}, err
}

type ZarbServer_getValidator_Results struct{ capnp.Struct }

// ZarbServer_getValidator_Results_TypeID is the unique identifier for the type ZarbServer_getValidator_Results.
const ZarbServer_getValidator_Results_TypeID = 0xfb42d1f26b074c15

func NewZarbServer_getValidator_Results(s *capnp.Segment) (ZarbServer_getValidator_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getValidator_Results{st}, err
}

func NewRootZarbServer_getValidator_Results(s *capnp.Segment) (ZarbServer_getValidator_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getValidator_Results{st}, err
}

func ReadRootZarbServer_getValidator_Results(msg *capnp.Message) (ZarbServer_getValidator_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getValidator_Results{root.Struct()}, err
}

func (s ZarbServer_getValidator_Results) String() string {
	str, _ := text.Marshal(0xfb42d1f26b074c15, s.Struct)
	return str
}

func (s ZarbServer_getValidator_Results) Result() (ValidatorResult, error) {
	p, err := s.Struct.Ptr(0)
	return ValidatorResult{Struct: p.Struct()}, err
}

func (s ZarbServer_getValidator_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getValidator_Results) SetResult(v ValidatorResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated ValidatorResult struct, preferring placement in s's segment.
func (s ZarbServer_getValidator_Results) NewResult() (ValidatorResult, error) {
	ss, err := NewValidatorResult(s.Struct.Segment())
	if err != nil {
		return ValidatorResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_getValidator_Results_List is a list of ZarbServer_getValidator_Results.
type ZarbServer_getValidator_Results_List struct{ capnp.List }

// NewZarbServer_getValidator_Results creates a new list of ZarbServer_getValidator_Results.
func NewZarbServer_getValidator_Results_List(s *capnp.Segment, sz int32) (ZarbServer_getValidator_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_getValidator_Results_List{l}, err
}

func (s ZarbServer_getValidator_Results_List) At(i int) ZarbServer_getValidator_Results {
	return ZarbServer_getValidator_Results{s.List.Struct(i)}
}

func (s ZarbServer_getValidator_Results_List) Set(i int, v ZarbServer_getValidator_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getValidator_Results_List) String() string {
	str, _ := text.MarshalList(0xfb42d1f26b074c15, s.List)
	return str
}

// ZarbServer_getValidator_Results_Promise is a wrapper for a ZarbServer_getValidator_Results promised by a client call.
type ZarbServer_getValidator_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getValidator_Results_Promise) Struct() (ZarbServer_getValidator_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getValidator_Results{s}, err
}

func (p ZarbServer_getValidator_Results_Promise) Result() ValidatorResult_Promise {
	return ValidatorResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ZarbServer_getBlockchainInfo_Params struct{ capnp.Struct }

// ZarbServer_getBlockchainInfo_Params_TypeID is the unique identifier for the type ZarbServer_getBlockchainInfo_Params.
const ZarbServer_getBlockchainInfo_Params_TypeID = 0x8fb41d4bd35c5a30

func NewZarbServer_getBlockchainInfo_Params(s *capnp.Segment) (ZarbServer_getBlockchainInfo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ZarbServer_getBlockchainInfo_Params{st}, err
}

func NewRootZarbServer_getBlockchainInfo_Params(s *capnp.Segment) (ZarbServer_getBlockchainInfo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ZarbServer_getBlockchainInfo_Params{st}, err
}

func ReadRootZarbServer_getBlockchainInfo_Params(msg *capnp.Message) (ZarbServer_getBlockchainInfo_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getBlockchainInfo_Params{root.Struct()}, err
}

func (s ZarbServer_getBlockchainInfo_Params) String() string {
	str, _ := text.Marshal(0x8fb41d4bd35c5a30, s.Struct)
	return str
}

// ZarbServer_getBlockchainInfo_Params_List is a list of ZarbServer_getBlockchainInfo_Params.
type ZarbServer_getBlockchainInfo_Params_List struct{ capnp.List }

// NewZarbServer_getBlockchainInfo_Params creates a new list of ZarbServer_getBlockchainInfo_Params.
func NewZarbServer_getBlockchainInfo_Params_List(s *capnp.Segment, sz int32) (ZarbServer_getBlockchainInfo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return ZarbServer_getBlockchainInfo_Params_List{l}, err
}

func (s ZarbServer_getBlockchainInfo_Params_List) At(i int) ZarbServer_getBlockchainInfo_Params {
	return ZarbServer_getBlockchainInfo_Params{s.List.Struct(i)}
}

func (s ZarbServer_getBlockchainInfo_Params_List) Set(i int, v ZarbServer_getBlockchainInfo_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getBlockchainInfo_Params_List) String() string {
	str, _ := text.MarshalList(0x8fb41d4bd35c5a30, s.List)
	return str
}

// ZarbServer_getBlockchainInfo_Params_Promise is a wrapper for a ZarbServer_getBlockchainInfo_Params promised by a client call.
type ZarbServer_getBlockchainInfo_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getBlockchainInfo_Params_Promise) Struct() (ZarbServer_getBlockchainInfo_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getBlockchainInfo_Params{s}, err
}

type ZarbServer_getBlockchainInfo_Results struct{ capnp.Struct }

// ZarbServer_getBlockchainInfo_Results_TypeID is the unique identifier for the type ZarbServer_getBlockchainInfo_Results.
const ZarbServer_getBlockchainInfo_Results_TypeID = 0xa128fe760c2612c4

func NewZarbServer_getBlockchainInfo_Results(s *capnp.Segment) (ZarbServer_getBlockchainInfo_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getBlockchainInfo_Results{st}, err
}

func NewRootZarbServer_getBlockchainInfo_Results(s *capnp.Segment) (ZarbServer_getBlockchainInfo_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getBlockchainInfo_Results{st}, err
}

func ReadRootZarbServer_getBlockchainInfo_Results(msg *capnp.Message) (ZarbServer_getBlockchainInfo_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getBlockchainInfo_Results{root.Struct()}, err
}

func (s ZarbServer_getBlockchainInfo_Results) String() string {
	str, _ := text.Marshal(0xa128fe760c2612c4, s.Struct)
	return str
}

func (s ZarbServer_getBlockchainInfo_Results) Result() (BlockchainResult, error) {
	p, err := s.Struct.Ptr(0)
	return BlockchainResult{Struct: p.Struct()}, err
}

func (s ZarbServer_getBlockchainInfo_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getBlockchainInfo_Results) SetResult(v BlockchainResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated BlockchainResult struct, preferring placement in s's segment.
func (s ZarbServer_getBlockchainInfo_Results) NewResult() (BlockchainResult, error) {
	ss, err := NewBlockchainResult(s.Struct.Segment())
	if err != nil {
		return BlockchainResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_getBlockchainInfo_Results_List is a list of ZarbServer_getBlockchainInfo_Results.
type ZarbServer_getBlockchainInfo_Results_List struct{ capnp.List }

// NewZarbServer_getBlockchainInfo_Results creates a new list of ZarbServer_getBlockchainInfo_Results.
func NewZarbServer_getBlockchainInfo_Results_List(s *capnp.Segment, sz int32) (ZarbServer_getBlockchainInfo_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_getBlockchainInfo_Results_List{l}, err
}

func (s ZarbServer_getBlockchainInfo_Results_List) At(i int) ZarbServer_getBlockchainInfo_Results {
	return ZarbServer_getBlockchainInfo_Results{s.List.Struct(i)}
}

func (s ZarbServer_getBlockchainInfo_Results_List) Set(i int, v ZarbServer_getBlockchainInfo_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getBlockchainInfo_Results_List) String() string {
	str, _ := text.MarshalList(0xa128fe760c2612c4, s.List)
	return str
}

// ZarbServer_getBlockchainInfo_Results_Promise is a wrapper for a ZarbServer_getBlockchainInfo_Results promised by a client call.
type ZarbServer_getBlockchainInfo_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getBlockchainInfo_Results_Promise) Struct() (ZarbServer_getBlockchainInfo_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getBlockchainInfo_Results{s}, err
}

func (p ZarbServer_getBlockchainInfo_Results_Promise) Result() BlockchainResult_Promise {
	return BlockchainResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ZarbServer_getNetworkInfo_Params struct{ capnp.Struct }

// ZarbServer_getNetworkInfo_Params_TypeID is the unique identifier for the type ZarbServer_getNetworkInfo_Params.
const ZarbServer_getNetworkInfo_Params_TypeID = 0xe051a47070c97f9e

func NewZarbServer_getNetworkInfo_Params(s *capnp.Segment) (ZarbServer_getNetworkInfo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ZarbServer_getNetworkInfo_Params{st}, err
}

func NewRootZarbServer_getNetworkInfo_Params(s *capnp.Segment) (ZarbServer_getNetworkInfo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ZarbServer_getNetworkInfo_Params{st}, err
}

func ReadRootZarbServer_getNetworkInfo_Params(msg *capnp.Message) (ZarbServer_getNetworkInfo_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getNetworkInfo_Params{root.Struct()}, err
}

func (s ZarbServer_getNetworkInfo_Params) String() string {
	str, _ := text.Marshal(0xe051a47070c97f9e, s.Struct)
	return str
}

// ZarbServer_getNetworkInfo_Params_List is a list of ZarbServer_getNetworkInfo_Params.
type ZarbServer_getNetworkInfo_Params_List struct{ capnp.List }

// NewZarbServer_getNetworkInfo_Params creates a new list of ZarbServer_getNetworkInfo_Params.
func NewZarbServer_getNetworkInfo_Params_List(s *capnp.Segment, sz int32) (ZarbServer_getNetworkInfo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return ZarbServer_getNetworkInfo_Params_List{l}, err
}

func (s ZarbServer_getNetworkInfo_Params_List) At(i int) ZarbServer_getNetworkInfo_Params {
	return ZarbServer_getNetworkInfo_Params{s.List.Struct(i)}
}

func (s ZarbServer_getNetworkInfo_Params_List) Set(i int, v ZarbServer_getNetworkInfo_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getNetworkInfo_Params_List) String() string {
	str, _ := text.MarshalList(0xe051a47070c97f9e, s.List)
	return str
}

// ZarbServer_getNetworkInfo_Params_Promise is a wrapper for a ZarbServer_getNetworkInfo_Params promised by a client call.
type ZarbServer_getNetworkInfo_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getNetworkInfo_Params_Promise) Struct() (ZarbServer_getNetworkInfo_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getNetworkInfo_Params{s}, err
}

type ZarbServer_getNetworkInfo_Results struct{ capnp.Struct }

// ZarbServer_getNetworkInfo_Results_TypeID is the unique identifier for the type ZarbServer_getNetworkInfo_Results.
const ZarbServer_getNetworkInfo_Results_TypeID = 0x8d7ad02d9eab8fb7

func NewZarbServer_getNetworkInfo_Results(s *capnp.Segment) (ZarbServer_getNetworkInfo_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getNetworkInfo_Results{st}, err
}

func NewRootZarbServer_getNetworkInfo_Results(s *capnp.Segment) (ZarbServer_getNetworkInfo_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getNetworkInfo_Results{st}, err
}

func ReadRootZarbServer_getNetworkInfo_Results(msg *capnp.Message) (ZarbServer_getNetworkInfo_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getNetworkInfo_Results{root.Struct()}, err
}

func (s ZarbServer_getNetworkInfo_Results) String() string {
	str, _ := text.Marshal(0x8d7ad02d9eab8fb7, s.Struct)
	return str
}

func (s ZarbServer_getNetworkInfo_Results) Result() (NetworkResult, error) {
	p, err := s.Struct.Ptr(0)
	return NetworkResult{Struct: p.Struct()}, err
}

func (s ZarbServer_getNetworkInfo_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getNetworkInfo_Results) SetResult(v NetworkResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated NetworkResult struct, preferring placement in s's segment.
func (s ZarbServer_getNetworkInfo_Results) NewResult() (NetworkResult, error) {
	ss, err := NewNetworkResult(s.Struct.Segment())
	if err != nil {
		return NetworkResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_getNetworkInfo_Results_List is a list of ZarbServer_getNetworkInfo_Results.
type ZarbServer_getNetworkInfo_Results_List struct{ capnp.List }

// NewZarbServer_getNetworkInfo_Results creates a new list of ZarbServer_getNetworkInfo_Results.
func NewZarbServer_getNetworkInfo_Results_List(s *capnp.Segment, sz int32) (ZarbServer_getNetworkInfo_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_getNetworkInfo_Results_List{l}, err
}

func (s ZarbServer_getNetworkInfo_Results_List) At(i int) ZarbServer_getNetworkInfo_Results {
	return ZarbServer_getNetworkInfo_Results{s.List.Struct(i)}
}

func (s ZarbServer_getNetworkInfo_Results_List) Set(i int, v ZarbServer_getNetworkInfo_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getNetworkInfo_Results_List) String() string {
	str, _ := text.MarshalList(0x8d7ad02d9eab8fb7, s.List)
	return str
}

// ZarbServer_getNetworkInfo_Results_Promise is a wrapper for a ZarbServer_getNetworkInfo_Results promised by a client call.
type ZarbServer_getNetworkInfo_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getNetworkInfo_Results_Promise) Struct() (ZarbServer_getNetworkInfo_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getNetworkInfo_Results{s}, err
}

func (p ZarbServer_getNetworkInfo_Results_Promise) Result() NetworkResult_Promise {
	return NetworkResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ZarbServer_sendRawTransaction_Params struct{ capnp.Struct }

// ZarbServer_sendRawTransaction_Params_TypeID is the unique identifier for the type ZarbServer_sendRawTransaction_Params.
const ZarbServer_sendRawTransaction_Params_TypeID = 0x8317eae56a55f0ba

func NewZarbServer_sendRawTransaction_Params(s *capnp.Segment) (ZarbServer_sendRawTransaction_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_sendRawTransaction_Params{st}, err
}

func NewRootZarbServer_sendRawTransaction_Params(s *capnp.Segment) (ZarbServer_sendRawTransaction_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_sendRawTransaction_Params{st}, err
}

func ReadRootZarbServer_sendRawTransaction_Params(msg *capnp.Message) (ZarbServer_sendRawTransaction_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_sendRawTransaction_Params{root.Struct()}, err
}

func (s ZarbServer_sendRawTransaction_Params) String() string {
	str, _ := text.Marshal(0x8317eae56a55f0ba, s.Struct)
	return str
}

func (s ZarbServer_sendRawTransaction_Params) RawTx() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ZarbServer_sendRawTransaction_Params) HasRawTx() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_sendRawTransaction_Params) SetRawTx(v []byte) error {
	return s.Struct.SetData(0, v)
}

// ZarbServer_sendRawTransaction_Params_List is a list of ZarbServer_sendRawTransaction_Params.
type ZarbServer_sendRawTransaction_Params_List struct{ capnp.List }

// NewZarbServer_sendRawTransaction_Params creates a new list of ZarbServer_sendRawTransaction_Params.
func NewZarbServer_sendRawTransaction_Params_List(s *capnp.Segment, sz int32) (ZarbServer_sendRawTransaction_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_sendRawTransaction_Params_List{l}, err
}

func (s ZarbServer_sendRawTransaction_Params_List) At(i int) ZarbServer_sendRawTransaction_Params {
	return ZarbServer_sendRawTransaction_Params{s.List.Struct(i)}
}

func (s ZarbServer_sendRawTransaction_Params_List) Set(i int, v ZarbServer_sendRawTransaction_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_sendRawTransaction_Params_List) String() string {
	str, _ := text.MarshalList(0x8317eae56a55f0ba, s.List)
	return str
}

// ZarbServer_sendRawTransaction_Params_Promise is a wrapper for a ZarbServer_sendRawTransaction_Params promised by a client call.
type ZarbServer_sendRawTransaction_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_sendRawTransaction_Params_Promise) Struct() (ZarbServer_sendRawTransaction_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_sendRawTransaction_Params{s}, err
}

type ZarbServer_sendRawTransaction_Results struct{ capnp.Struct }

// ZarbServer_sendRawTransaction_Results_TypeID is the unique identifier for the type ZarbServer_sendRawTransaction_Results.
const ZarbServer_sendRawTransaction_Results_TypeID = 0xc0689e5f33bf949d

func NewZarbServer_sendRawTransaction_Results(s *capnp.Segment) (ZarbServer_sendRawTransaction_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_sendRawTransaction_Results{st}, err
}

func NewRootZarbServer_sendRawTransaction_Results(s *capnp.Segment) (ZarbServer_sendRawTransaction_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_sendRawTransaction_Results{st}, err
}

func ReadRootZarbServer_sendRawTransaction_Results(msg *capnp.Message) (ZarbServer_sendRawTransaction_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_sendRawTransaction_Results{root.Struct()}, err
}

func (s ZarbServer_sendRawTransaction_Results) String() string {
	str, _ := text.Marshal(0xc0689e5f33bf949d, s.Struct)
	return str
}

func (s ZarbServer_sendRawTransaction_Results) Result() (SendTransactionResult, error) {
	p, err := s.Struct.Ptr(0)
	return SendTransactionResult{Struct: p.Struct()}, err
}

func (s ZarbServer_sendRawTransaction_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_sendRawTransaction_Results) SetResult(v SendTransactionResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated SendTransactionResult struct, preferring placement in s's segment.
func (s ZarbServer_sendRawTransaction_Results) NewResult() (SendTransactionResult, error) {
	ss, err := NewSendTransactionResult(s.Struct.Segment())
	if err != nil {
		return SendTransactionResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_sendRawTransaction_Results_List is a list of ZarbServer_sendRawTransaction_Results.
type ZarbServer_sendRawTransaction_Results_List struct{ capnp.List }

// NewZarbServer_sendRawTransaction_Results creates a new list of ZarbServer_sendRawTransaction_Results.
func NewZarbServer_sendRawTransaction_Results_List(s *capnp.Segment, sz int32) (ZarbServer_sendRawTransaction_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_sendRawTransaction_Results_List{l}, err
}

func (s ZarbServer_sendRawTransaction_Results_List) At(i int) ZarbServer_sendRawTransaction_Results {
	return ZarbServer_sendRawTransaction_Results{s.List.Struct(i)}
}

func (s ZarbServer_sendRawTransaction_Results_List) Set(i int, v ZarbServer_sendRawTransaction_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_sendRawTransaction_Results_List) String() string {
	str, _ := text.MarshalList(0xc0689e5f33bf949d, s.List)
	return str
}

// ZarbServer_sendRawTransaction_Results_Promise is a wrapper for a ZarbServer_sendRawTransaction_Results promised by a client call.
type ZarbServer_sendRawTransaction_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_sendRawTransaction_Results_Promise) Struct() (ZarbServer_sendRawTransaction_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_sendRawTransaction_Results{s}, err
}

func (p ZarbServer_sendRawTransaction_Results_Promise) Result() SendTransactionResult_Promise {
	return SendTransactionResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_84b56bd0975dfd33 = "x\xda\xb4X}pTW\x15?\xe7\xdd\xfdJH\xb2" +
	"\xfbx\x9b)2\xd0\x05\x07\x1c@\xd2B\xd2N\xdbL" +
	"\xeb\xa6\x11k\xa0D\xf3v\xf1+V\xed\xcb\xee%\xfb" +
	"\xd8\xcd\xee\xfa\xdeK\xd2\xa2\x9dh*\xa3E\xa1\x0e\x82" +
	"\x85\x8ee\x08\xadSiK+X\xb4ad4c\xd1" +
	"\xa1#S>\xa6\xe3\xd8i\xab\xed\xa8\xfd\x18\xb5E\xc7" +
	"Q\xc6\x81u\xce\xdd}\x1f\xbb\xf9 \xc1\xe9\x7f\xfb\xce" +
	"=\xfb;\x1f\xf7w\xce\xb9\xf7\xae9\xeb\xef\x90\xd6\xfa" +
	"\x1f\xaf\x03P\x8b\xfe@\xe9\xad\x8b\xdf\xf9\\ \x1e\xbd" +
	"\x1f\xe4f,\xb5]\xfa\xc2Cg\xb2\xc7\xbe\x01~_" +
	"\x10\xa0m\xdcW\x8f\xca)\xfa\xa9\x9c\xf4\xbd\x09X:" +
	"\xfe\xde\xa7\xb6\xfc\xf9\x9dk\xee\x07y\x09\x02\xf8\x91\x94" +
	"\xf6\xf9\xcf!\xa0r\xd8\x1f\x07,\x9dK\xfcj\xe2\xda" +
	"\x0f/\xdf\x06\xea\x12D\x00\x81r\xda\x7f\x90\x14^\x15" +
	"\x0a?{\xf0\xc9\xfd-g\xb6\xee\xf0\"\\\xf2\x1f'" +
	"\x85\xc6@\x1c\xf0\xf2\x0b\xe7\xfe\xb3\xf27\x17v\x94\xff" +
	"_^o\x09\x8c\xd2\xfa-\x81a\xc0\x92&o\xf9\xad" +
	"\xf6\xfd\x87vV\xb9\x10x\x98\x14\x0e\x11@\xe9\xbd'" +
	"\xf6\x8e\x1c{\xe5\xb5\x9d\xa06cmD\xca\xa9\xc0\x1b" +
	"\xcaK\x01\xfa\xcf\xd9\xc0g\x10\xb0\xb4\xa6\xf7\xae\xf3w" +
	".~\xf6\xc12\x9c\xf0\xb7%\xf4\x02\x82\xaf\x14R\x9e" +
	"\xfa\xe2\x97c\xd9\xdd^CKCO\x90\xa1\xb5!2" +
	"\xf4\xfc\xfc\x0f5\x0c]^1\xe6UPC\"\x19\\" +
	"(|~\xf8\xc9wsx\xe4\xa0Wa[H\xc4\xba" +
	"G(\\\xd3S\xff\x91W\xbaO<Z\x93{\xa1x" +
	",\xb4\x10\x95\x93!rzB(\xafk\x18)\\\xfa" +
	"\xde?\x9f\xabQf\xa4\xf1z\xe8e\xe5oB\xf7\xed" +
	"\xd03\x80\xa5\xccO/G\x17\xdd4|b\x0a\xdd\xb6" +
	"=u\xed\xa8\xfc\xb0\x8e\x94\xc7\xeaH\xf9Pv\xf4'" +
	"\xef\x9c\xf9\xd6\x89\xda\x84\x097n\xaboE\xa5\xbb\x9e" +
	"\xb4\xd7\xd7S\xfe\x1f\xd9\xfd\x8b\xb6/\xed\xcf\xfc\xd2\x1b" +
	"\xd4\xe1\xfa\x97)\xa8\x89z\xda\xc0\x15\xe9o~\xdc\xcc" +
	"\x9d\xf6n\xe0\xeb\xf5\xbbh\xfd\x82\x00\xd8\xb0\xea\xd7G" +
	"\xc7}\xbf{qJs\xea\xbc^T\xf8<2\xa7\xcd" +
	"#\xed\xf1\xde]\xcb\xb5\xed\x7f8\x0f^\xbc\x13\xf3\x8e" +
	"\x12\xdei\xa1\x11\xf7\x7fr\xf0\xcd\x17\xc7_#<V" +
	"\xbb\xdf-\x0d\xe7\x94[\x1a\xe8?76\xdc$\x01\x96" +
	"\xf6\x8f\x9c*\x16\x1fS\xff\xe8\xd9\xefmMGi\xbf" +
	"\x1f-}\xfb\xe9\x1d\xa3\x8b\xfe:\xd5f\x0c6\xadB" +
	"e[\x13!~\xbd\x896c\xe7\xe2\xbfd\xff\xbd\xf1" +
	"\xf7\x7f\xafrk\xacI\x10\xfdH\x13\xb9\xf5\x95\xef\x1e" +
	"\\\x8a\x07\x8e\xbf[\x03'\x91\xa2\x1c^\x88\xca\xd20" +
	"\xc1-\x0e\x93\xf2\xa2k\x1f\x1f\xfdA\xcf[\xff\xf2&" +
	"\xf5\x81\xf0vB\xdb\x17&{\x7f\x1a9\xdf\xf8\xf4\x1b" +
	"\x81\x8b 7{b\x04l\x1b\x0fK\xa8\x9c$\xa8\xb6" +
	"\x89pPRV\xcaA\x80\xd2\xbc\xe6\xbb\xf7<s\xc7" +
	"\x1d\x17ks,\x08 \xcb\xf5\xa8,\x95\x85u\x99\xaa" +
	"\xbayc0\xfb\x8f\xb3\x9d\xff\xf5Z_<_0\xbd" +
	"e>Y\x1f\x1e\x1e\xbe>\xa5\x15\xf3\xacx\xfdV\xcd" +
	"\xe8\xbb\x8e~\x17\xdb;s\x85T6\xc1\xcd\xc1\x9c\x05" +
	"\xd0\x83\xa8F\x98\x0f\xc0\x87\x00\xb2\xd6\x0e\xa0\xde\xc5P" +
	"\xcdH(#F)G2_\x05\xa0\xde\xcdP\xcdI" +
	"(KR\x14%\x00Yo\x05P\xd3\x0c\xd5\xa2\x842" +
	"cQd\x00\xf2\x00if\x18\xaa\x96\x84\xf1\x0c\xd7\xfb" +
	"3\x166\x82\x84\x8d\x80\xe1\x8cff\xec\x8fX\x1f\xb9" +
	"\x80\x11\xb76\x001\x02\x18Nk\x96f+9\xde\x07" +
	"\xaa\xbc\xef\xd5\x8c\xbe$7\x86\xb8q\x9d\xc9\xf3\xe9\x84" +
	"6\xbc\xc9\xd0\xf2\xa6\x96\xb2\xf4B~Y\x8ffh\x03" +
	"h\xaa>'\xa4Fr4\xc4P\x8dJ\x183\xb4\xe1" +
	"M\xf7L2\xe0\x9f\xce@?\xb7D\xb2\xba43C" +
	"\xd0Am\xa0\x0a\xba\xdd\x85\xb6\xc3\xf5\x81\x84\xbeYb" +
	"\x7f\x82[\xc3\x05#\xbb>\xbf\xb9\xb0,\x11\x17\x1b2" +
	"-\xbc!\x961\xe2\xf2\xb3\x9c\xb2\xd9\x07Q\xce\x8dI" +
	"\x90\xb6\x85\x95\xb4_\xcb\x18\xaak$\xb4w\xbb%\x01" +
	"\xa0\xaef\xa8\xde,UoZi\x88\x1b}\x05S\xb7" +
	"\x00\xef\x9dS\x98\xb7\xa7R\x85\xc1\xbc\xb5LP\x8e\xcd" +
	"\"D\xa7\xbd\xd6\x84(U\x19\xe9\xe2Z0\xcd\x0d\"" +
	"\xf0\x02\x07p_'\x80\xba\x9b\xa1z\xc0C\xe0G(" +
	"\xcc\xbd\x0c\xd5\xc7$\xc4\x0a\x7f\xc7\x0c\x00\xf5\x00C\xf5" +
	")\xe2/\x96\xf9{\x88b\xff\x11C\xf5Y\x09e\x9f" +
	"\x14E\x1f\x80|\x844\x7f\xccP\xfd\xb9\x84\xb2\x9fE" +
	"\xd1\x0f \x8f\x8f\x02\xa8\xcf1T\x9f\x97pd\x88\x1b" +
	"\xa6^\xc8c\x00$\x0c\x00\x86-}\x80;\x19*\x1a" +
	"|\x88\xf2\x0f1A#'\x9b\xa6\xa5Y<Q(\x00" +
	"Z\xae\xac`X\xba\xa5\x17 \x96Or\x9ev\xe4E" +
	"\xa3P,\x98\xdc\xc0\xdb\xd3i\x83\x9b&\xcc\xbeF\xec" +
	"\xddOe4=/\x98V\xa1\x01\xcc\x91\xfe\x09n\x86" +
	"gA\xd0\xff\xc3\xb1rK\xc2+\xf3\xc3\x19|s(" +
	"\x01o\x93\x98u\xad9\xe3\xb8\xc6Pu?\xad\xf0\x9b" +
	"\xdcg9\x8b\xf8\xe8\xc1]\xe5\xe2N\xdd\xdd\xa4\xda\xde" +
	"\xccRY\xc2hp0>F\xbeu0T7z8" +
	"\xbd~\x03\x80\xda\xc5P\xdd\xe4i\xca\xea\x07\x01\xd4\x8d" +
	"\xe5\xf6\x1d\xcfp-\xcd\x0d\x8c\xb8\x07\xabJ\x14\xc4\xc8" +
	"\x8fr\xc3\x02\x00\x8c\xb8#\xa7\xbc\x1a\xb4\xee1\xb1\x09" +
	"\xb0\x87\xa1p\xb5i\xda\xb0=\x19\x8d\x97\xb7\xae\xc6\xed" +
	"\x85S\xb9M\xf9X\xc7P\xed\xf1\xb8\xdd\xddWq\xfb" +
	"\xb3\x122\xdd\xa1}u\xbe\xac\x8a9\x08R\xa9\xd5f" +
	"q\x8a\x09'\x88\x95\x889\x9ey\xda\x1e\x15\xef\x0a\x86" +
	"\xea\x0dn\xdb[KU\xbe\x86\xa1z\xab\x84\xa5\x9cf" +
	"\x0arb\xb6Ktup\xaa\xd9^\xa9\xad\xe6\xab\x99" +
	"U\xb3\xee\x87\xce\xc9k\x0e|\xb7\x9b\xae=\x10=\xd1" +
	"w\xce\xdc\xf4G\xb4r\x93\x99U\xdf\xf7U\xb9\x90\xe4" +
	"\xf9\xb4'BOEx\xcc\xb7Oa~\xa1\xbb!q" +
	"j\x8c\x83\xa6m\xc9\xc3\x879\xd7yOL\xb4:\xaf" +
	"\xf1\x853\xc7\xee\xb56S\xd8\xd5E\xdb\xc39\x8a9" +
	"\xb4\xc26\xa4\xd4a;@\xd2\x87\x0c\x93\x11tl)" +
	"\x8d\xd8\x09\x90\x0c\x918\x8aT\x01(*@\x91\xb1\x15" +
	" \xd9@\xf2\x05$g\x92\x18HJ\xb3\x80\x89\x90|" +
	"\x11\xc9}L\xcc$\xe5\x03\x98\x00H. \xf92\x92" +
	"\xfbQ\x8c%e\xa9\xc0YD\xf2\x15$\x0fHQ\x0c" +
	"\x00(\xcb\x05\xce\x12\x92\xaf&y\x90E\xe9\xb4\xa8\xac" +
	"\xc4\xed\x00\xc9\xd5$\xbf\x99\xe4!_\x14C\x00\xca\x8d" +
	"8\x0a\x90\xbc\x81\xe4\x1d$\xaf\xf3G\xb1\x0e@\xb9\x0d" +
	"\x0d\x80\xe4\xad$\xef\xc2I{52P\xc8\xebYn" +
	"`\x03H\xd8\x00\x18\xd3\xfay\xde\xb2\xbf\xe2E\xce\x8d" +
	"\xf5\xeb\xec\xcfRq\xb0/\xa7\xa7\xee\xe4\x94_\xfb\x0f" +
	"\x9bsZ\xbf\x03W{\xa42x\x8a\xebC<\x8d\xdd" +
	"\xdc4\xb5~n\x82[\x97z~H\xcb\xe9\xe9n\xb4" +
	"\x97&\xfd\x0bb\x9d\xf7Z\xdc\xbc\xea\x03Z\x85L\xd3" +
	"t\x9cO\x93u\xcd*\x18\x09\x1e\xb6\x1b\xce\\\xa6\xc0" +
	"L^8\xd8\xce\x11\xf4}*\xe6\xea\x90*\xc1_\xb1" +
	"\x88\x9d\xde\xde\xd2Z\xa9\xe2uR\xedf\xc7\xe8\xd3\x99" +
	"+\x11\xf7\xee\x07X5a\xae|\x88-O\x1a\x13\xe0" +
	"\x8a]\xd3y \x99qx\xbb6\xc4Uh\x09\xf3\x03" +
	"\xd8o\x19\x9e\xeb\xdd\x85\x0d \xc9o\x07\xd1})A" +
	"\xfb\x9dA~u\x0bH\xf2KA\x94\x9cK/\xda/" +
	"\x08\xf2\xa9\xad \xc9\x13Ad\xf6\xf5\xda\xf3\x0er\xac" +
	"\x17$\xf9p\x10}\xce\xad\x14\xed\x1b\x9d<F\x98\xfb" +
	"\x82\xe8w\x1e:\xd0~\xb6\x90w\xec\x02I~ \x88" +
	"\x01\xe7R\x8c\xf6\xeb\x8c|\x1f\xd9\x1b\x0cb\xd0y\xf2" +
	"A\xfb\xe2/\xeb\x0f\x83$\xf3`\xc9\xce%\x00t\xa0" +
	"\xfb\x15\xa6\x81V\x16\x88&\x0a\xf1r\x1b-\x8b\xc4<" +
	"\x01\x96\xb7\xca\x9f\x82\x93\x10&Vz0\xd0>\xcca" +
	"\xa1,\x15\x1c\x82x\xb9\x84:\xb0dOA\xb4\xbb4" +
	"#\xfc\x1e\x9cnw\xe8\x98\xa2o\xd6S\x9a\xc5']" +
	"U[\xdd\xab\xaasS\xed\xad\\J\xbf\xe6\xf6V\xf9" +
	">*\x87\xaf2T\xf7\xba\x8dU\xde\x93p\xef\x091" +
	"\xa30\x98O#\x03\x09\x19`)U\x18\x18\xd0-\x8b" +
	"\x03s\x19\xeb\xab\x9c\x84\xb4>\x93\xe7-\xce\x01'-" +
	"\x99z\x7f^\xb3\x06\x0d@~\x95\xd5=\xcb\x13v\xc4" +
	"}\xf1(3\xfb\x7f\x01\x00\x00\xff\xff`x*\xc3"

func init() {
	schemas.Register(schema_84b56bd0975dfd33,
		0x83143f06598cf9e8,
		0x8317eae56a55f0ba,
		0x85252b1ec1c352d2,
		0x8d7ad02d9eab8fb7,
		0x8df1c729f8d2ca00,
		0x8e979661cc6a1161,
		0x8ededcb57f98aaf0,
		0x8fb41d4bd35c5a30,
		0x946b1f715eac1308,
		0xa128fe760c2612c4,
		0xa2b1016cefab775b,
		0xa3bd4ddc3e0a5017,
		0xb8f393fd6f7f0c44,
		0xbd77371c14feb668,
		0xbd88d0eab3826ba9,
		0xc0689e5f33bf949d,
		0xcd6c734787642800,
		0xcfd704b9b2c62a4a,
		0xd3df8a6125925ab9,
		0xdeb9cfe7754f053f,
		0xe051a47070c97f9e,
		0xec1c828dae8bffa3,
		0xeed94cf76be61d8e,
		0xefbaa00121a2907b,
		0xf5e8509c82a71e1c,
		0xf906e2ae0dd37fe4,
		0xf94646af9560150b,
		0xfb42d1f26b074c15)
}
