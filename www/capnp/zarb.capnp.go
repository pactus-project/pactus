// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	context "golang.org/x/net/context"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Header struct{ capnp.Struct }

// Header_TypeID is the unique identifier for the type Header.
const Header_TypeID = 0x8ededcb57f98aaf0

func NewHeader(s *capnp.Segment) (Header, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 6})
	return Header{st}, err
}

func NewRootHeader(s *capnp.Segment) (Header, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 6})
	return Header{st}, err
}

func ReadRootHeader(msg *capnp.Message) (Header, error) {
	root, err := msg.RootPtr()
	return Header{root.Struct()}, err
}

func (s Header) String() string {
	str, _ := text.Marshal(0x8ededcb57f98aaf0, s.Struct)
	return str
}

func (s Header) Version() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s Header) SetVersion(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s Header) Time() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s Header) SetTime(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s Header) LastBlockHash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Header) HasLastBlockHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Header) SetLastBlockHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Header) StateHash() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Header) HasStateHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Header) SetStateHash(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s Header) TxsHash() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s Header) HasTxsHash() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Header) SetTxsHash(v []byte) error {
	return s.Struct.SetData(2, v)
}

func (s Header) LastCertificateHash() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s Header) HasLastCertificateHash() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Header) SetLastCertificateHash(v []byte) error {
	return s.Struct.SetData(3, v)
}

func (s Header) SortitionSeed() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return []byte(p.Data()), err
}

func (s Header) HasSortitionSeed() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s Header) SetSortitionSeed(v []byte) error {
	return s.Struct.SetData(4, v)
}

func (s Header) ProposerAddress() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return []byte(p.Data()), err
}

func (s Header) HasProposerAddress() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s Header) SetProposerAddress(v []byte) error {
	return s.Struct.SetData(5, v)
}

// Header_List is a list of Header.
type Header_List struct{ capnp.List }

// NewHeader creates a new list of Header.
func NewHeader_List(s *capnp.Segment, sz int32) (Header_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 6}, sz)
	return Header_List{l}, err
}

func (s Header_List) At(i int) Header { return Header{s.List.Struct(i)} }

func (s Header_List) Set(i int, v Header) error { return s.List.SetStruct(i, v.Struct) }

func (s Header_List) String() string {
	str, _ := text.MarshalList(0x8ededcb57f98aaf0, s.List)
	return str
}

// Header_Promise is a wrapper for a Header promised by a client call.
type Header_Promise struct{ *capnp.Pipeline }

func (p Header_Promise) Struct() (Header, error) {
	s, err := p.Pipeline.Struct()
	return Header{s}, err
}

type Txs struct{ capnp.Struct }

// Txs_TypeID is the unique identifier for the type Txs.
const Txs_TypeID = 0xc120e2adef2af529

func NewTxs(s *capnp.Segment) (Txs, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Txs{st}, err
}

func NewRootTxs(s *capnp.Segment) (Txs, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Txs{st}, err
}

func ReadRootTxs(msg *capnp.Message) (Txs, error) {
	root, err := msg.RootPtr()
	return Txs{root.Struct()}, err
}

func (s Txs) String() string {
	str, _ := text.Marshal(0xc120e2adef2af529, s.Struct)
	return str
}

func (s Txs) Hashes() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.DataList{List: p.List()}, err
}

func (s Txs) HasHashes() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Txs) SetHashes(v capnp.DataList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewHashes sets the hashes field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Txs) NewHashes(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Txs_List is a list of Txs.
type Txs_List struct{ capnp.List }

// NewTxs creates a new list of Txs.
func NewTxs_List(s *capnp.Segment, sz int32) (Txs_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Txs_List{l}, err
}

func (s Txs_List) At(i int) Txs { return Txs{s.List.Struct(i)} }

func (s Txs_List) Set(i int, v Txs) error { return s.List.SetStruct(i, v.Struct) }

func (s Txs_List) String() string {
	str, _ := text.MarshalList(0xc120e2adef2af529, s.List)
	return str
}

// Txs_Promise is a wrapper for a Txs promised by a client call.
type Txs_Promise struct{ *capnp.Pipeline }

func (p Txs_Promise) Struct() (Txs, error) {
	s, err := p.Pipeline.Struct()
	return Txs{s}, err
}

type Certificate struct{ capnp.Struct }

// Certificate_TypeID is the unique identifier for the type Certificate.
const Certificate_TypeID = 0xf94646af9560150b

func NewCertificate(s *capnp.Segment) (Certificate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Certificate{st}, err
}

func NewRootCertificate(s *capnp.Segment) (Certificate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Certificate{st}, err
}

func ReadRootCertificate(msg *capnp.Message) (Certificate, error) {
	root, err := msg.RootPtr()
	return Certificate{root.Struct()}, err
}

func (s Certificate) String() string {
	str, _ := text.Marshal(0xf94646af9560150b, s.Struct)
	return str
}

func (s Certificate) BlockHash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Certificate) HasBlockHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Certificate) SetBlockHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Certificate) Round() uint32 {
	return s.Struct.Uint32(0)
}

func (s Certificate) SetRound(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s Certificate) Committers() (capnp.Int32List, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.Int32List{List: p.List()}, err
}

func (s Certificate) HasCommitters() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Certificate) SetCommitters(v capnp.Int32List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewCommitters sets the committers field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s Certificate) NewCommitters(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Certificate) Absentees() (capnp.Int32List, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.Int32List{List: p.List()}, err
}

func (s Certificate) HasAbsentees() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Certificate) SetAbsentees(v capnp.Int32List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewAbsentees sets the absentees field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s Certificate) NewAbsentees(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s Certificate) Signature() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s Certificate) HasSignature() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Certificate) SetSignature(v []byte) error {
	return s.Struct.SetData(3, v)
}

// Certificate_List is a list of Certificate.
type Certificate_List struct{ capnp.List }

// NewCertificate creates a new list of Certificate.
func NewCertificate_List(s *capnp.Segment, sz int32) (Certificate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return Certificate_List{l}, err
}

func (s Certificate_List) At(i int) Certificate { return Certificate{s.List.Struct(i)} }

func (s Certificate_List) Set(i int, v Certificate) error { return s.List.SetStruct(i, v.Struct) }

func (s Certificate_List) String() string {
	str, _ := text.MarshalList(0xf94646af9560150b, s.List)
	return str
}

// Certificate_Promise is a wrapper for a Certificate promised by a client call.
type Certificate_Promise struct{ *capnp.Pipeline }

func (p Certificate_Promise) Struct() (Certificate, error) {
	s, err := p.Pipeline.Struct()
	return Certificate{s}, err
}

type Block struct{ capnp.Struct }

// Block_TypeID is the unique identifier for the type Block.
const Block_TypeID = 0xb8f393fd6f7f0c44

func NewBlock(s *capnp.Segment) (Block, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Block{st}, err
}

func NewRootBlock(s *capnp.Segment) (Block, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Block{st}, err
}

func ReadRootBlock(msg *capnp.Message) (Block, error) {
	root, err := msg.RootPtr()
	return Block{root.Struct()}, err
}

func (s Block) String() string {
	str, _ := text.Marshal(0xb8f393fd6f7f0c44, s.Struct)
	return str
}

func (s Block) Header() (Header, error) {
	p, err := s.Struct.Ptr(0)
	return Header{Struct: p.Struct()}, err
}

func (s Block) HasHeader() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Block) SetHeader(v Header) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHeader sets the header field to a newly
// allocated Header struct, preferring placement in s's segment.
func (s Block) NewHeader() (Header, error) {
	ss, err := NewHeader(s.Struct.Segment())
	if err != nil {
		return Header{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Block) LastCertificate() (Certificate, error) {
	p, err := s.Struct.Ptr(1)
	return Certificate{Struct: p.Struct()}, err
}

func (s Block) HasLastCertificate() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Block) SetLastCertificate(v Certificate) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewLastCertificate sets the lastCertificate field to a newly
// allocated Certificate struct, preferring placement in s's segment.
func (s Block) NewLastCertificate() (Certificate, error) {
	ss, err := NewCertificate(s.Struct.Segment())
	if err != nil {
		return Certificate{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Block) Txs() (Txs, error) {
	p, err := s.Struct.Ptr(2)
	return Txs{Struct: p.Struct()}, err
}

func (s Block) HasTxs() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Block) SetTxs(v Txs) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewTxs sets the txs field to a newly
// allocated Txs struct, preferring placement in s's segment.
func (s Block) NewTxs() (Txs, error) {
	ss, err := NewTxs(s.Struct.Segment())
	if err != nil {
		return Txs{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// Block_List is a list of Block.
type Block_List struct{ capnp.List }

// NewBlock creates a new list of Block.
func NewBlock_List(s *capnp.Segment, sz int32) (Block_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Block_List{l}, err
}

func (s Block_List) At(i int) Block { return Block{s.List.Struct(i)} }

func (s Block_List) Set(i int, v Block) error { return s.List.SetStruct(i, v.Struct) }

func (s Block_List) String() string {
	str, _ := text.MarshalList(0xb8f393fd6f7f0c44, s.List)
	return str
}

// Block_Promise is a wrapper for a Block promised by a client call.
type Block_Promise struct{ *capnp.Pipeline }

func (p Block_Promise) Struct() (Block, error) {
	s, err := p.Pipeline.Struct()
	return Block{s}, err
}

func (p Block_Promise) Header() Header_Promise {
	return Header_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Block_Promise) LastCertificate() Certificate_Promise {
	return Certificate_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p Block_Promise) Txs() Txs_Promise {
	return Txs_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type BlockchainResult struct{ capnp.Struct }

// BlockchainResult_TypeID is the unique identifier for the type BlockchainResult.
const BlockchainResult_TypeID = 0xbd88d0eab3826ba9

func NewBlockchainResult(s *capnp.Segment) (BlockchainResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BlockchainResult{st}, err
}

func NewRootBlockchainResult(s *capnp.Segment) (BlockchainResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BlockchainResult{st}, err
}

func ReadRootBlockchainResult(msg *capnp.Message) (BlockchainResult, error) {
	root, err := msg.RootPtr()
	return BlockchainResult{root.Struct()}, err
}

func (s BlockchainResult) String() string {
	str, _ := text.Marshal(0xbd88d0eab3826ba9, s.Struct)
	return str
}

func (s BlockchainResult) Height() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s BlockchainResult) SetHeight(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

// BlockchainResult_List is a list of BlockchainResult.
type BlockchainResult_List struct{ capnp.List }

// NewBlockchainResult creates a new list of BlockchainResult.
func NewBlockchainResult_List(s *capnp.Segment, sz int32) (BlockchainResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return BlockchainResult_List{l}, err
}

func (s BlockchainResult_List) At(i int) BlockchainResult { return BlockchainResult{s.List.Struct(i)} }

func (s BlockchainResult_List) Set(i int, v BlockchainResult) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s BlockchainResult_List) String() string {
	str, _ := text.MarshalList(0xbd88d0eab3826ba9, s.List)
	return str
}

// BlockchainResult_Promise is a wrapper for a BlockchainResult promised by a client call.
type BlockchainResult_Promise struct{ *capnp.Pipeline }

func (p BlockchainResult_Promise) Struct() (BlockchainResult, error) {
	s, err := p.Pipeline.Struct()
	return BlockchainResult{s}, err
}

type BlockResult struct{ capnp.Struct }

// BlockResult_TypeID is the unique identifier for the type BlockResult.
const BlockResult_TypeID = 0x83143f06598cf9e8

func NewBlockResult(s *capnp.Segment) (BlockResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return BlockResult{st}, err
}

func NewRootBlockResult(s *capnp.Segment) (BlockResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return BlockResult{st}, err
}

func ReadRootBlockResult(msg *capnp.Message) (BlockResult, error) {
	root, err := msg.RootPtr()
	return BlockResult{root.Struct()}, err
}

func (s BlockResult) String() string {
	str, _ := text.Marshal(0x83143f06598cf9e8, s.Struct)
	return str
}

func (s BlockResult) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s BlockResult) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s BlockResult) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s BlockResult) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s BlockResult) HasData() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s BlockResult) SetData(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s BlockResult) Block() (Block, error) {
	p, err := s.Struct.Ptr(2)
	return Block{Struct: p.Struct()}, err
}

func (s BlockResult) HasBlock() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s BlockResult) SetBlock(v Block) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewBlock sets the block field to a newly
// allocated Block struct, preferring placement in s's segment.
func (s BlockResult) NewBlock() (Block, error) {
	ss, err := NewBlock(s.Struct.Segment())
	if err != nil {
		return Block{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// BlockResult_List is a list of BlockResult.
type BlockResult_List struct{ capnp.List }

// NewBlockResult creates a new list of BlockResult.
func NewBlockResult_List(s *capnp.Segment, sz int32) (BlockResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return BlockResult_List{l}, err
}

func (s BlockResult_List) At(i int) BlockResult { return BlockResult{s.List.Struct(i)} }

func (s BlockResult_List) Set(i int, v BlockResult) error { return s.List.SetStruct(i, v.Struct) }

func (s BlockResult_List) String() string {
	str, _ := text.MarshalList(0x83143f06598cf9e8, s.List)
	return str
}

// BlockResult_Promise is a wrapper for a BlockResult promised by a client call.
type BlockResult_Promise struct{ *capnp.Pipeline }

func (p BlockResult_Promise) Struct() (BlockResult, error) {
	s, err := p.Pipeline.Struct()
	return BlockResult{s}, err
}

func (p BlockResult_Promise) Block() Block_Promise {
	return Block_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type TransactionResult struct{ capnp.Struct }

// TransactionResult_TypeID is the unique identifier for the type TransactionResult.
const TransactionResult_TypeID = 0xbd77371c14feb668

func NewTransactionResult(s *capnp.Segment) (TransactionResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return TransactionResult{st}, err
}

func NewRootTransactionResult(s *capnp.Segment) (TransactionResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return TransactionResult{st}, err
}

func ReadRootTransactionResult(msg *capnp.Message) (TransactionResult, error) {
	root, err := msg.RootPtr()
	return TransactionResult{root.Struct()}, err
}

func (s TransactionResult) String() string {
	str, _ := text.Marshal(0xbd77371c14feb668, s.Struct)
	return str
}

func (s TransactionResult) Id() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s TransactionResult) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TransactionResult) SetId(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s TransactionResult) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s TransactionResult) HasData() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TransactionResult) SetData(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s TransactionResult) Transaction() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s TransactionResult) HasTransaction() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s TransactionResult) SetTransaction(v []byte) error {
	return s.Struct.SetData(2, v)
}

// TransactionResult_List is a list of TransactionResult.
type TransactionResult_List struct{ capnp.List }

// NewTransactionResult creates a new list of TransactionResult.
func NewTransactionResult_List(s *capnp.Segment, sz int32) (TransactionResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return TransactionResult_List{l}, err
}

func (s TransactionResult_List) At(i int) TransactionResult {
	return TransactionResult{s.List.Struct(i)}
}

func (s TransactionResult_List) Set(i int, v TransactionResult) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s TransactionResult_List) String() string {
	str, _ := text.MarshalList(0xbd77371c14feb668, s.List)
	return str
}

// TransactionResult_Promise is a wrapper for a TransactionResult promised by a client call.
type TransactionResult_Promise struct{ *capnp.Pipeline }

func (p TransactionResult_Promise) Struct() (TransactionResult, error) {
	s, err := p.Pipeline.Struct()
	return TransactionResult{s}, err
}

type AccountResult struct{ capnp.Struct }

// AccountResult_TypeID is the unique identifier for the type AccountResult.
const AccountResult_TypeID = 0xa3bd4ddc3e0a5017

func NewAccountResult(s *capnp.Segment) (AccountResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AccountResult{st}, err
}

func NewRootAccountResult(s *capnp.Segment) (AccountResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AccountResult{st}, err
}

func ReadRootAccountResult(msg *capnp.Message) (AccountResult, error) {
	root, err := msg.RootPtr()
	return AccountResult{root.Struct()}, err
}

func (s AccountResult) String() string {
	str, _ := text.Marshal(0xa3bd4ddc3e0a5017, s.Struct)
	return str
}

func (s AccountResult) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s AccountResult) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AccountResult) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// AccountResult_List is a list of AccountResult.
type AccountResult_List struct{ capnp.List }

// NewAccountResult creates a new list of AccountResult.
func NewAccountResult_List(s *capnp.Segment, sz int32) (AccountResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return AccountResult_List{l}, err
}

func (s AccountResult_List) At(i int) AccountResult { return AccountResult{s.List.Struct(i)} }

func (s AccountResult_List) Set(i int, v AccountResult) error { return s.List.SetStruct(i, v.Struct) }

func (s AccountResult_List) String() string {
	str, _ := text.MarshalList(0xa3bd4ddc3e0a5017, s.List)
	return str
}

// AccountResult_Promise is a wrapper for a AccountResult promised by a client call.
type AccountResult_Promise struct{ *capnp.Pipeline }

func (p AccountResult_Promise) Struct() (AccountResult, error) {
	s, err := p.Pipeline.Struct()
	return AccountResult{s}, err
}

type ValidatorResult struct{ capnp.Struct }

// ValidatorResult_TypeID is the unique identifier for the type ValidatorResult.
const ValidatorResult_TypeID = 0xec1c828dae8bffa3

func NewValidatorResult(s *capnp.Segment) (ValidatorResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ValidatorResult{st}, err
}

func NewRootValidatorResult(s *capnp.Segment) (ValidatorResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ValidatorResult{st}, err
}

func ReadRootValidatorResult(msg *capnp.Message) (ValidatorResult, error) {
	root, err := msg.RootPtr()
	return ValidatorResult{root.Struct()}, err
}

func (s ValidatorResult) String() string {
	str, _ := text.Marshal(0xec1c828dae8bffa3, s.Struct)
	return str
}

func (s ValidatorResult) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ValidatorResult) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ValidatorResult) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// ValidatorResult_List is a list of ValidatorResult.
type ValidatorResult_List struct{ capnp.List }

// NewValidatorResult creates a new list of ValidatorResult.
func NewValidatorResult_List(s *capnp.Segment, sz int32) (ValidatorResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ValidatorResult_List{l}, err
}

func (s ValidatorResult_List) At(i int) ValidatorResult { return ValidatorResult{s.List.Struct(i)} }

func (s ValidatorResult_List) Set(i int, v ValidatorResult) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ValidatorResult_List) String() string {
	str, _ := text.MarshalList(0xec1c828dae8bffa3, s.List)
	return str
}

// ValidatorResult_Promise is a wrapper for a ValidatorResult promised by a client call.
type ValidatorResult_Promise struct{ *capnp.Pipeline }

func (p ValidatorResult_Promise) Struct() (ValidatorResult, error) {
	s, err := p.Pipeline.Struct()
	return ValidatorResult{s}, err
}

type Peer struct{ capnp.Struct }

// Peer_TypeID is the unique identifier for the type Peer.
const Peer_TypeID = 0xdeb9cfe7754f053f

func NewPeer(s *capnp.Segment) (Peer, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 4})
	return Peer{st}, err
}

func NewRootPeer(s *capnp.Segment) (Peer, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 4})
	return Peer{st}, err
}

func ReadRootPeer(msg *capnp.Message) (Peer, error) {
	root, err := msg.RootPtr()
	return Peer{root.Struct()}, err
}

func (s Peer) String() string {
	str, _ := text.Marshal(0xdeb9cfe7754f053f, s.Struct)
	return str
}

func (s Peer) Status() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s Peer) SetStatus(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s Peer) Moniker() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Peer) HasMoniker() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Peer) MonikerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Peer) SetMoniker(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Peer) NodeVersion() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Peer) HasNodeVersion() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Peer) NodeVersionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Peer) SetNodeVersion(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Peer) PeerID() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Peer) HasPeerID() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Peer) PeerIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Peer) SetPeerID(v string) error {
	return s.Struct.SetText(2, v)
}

func (s Peer) PublicKey() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s Peer) HasPublicKey() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Peer) PublicKeyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s Peer) SetPublicKey(v string) error {
	return s.Struct.SetText(3, v)
}

func (s Peer) InitialBlockDownload() bool {
	return s.Struct.Bit(32)
}

func (s Peer) SetInitialBlockDownload(v bool) {
	s.Struct.SetBit(32, v)
}

func (s Peer) Height() int32 {
	return int32(s.Struct.Uint32(8))
}

func (s Peer) SetHeight(v int32) {
	s.Struct.SetUint32(8, uint32(v))
}

func (s Peer) ReceivedMessages() int32 {
	return int32(s.Struct.Uint32(12))
}

func (s Peer) SetReceivedMessages(v int32) {
	s.Struct.SetUint32(12, uint32(v))
}

func (s Peer) InvalidMessages() int32 {
	return int32(s.Struct.Uint32(16))
}

func (s Peer) SetInvalidMessages(v int32) {
	s.Struct.SetUint32(16, uint32(v))
}

func (s Peer) ReceivedBytes() int32 {
	return int32(s.Struct.Uint32(20))
}

func (s Peer) SetReceivedBytes(v int32) {
	s.Struct.SetUint32(20, uint32(v))
}

// Peer_List is a list of Peer.
type Peer_List struct{ capnp.List }

// NewPeer creates a new list of Peer.
func NewPeer_List(s *capnp.Segment, sz int32) (Peer_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 4}, sz)
	return Peer_List{l}, err
}

func (s Peer_List) At(i int) Peer { return Peer{s.List.Struct(i)} }

func (s Peer_List) Set(i int, v Peer) error { return s.List.SetStruct(i, v.Struct) }

func (s Peer_List) String() string {
	str, _ := text.MarshalList(0xdeb9cfe7754f053f, s.List)
	return str
}

// Peer_Promise is a wrapper for a Peer promised by a client call.
type Peer_Promise struct{ *capnp.Pipeline }

func (p Peer_Promise) Struct() (Peer, error) {
	s, err := p.Pipeline.Struct()
	return Peer{s}, err
}

type NetworkResult struct{ capnp.Struct }

// NetworkResult_TypeID is the unique identifier for the type NetworkResult.
const NetworkResult_TypeID = 0xefbaa00121a2907b

func NewNetworkResult(s *capnp.Segment) (NetworkResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return NetworkResult{st}, err
}

func NewRootNetworkResult(s *capnp.Segment) (NetworkResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return NetworkResult{st}, err
}

func ReadRootNetworkResult(msg *capnp.Message) (NetworkResult, error) {
	root, err := msg.RootPtr()
	return NetworkResult{root.Struct()}, err
}

func (s NetworkResult) String() string {
	str, _ := text.Marshal(0xefbaa00121a2907b, s.Struct)
	return str
}

func (s NetworkResult) PeerID() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s NetworkResult) HasPeerID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s NetworkResult) PeerIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s NetworkResult) SetPeerID(v string) error {
	return s.Struct.SetText(0, v)
}

func (s NetworkResult) Peers() (Peer_List, error) {
	p, err := s.Struct.Ptr(1)
	return Peer_List{List: p.List()}, err
}

func (s NetworkResult) HasPeers() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s NetworkResult) SetPeers(v Peer_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewPeers sets the peers field to a newly
// allocated Peer_List, preferring placement in s's segment.
func (s NetworkResult) NewPeers(n int32) (Peer_List, error) {
	l, err := NewPeer_List(s.Struct.Segment(), n)
	if err != nil {
		return Peer_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// NetworkResult_List is a list of NetworkResult.
type NetworkResult_List struct{ capnp.List }

// NewNetworkResult creates a new list of NetworkResult.
func NewNetworkResult_List(s *capnp.Segment, sz int32) (NetworkResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return NetworkResult_List{l}, err
}

func (s NetworkResult_List) At(i int) NetworkResult { return NetworkResult{s.List.Struct(i)} }

func (s NetworkResult_List) Set(i int, v NetworkResult) error { return s.List.SetStruct(i, v.Struct) }

func (s NetworkResult_List) String() string {
	str, _ := text.MarshalList(0xefbaa00121a2907b, s.List)
	return str
}

// NetworkResult_Promise is a wrapper for a NetworkResult promised by a client call.
type NetworkResult_Promise struct{ *capnp.Pipeline }

func (p NetworkResult_Promise) Struct() (NetworkResult, error) {
	s, err := p.Pipeline.Struct()
	return NetworkResult{s}, err
}

type SendTransactionResult struct{ capnp.Struct }

// SendTransactionResult_TypeID is the unique identifier for the type SendTransactionResult.
const SendTransactionResult_TypeID = 0xcfd704b9b2c62a4a

func NewSendTransactionResult(s *capnp.Segment) (SendTransactionResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SendTransactionResult{st}, err
}

func NewRootSendTransactionResult(s *capnp.Segment) (SendTransactionResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SendTransactionResult{st}, err
}

func ReadRootSendTransactionResult(msg *capnp.Message) (SendTransactionResult, error) {
	root, err := msg.RootPtr()
	return SendTransactionResult{root.Struct()}, err
}

func (s SendTransactionResult) String() string {
	str, _ := text.Marshal(0xcfd704b9b2c62a4a, s.Struct)
	return str
}

func (s SendTransactionResult) Status() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s SendTransactionResult) SetStatus(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s SendTransactionResult) Id() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s SendTransactionResult) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SendTransactionResult) SetId(v []byte) error {
	return s.Struct.SetData(0, v)
}

// SendTransactionResult_List is a list of SendTransactionResult.
type SendTransactionResult_List struct{ capnp.List }

// NewSendTransactionResult creates a new list of SendTransactionResult.
func NewSendTransactionResult_List(s *capnp.Segment, sz int32) (SendTransactionResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return SendTransactionResult_List{l}, err
}

func (s SendTransactionResult_List) At(i int) SendTransactionResult {
	return SendTransactionResult{s.List.Struct(i)}
}

func (s SendTransactionResult_List) Set(i int, v SendTransactionResult) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SendTransactionResult_List) String() string {
	str, _ := text.MarshalList(0xcfd704b9b2c62a4a, s.List)
	return str
}

// SendTransactionResult_Promise is a wrapper for a SendTransactionResult promised by a client call.
type SendTransactionResult_Promise struct{ *capnp.Pipeline }

func (p SendTransactionResult_Promise) Struct() (SendTransactionResult, error) {
	s, err := p.Pipeline.Struct()
	return SendTransactionResult{s}, err
}

type ZarbServer struct{ Client capnp.Client }

// ZarbServer_TypeID is the unique identifier for the type ZarbServer.
const ZarbServer_TypeID = 0xf906e2ae0dd37fe4

func (c ZarbServer) GetBlock(ctx context.Context, params func(ZarbServer_getBlock_Params) error, opts ...capnp.CallOption) ZarbServer_getBlock_Results_Promise {
	if c.Client == nil {
		return ZarbServer_getBlock_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      0,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getBlock",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 16, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_getBlock_Params{Struct: s}) }
	}
	return ZarbServer_getBlock_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) GetBlockHeight(ctx context.Context, params func(ZarbServer_getBlockHeight_Params) error, opts ...capnp.CallOption) ZarbServer_getBlockHeight_Results_Promise {
	if c.Client == nil {
		return ZarbServer_getBlockHeight_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      1,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getBlockHeight",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_getBlockHeight_Params{Struct: s}) }
	}
	return ZarbServer_getBlockHeight_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) GetTransaction(ctx context.Context, params func(ZarbServer_getTransaction_Params) error, opts ...capnp.CallOption) ZarbServer_getTransaction_Results_Promise {
	if c.Client == nil {
		return ZarbServer_getTransaction_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      2,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getTransaction",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_getTransaction_Params{Struct: s}) }
	}
	return ZarbServer_getTransaction_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) GetAccount(ctx context.Context, params func(ZarbServer_getAccount_Params) error, opts ...capnp.CallOption) ZarbServer_getAccount_Results_Promise {
	if c.Client == nil {
		return ZarbServer_getAccount_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      3,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getAccount",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_getAccount_Params{Struct: s}) }
	}
	return ZarbServer_getAccount_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) GetValidator(ctx context.Context, params func(ZarbServer_getValidator_Params) error, opts ...capnp.CallOption) ZarbServer_getValidator_Results_Promise {
	if c.Client == nil {
		return ZarbServer_getValidator_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      4,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getValidator",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_getValidator_Params{Struct: s}) }
	}
	return ZarbServer_getValidator_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) GetBlockchainInfo(ctx context.Context, params func(ZarbServer_getBlockchainInfo_Params) error, opts ...capnp.CallOption) ZarbServer_getBlockchainInfo_Results_Promise {
	if c.Client == nil {
		return ZarbServer_getBlockchainInfo_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      5,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getBlockchainInfo",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_getBlockchainInfo_Params{Struct: s}) }
	}
	return ZarbServer_getBlockchainInfo_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) GetNetworkInfo(ctx context.Context, params func(ZarbServer_getNetworkInfo_Params) error, opts ...capnp.CallOption) ZarbServer_getNetworkInfo_Results_Promise {
	if c.Client == nil {
		return ZarbServer_getNetworkInfo_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      6,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getNetworkInfo",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_getNetworkInfo_Params{Struct: s}) }
	}
	return ZarbServer_getNetworkInfo_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) SendRawTransaction(ctx context.Context, params func(ZarbServer_sendRawTransaction_Params) error, opts ...capnp.CallOption) ZarbServer_sendRawTransaction_Results_Promise {
	if c.Client == nil {
		return ZarbServer_sendRawTransaction_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      7,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "sendRawTransaction",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_sendRawTransaction_Params{Struct: s}) }
	}
	return ZarbServer_sendRawTransaction_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type ZarbServer_Server interface {
	GetBlock(ZarbServer_getBlock) error

	GetBlockHeight(ZarbServer_getBlockHeight) error

	GetTransaction(ZarbServer_getTransaction) error

	GetAccount(ZarbServer_getAccount) error

	GetValidator(ZarbServer_getValidator) error

	GetBlockchainInfo(ZarbServer_getBlockchainInfo) error

	GetNetworkInfo(ZarbServer_getNetworkInfo) error

	SendRawTransaction(ZarbServer_sendRawTransaction) error
}

func ZarbServer_ServerToClient(s ZarbServer_Server) ZarbServer {
	c, _ := s.(server.Closer)
	return ZarbServer{Client: server.New(ZarbServer_Methods(nil, s), c)}
}

func ZarbServer_Methods(methods []server.Method, s ZarbServer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 8)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      0,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getBlock",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_getBlock{c, opts, ZarbServer_getBlock_Params{Struct: p}, ZarbServer_getBlock_Results{Struct: r}}
			return s.GetBlock(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      1,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getBlockHeight",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_getBlockHeight{c, opts, ZarbServer_getBlockHeight_Params{Struct: p}, ZarbServer_getBlockHeight_Results{Struct: r}}
			return s.GetBlockHeight(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      2,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getTransaction",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_getTransaction{c, opts, ZarbServer_getTransaction_Params{Struct: p}, ZarbServer_getTransaction_Results{Struct: r}}
			return s.GetTransaction(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      3,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getAccount",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_getAccount{c, opts, ZarbServer_getAccount_Params{Struct: p}, ZarbServer_getAccount_Results{Struct: r}}
			return s.GetAccount(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      4,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getValidator",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_getValidator{c, opts, ZarbServer_getValidator_Params{Struct: p}, ZarbServer_getValidator_Results{Struct: r}}
			return s.GetValidator(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      5,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getBlockchainInfo",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_getBlockchainInfo{c, opts, ZarbServer_getBlockchainInfo_Params{Struct: p}, ZarbServer_getBlockchainInfo_Results{Struct: r}}
			return s.GetBlockchainInfo(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      6,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getNetworkInfo",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_getNetworkInfo{c, opts, ZarbServer_getNetworkInfo_Params{Struct: p}, ZarbServer_getNetworkInfo_Results{Struct: r}}
			return s.GetNetworkInfo(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      7,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "sendRawTransaction",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_sendRawTransaction{c, opts, ZarbServer_sendRawTransaction_Params{Struct: p}, ZarbServer_sendRawTransaction_Results{Struct: r}}
			return s.SendRawTransaction(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// ZarbServer_getBlock holds the arguments for a server call to ZarbServer.getBlock.
type ZarbServer_getBlock struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_getBlock_Params
	Results ZarbServer_getBlock_Results
}

// ZarbServer_getBlockHeight holds the arguments for a server call to ZarbServer.getBlockHeight.
type ZarbServer_getBlockHeight struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_getBlockHeight_Params
	Results ZarbServer_getBlockHeight_Results
}

// ZarbServer_getTransaction holds the arguments for a server call to ZarbServer.getTransaction.
type ZarbServer_getTransaction struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_getTransaction_Params
	Results ZarbServer_getTransaction_Results
}

// ZarbServer_getAccount holds the arguments for a server call to ZarbServer.getAccount.
type ZarbServer_getAccount struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_getAccount_Params
	Results ZarbServer_getAccount_Results
}

// ZarbServer_getValidator holds the arguments for a server call to ZarbServer.getValidator.
type ZarbServer_getValidator struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_getValidator_Params
	Results ZarbServer_getValidator_Results
}

// ZarbServer_getBlockchainInfo holds the arguments for a server call to ZarbServer.getBlockchainInfo.
type ZarbServer_getBlockchainInfo struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_getBlockchainInfo_Params
	Results ZarbServer_getBlockchainInfo_Results
}

// ZarbServer_getNetworkInfo holds the arguments for a server call to ZarbServer.getNetworkInfo.
type ZarbServer_getNetworkInfo struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_getNetworkInfo_Params
	Results ZarbServer_getNetworkInfo_Results
}

// ZarbServer_sendRawTransaction holds the arguments for a server call to ZarbServer.sendRawTransaction.
type ZarbServer_sendRawTransaction struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_sendRawTransaction_Params
	Results ZarbServer_sendRawTransaction_Results
}

type ZarbServer_getBlock_Params struct{ capnp.Struct }

// ZarbServer_getBlock_Params_TypeID is the unique identifier for the type ZarbServer_getBlock_Params.
const ZarbServer_getBlock_Params_TypeID = 0x8df1c729f8d2ca00

func NewZarbServer_getBlock_Params(s *capnp.Segment) (ZarbServer_getBlock_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ZarbServer_getBlock_Params{st}, err
}

func NewRootZarbServer_getBlock_Params(s *capnp.Segment) (ZarbServer_getBlock_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ZarbServer_getBlock_Params{st}, err
}

func ReadRootZarbServer_getBlock_Params(msg *capnp.Message) (ZarbServer_getBlock_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getBlock_Params{root.Struct()}, err
}

func (s ZarbServer_getBlock_Params) String() string {
	str, _ := text.Marshal(0x8df1c729f8d2ca00, s.Struct)
	return str
}

func (s ZarbServer_getBlock_Params) Height() uint64 {
	return s.Struct.Uint64(0)
}

func (s ZarbServer_getBlock_Params) SetHeight(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s ZarbServer_getBlock_Params) Verbosity() int32 {
	return int32(s.Struct.Uint32(8))
}

func (s ZarbServer_getBlock_Params) SetVerbosity(v int32) {
	s.Struct.SetUint32(8, uint32(v))
}

// ZarbServer_getBlock_Params_List is a list of ZarbServer_getBlock_Params.
type ZarbServer_getBlock_Params_List struct{ capnp.List }

// NewZarbServer_getBlock_Params creates a new list of ZarbServer_getBlock_Params.
func NewZarbServer_getBlock_Params_List(s *capnp.Segment, sz int32) (ZarbServer_getBlock_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return ZarbServer_getBlock_Params_List{l}, err
}

func (s ZarbServer_getBlock_Params_List) At(i int) ZarbServer_getBlock_Params {
	return ZarbServer_getBlock_Params{s.List.Struct(i)}
}

func (s ZarbServer_getBlock_Params_List) Set(i int, v ZarbServer_getBlock_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getBlock_Params_List) String() string {
	str, _ := text.MarshalList(0x8df1c729f8d2ca00, s.List)
	return str
}

// ZarbServer_getBlock_Params_Promise is a wrapper for a ZarbServer_getBlock_Params promised by a client call.
type ZarbServer_getBlock_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getBlock_Params_Promise) Struct() (ZarbServer_getBlock_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getBlock_Params{s}, err
}

type ZarbServer_getBlock_Results struct{ capnp.Struct }

// ZarbServer_getBlock_Results_TypeID is the unique identifier for the type ZarbServer_getBlock_Results.
const ZarbServer_getBlock_Results_TypeID = 0xf5e8509c82a71e1c

func NewZarbServer_getBlock_Results(s *capnp.Segment) (ZarbServer_getBlock_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getBlock_Results{st}, err
}

func NewRootZarbServer_getBlock_Results(s *capnp.Segment) (ZarbServer_getBlock_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getBlock_Results{st}, err
}

func ReadRootZarbServer_getBlock_Results(msg *capnp.Message) (ZarbServer_getBlock_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getBlock_Results{root.Struct()}, err
}

func (s ZarbServer_getBlock_Results) String() string {
	str, _ := text.Marshal(0xf5e8509c82a71e1c, s.Struct)
	return str
}

func (s ZarbServer_getBlock_Results) Result() (BlockResult, error) {
	p, err := s.Struct.Ptr(0)
	return BlockResult{Struct: p.Struct()}, err
}

func (s ZarbServer_getBlock_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getBlock_Results) SetResult(v BlockResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated BlockResult struct, preferring placement in s's segment.
func (s ZarbServer_getBlock_Results) NewResult() (BlockResult, error) {
	ss, err := NewBlockResult(s.Struct.Segment())
	if err != nil {
		return BlockResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_getBlock_Results_List is a list of ZarbServer_getBlock_Results.
type ZarbServer_getBlock_Results_List struct{ capnp.List }

// NewZarbServer_getBlock_Results creates a new list of ZarbServer_getBlock_Results.
func NewZarbServer_getBlock_Results_List(s *capnp.Segment, sz int32) (ZarbServer_getBlock_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_getBlock_Results_List{l}, err
}

func (s ZarbServer_getBlock_Results_List) At(i int) ZarbServer_getBlock_Results {
	return ZarbServer_getBlock_Results{s.List.Struct(i)}
}

func (s ZarbServer_getBlock_Results_List) Set(i int, v ZarbServer_getBlock_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getBlock_Results_List) String() string {
	str, _ := text.MarshalList(0xf5e8509c82a71e1c, s.List)
	return str
}

// ZarbServer_getBlock_Results_Promise is a wrapper for a ZarbServer_getBlock_Results promised by a client call.
type ZarbServer_getBlock_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getBlock_Results_Promise) Struct() (ZarbServer_getBlock_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getBlock_Results{s}, err
}

func (p ZarbServer_getBlock_Results_Promise) Result() BlockResult_Promise {
	return BlockResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ZarbServer_getBlockHeight_Params struct{ capnp.Struct }

// ZarbServer_getBlockHeight_Params_TypeID is the unique identifier for the type ZarbServer_getBlockHeight_Params.
const ZarbServer_getBlockHeight_Params_TypeID = 0x85252b1ec1c352d2

func NewZarbServer_getBlockHeight_Params(s *capnp.Segment) (ZarbServer_getBlockHeight_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getBlockHeight_Params{st}, err
}

func NewRootZarbServer_getBlockHeight_Params(s *capnp.Segment) (ZarbServer_getBlockHeight_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getBlockHeight_Params{st}, err
}

func ReadRootZarbServer_getBlockHeight_Params(msg *capnp.Message) (ZarbServer_getBlockHeight_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getBlockHeight_Params{root.Struct()}, err
}

func (s ZarbServer_getBlockHeight_Params) String() string {
	str, _ := text.Marshal(0x85252b1ec1c352d2, s.Struct)
	return str
}

func (s ZarbServer_getBlockHeight_Params) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ZarbServer_getBlockHeight_Params) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getBlockHeight_Params) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

// ZarbServer_getBlockHeight_Params_List is a list of ZarbServer_getBlockHeight_Params.
type ZarbServer_getBlockHeight_Params_List struct{ capnp.List }

// NewZarbServer_getBlockHeight_Params creates a new list of ZarbServer_getBlockHeight_Params.
func NewZarbServer_getBlockHeight_Params_List(s *capnp.Segment, sz int32) (ZarbServer_getBlockHeight_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_getBlockHeight_Params_List{l}, err
}

func (s ZarbServer_getBlockHeight_Params_List) At(i int) ZarbServer_getBlockHeight_Params {
	return ZarbServer_getBlockHeight_Params{s.List.Struct(i)}
}

func (s ZarbServer_getBlockHeight_Params_List) Set(i int, v ZarbServer_getBlockHeight_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getBlockHeight_Params_List) String() string {
	str, _ := text.MarshalList(0x85252b1ec1c352d2, s.List)
	return str
}

// ZarbServer_getBlockHeight_Params_Promise is a wrapper for a ZarbServer_getBlockHeight_Params promised by a client call.
type ZarbServer_getBlockHeight_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getBlockHeight_Params_Promise) Struct() (ZarbServer_getBlockHeight_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getBlockHeight_Params{s}, err
}

type ZarbServer_getBlockHeight_Results struct{ capnp.Struct }

// ZarbServer_getBlockHeight_Results_TypeID is the unique identifier for the type ZarbServer_getBlockHeight_Results.
const ZarbServer_getBlockHeight_Results_TypeID = 0x946b1f715eac1308

func NewZarbServer_getBlockHeight_Results(s *capnp.Segment) (ZarbServer_getBlockHeight_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ZarbServer_getBlockHeight_Results{st}, err
}

func NewRootZarbServer_getBlockHeight_Results(s *capnp.Segment) (ZarbServer_getBlockHeight_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ZarbServer_getBlockHeight_Results{st}, err
}

func ReadRootZarbServer_getBlockHeight_Results(msg *capnp.Message) (ZarbServer_getBlockHeight_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getBlockHeight_Results{root.Struct()}, err
}

func (s ZarbServer_getBlockHeight_Results) String() string {
	str, _ := text.Marshal(0x946b1f715eac1308, s.Struct)
	return str
}

func (s ZarbServer_getBlockHeight_Results) Result() uint64 {
	return s.Struct.Uint64(0)
}

func (s ZarbServer_getBlockHeight_Results) SetResult(v uint64) {
	s.Struct.SetUint64(0, v)
}

// ZarbServer_getBlockHeight_Results_List is a list of ZarbServer_getBlockHeight_Results.
type ZarbServer_getBlockHeight_Results_List struct{ capnp.List }

// NewZarbServer_getBlockHeight_Results creates a new list of ZarbServer_getBlockHeight_Results.
func NewZarbServer_getBlockHeight_Results_List(s *capnp.Segment, sz int32) (ZarbServer_getBlockHeight_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return ZarbServer_getBlockHeight_Results_List{l}, err
}

func (s ZarbServer_getBlockHeight_Results_List) At(i int) ZarbServer_getBlockHeight_Results {
	return ZarbServer_getBlockHeight_Results{s.List.Struct(i)}
}

func (s ZarbServer_getBlockHeight_Results_List) Set(i int, v ZarbServer_getBlockHeight_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getBlockHeight_Results_List) String() string {
	str, _ := text.MarshalList(0x946b1f715eac1308, s.List)
	return str
}

// ZarbServer_getBlockHeight_Results_Promise is a wrapper for a ZarbServer_getBlockHeight_Results promised by a client call.
type ZarbServer_getBlockHeight_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getBlockHeight_Results_Promise) Struct() (ZarbServer_getBlockHeight_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getBlockHeight_Results{s}, err
}

type ZarbServer_getTransaction_Params struct{ capnp.Struct }

// ZarbServer_getTransaction_Params_TypeID is the unique identifier for the type ZarbServer_getTransaction_Params.
const ZarbServer_getTransaction_Params_TypeID = 0xd3df8a6125925ab9

func NewZarbServer_getTransaction_Params(s *capnp.Segment) (ZarbServer_getTransaction_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZarbServer_getTransaction_Params{st}, err
}

func NewRootZarbServer_getTransaction_Params(s *capnp.Segment) (ZarbServer_getTransaction_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZarbServer_getTransaction_Params{st}, err
}

func ReadRootZarbServer_getTransaction_Params(msg *capnp.Message) (ZarbServer_getTransaction_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getTransaction_Params{root.Struct()}, err
}

func (s ZarbServer_getTransaction_Params) String() string {
	str, _ := text.Marshal(0xd3df8a6125925ab9, s.Struct)
	return str
}

func (s ZarbServer_getTransaction_Params) Id() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ZarbServer_getTransaction_Params) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getTransaction_Params) SetId(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s ZarbServer_getTransaction_Params) Verbosity() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s ZarbServer_getTransaction_Params) SetVerbosity(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// ZarbServer_getTransaction_Params_List is a list of ZarbServer_getTransaction_Params.
type ZarbServer_getTransaction_Params_List struct{ capnp.List }

// NewZarbServer_getTransaction_Params creates a new list of ZarbServer_getTransaction_Params.
func NewZarbServer_getTransaction_Params_List(s *capnp.Segment, sz int32) (ZarbServer_getTransaction_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ZarbServer_getTransaction_Params_List{l}, err
}

func (s ZarbServer_getTransaction_Params_List) At(i int) ZarbServer_getTransaction_Params {
	return ZarbServer_getTransaction_Params{s.List.Struct(i)}
}

func (s ZarbServer_getTransaction_Params_List) Set(i int, v ZarbServer_getTransaction_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getTransaction_Params_List) String() string {
	str, _ := text.MarshalList(0xd3df8a6125925ab9, s.List)
	return str
}

// ZarbServer_getTransaction_Params_Promise is a wrapper for a ZarbServer_getTransaction_Params promised by a client call.
type ZarbServer_getTransaction_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getTransaction_Params_Promise) Struct() (ZarbServer_getTransaction_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getTransaction_Params{s}, err
}

type ZarbServer_getTransaction_Results struct{ capnp.Struct }

// ZarbServer_getTransaction_Results_TypeID is the unique identifier for the type ZarbServer_getTransaction_Results.
const ZarbServer_getTransaction_Results_TypeID = 0xa2b1016cefab775b

func NewZarbServer_getTransaction_Results(s *capnp.Segment) (ZarbServer_getTransaction_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getTransaction_Results{st}, err
}

func NewRootZarbServer_getTransaction_Results(s *capnp.Segment) (ZarbServer_getTransaction_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getTransaction_Results{st}, err
}

func ReadRootZarbServer_getTransaction_Results(msg *capnp.Message) (ZarbServer_getTransaction_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getTransaction_Results{root.Struct()}, err
}

func (s ZarbServer_getTransaction_Results) String() string {
	str, _ := text.Marshal(0xa2b1016cefab775b, s.Struct)
	return str
}

func (s ZarbServer_getTransaction_Results) Result() (TransactionResult, error) {
	p, err := s.Struct.Ptr(0)
	return TransactionResult{Struct: p.Struct()}, err
}

func (s ZarbServer_getTransaction_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getTransaction_Results) SetResult(v TransactionResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated TransactionResult struct, preferring placement in s's segment.
func (s ZarbServer_getTransaction_Results) NewResult() (TransactionResult, error) {
	ss, err := NewTransactionResult(s.Struct.Segment())
	if err != nil {
		return TransactionResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_getTransaction_Results_List is a list of ZarbServer_getTransaction_Results.
type ZarbServer_getTransaction_Results_List struct{ capnp.List }

// NewZarbServer_getTransaction_Results creates a new list of ZarbServer_getTransaction_Results.
func NewZarbServer_getTransaction_Results_List(s *capnp.Segment, sz int32) (ZarbServer_getTransaction_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_getTransaction_Results_List{l}, err
}

func (s ZarbServer_getTransaction_Results_List) At(i int) ZarbServer_getTransaction_Results {
	return ZarbServer_getTransaction_Results{s.List.Struct(i)}
}

func (s ZarbServer_getTransaction_Results_List) Set(i int, v ZarbServer_getTransaction_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getTransaction_Results_List) String() string {
	str, _ := text.MarshalList(0xa2b1016cefab775b, s.List)
	return str
}

// ZarbServer_getTransaction_Results_Promise is a wrapper for a ZarbServer_getTransaction_Results promised by a client call.
type ZarbServer_getTransaction_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getTransaction_Results_Promise) Struct() (ZarbServer_getTransaction_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getTransaction_Results{s}, err
}

func (p ZarbServer_getTransaction_Results_Promise) Result() TransactionResult_Promise {
	return TransactionResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ZarbServer_getAccount_Params struct{ capnp.Struct }

// ZarbServer_getAccount_Params_TypeID is the unique identifier for the type ZarbServer_getAccount_Params.
const ZarbServer_getAccount_Params_TypeID = 0xcd6c734787642800

func NewZarbServer_getAccount_Params(s *capnp.Segment) (ZarbServer_getAccount_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZarbServer_getAccount_Params{st}, err
}

func NewRootZarbServer_getAccount_Params(s *capnp.Segment) (ZarbServer_getAccount_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZarbServer_getAccount_Params{st}, err
}

func ReadRootZarbServer_getAccount_Params(msg *capnp.Message) (ZarbServer_getAccount_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getAccount_Params{root.Struct()}, err
}

func (s ZarbServer_getAccount_Params) String() string {
	str, _ := text.Marshal(0xcd6c734787642800, s.Struct)
	return str
}

func (s ZarbServer_getAccount_Params) Address() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ZarbServer_getAccount_Params) HasAddress() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getAccount_Params) SetAddress(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s ZarbServer_getAccount_Params) Verbosity() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s ZarbServer_getAccount_Params) SetVerbosity(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// ZarbServer_getAccount_Params_List is a list of ZarbServer_getAccount_Params.
type ZarbServer_getAccount_Params_List struct{ capnp.List }

// NewZarbServer_getAccount_Params creates a new list of ZarbServer_getAccount_Params.
func NewZarbServer_getAccount_Params_List(s *capnp.Segment, sz int32) (ZarbServer_getAccount_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ZarbServer_getAccount_Params_List{l}, err
}

func (s ZarbServer_getAccount_Params_List) At(i int) ZarbServer_getAccount_Params {
	return ZarbServer_getAccount_Params{s.List.Struct(i)}
}

func (s ZarbServer_getAccount_Params_List) Set(i int, v ZarbServer_getAccount_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getAccount_Params_List) String() string {
	str, _ := text.MarshalList(0xcd6c734787642800, s.List)
	return str
}

// ZarbServer_getAccount_Params_Promise is a wrapper for a ZarbServer_getAccount_Params promised by a client call.
type ZarbServer_getAccount_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getAccount_Params_Promise) Struct() (ZarbServer_getAccount_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getAccount_Params{s}, err
}

type ZarbServer_getAccount_Results struct{ capnp.Struct }

// ZarbServer_getAccount_Results_TypeID is the unique identifier for the type ZarbServer_getAccount_Results.
const ZarbServer_getAccount_Results_TypeID = 0x8e979661cc6a1161

func NewZarbServer_getAccount_Results(s *capnp.Segment) (ZarbServer_getAccount_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getAccount_Results{st}, err
}

func NewRootZarbServer_getAccount_Results(s *capnp.Segment) (ZarbServer_getAccount_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getAccount_Results{st}, err
}

func ReadRootZarbServer_getAccount_Results(msg *capnp.Message) (ZarbServer_getAccount_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getAccount_Results{root.Struct()}, err
}

func (s ZarbServer_getAccount_Results) String() string {
	str, _ := text.Marshal(0x8e979661cc6a1161, s.Struct)
	return str
}

func (s ZarbServer_getAccount_Results) Result() (AccountResult, error) {
	p, err := s.Struct.Ptr(0)
	return AccountResult{Struct: p.Struct()}, err
}

func (s ZarbServer_getAccount_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getAccount_Results) SetResult(v AccountResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated AccountResult struct, preferring placement in s's segment.
func (s ZarbServer_getAccount_Results) NewResult() (AccountResult, error) {
	ss, err := NewAccountResult(s.Struct.Segment())
	if err != nil {
		return AccountResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_getAccount_Results_List is a list of ZarbServer_getAccount_Results.
type ZarbServer_getAccount_Results_List struct{ capnp.List }

// NewZarbServer_getAccount_Results creates a new list of ZarbServer_getAccount_Results.
func NewZarbServer_getAccount_Results_List(s *capnp.Segment, sz int32) (ZarbServer_getAccount_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_getAccount_Results_List{l}, err
}

func (s ZarbServer_getAccount_Results_List) At(i int) ZarbServer_getAccount_Results {
	return ZarbServer_getAccount_Results{s.List.Struct(i)}
}

func (s ZarbServer_getAccount_Results_List) Set(i int, v ZarbServer_getAccount_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getAccount_Results_List) String() string {
	str, _ := text.MarshalList(0x8e979661cc6a1161, s.List)
	return str
}

// ZarbServer_getAccount_Results_Promise is a wrapper for a ZarbServer_getAccount_Results promised by a client call.
type ZarbServer_getAccount_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getAccount_Results_Promise) Struct() (ZarbServer_getAccount_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getAccount_Results{s}, err
}

func (p ZarbServer_getAccount_Results_Promise) Result() AccountResult_Promise {
	return AccountResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ZarbServer_getValidator_Params struct{ capnp.Struct }

// ZarbServer_getValidator_Params_TypeID is the unique identifier for the type ZarbServer_getValidator_Params.
const ZarbServer_getValidator_Params_TypeID = 0xeed94cf76be61d8e

func NewZarbServer_getValidator_Params(s *capnp.Segment) (ZarbServer_getValidator_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZarbServer_getValidator_Params{st}, err
}

func NewRootZarbServer_getValidator_Params(s *capnp.Segment) (ZarbServer_getValidator_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZarbServer_getValidator_Params{st}, err
}

func ReadRootZarbServer_getValidator_Params(msg *capnp.Message) (ZarbServer_getValidator_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getValidator_Params{root.Struct()}, err
}

func (s ZarbServer_getValidator_Params) String() string {
	str, _ := text.Marshal(0xeed94cf76be61d8e, s.Struct)
	return str
}

func (s ZarbServer_getValidator_Params) Address() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ZarbServer_getValidator_Params) HasAddress() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getValidator_Params) SetAddress(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s ZarbServer_getValidator_Params) Verbosity() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s ZarbServer_getValidator_Params) SetVerbosity(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// ZarbServer_getValidator_Params_List is a list of ZarbServer_getValidator_Params.
type ZarbServer_getValidator_Params_List struct{ capnp.List }

// NewZarbServer_getValidator_Params creates a new list of ZarbServer_getValidator_Params.
func NewZarbServer_getValidator_Params_List(s *capnp.Segment, sz int32) (ZarbServer_getValidator_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ZarbServer_getValidator_Params_List{l}, err
}

func (s ZarbServer_getValidator_Params_List) At(i int) ZarbServer_getValidator_Params {
	return ZarbServer_getValidator_Params{s.List.Struct(i)}
}

func (s ZarbServer_getValidator_Params_List) Set(i int, v ZarbServer_getValidator_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getValidator_Params_List) String() string {
	str, _ := text.MarshalList(0xeed94cf76be61d8e, s.List)
	return str
}

// ZarbServer_getValidator_Params_Promise is a wrapper for a ZarbServer_getValidator_Params promised by a client call.
type ZarbServer_getValidator_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getValidator_Params_Promise) Struct() (ZarbServer_getValidator_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getValidator_Params{s}, err
}

type ZarbServer_getValidator_Results struct{ capnp.Struct }

// ZarbServer_getValidator_Results_TypeID is the unique identifier for the type ZarbServer_getValidator_Results.
const ZarbServer_getValidator_Results_TypeID = 0xfb42d1f26b074c15

func NewZarbServer_getValidator_Results(s *capnp.Segment) (ZarbServer_getValidator_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getValidator_Results{st}, err
}

func NewRootZarbServer_getValidator_Results(s *capnp.Segment) (ZarbServer_getValidator_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getValidator_Results{st}, err
}

func ReadRootZarbServer_getValidator_Results(msg *capnp.Message) (ZarbServer_getValidator_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getValidator_Results{root.Struct()}, err
}

func (s ZarbServer_getValidator_Results) String() string {
	str, _ := text.Marshal(0xfb42d1f26b074c15, s.Struct)
	return str
}

func (s ZarbServer_getValidator_Results) Result() (ValidatorResult, error) {
	p, err := s.Struct.Ptr(0)
	return ValidatorResult{Struct: p.Struct()}, err
}

func (s ZarbServer_getValidator_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getValidator_Results) SetResult(v ValidatorResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated ValidatorResult struct, preferring placement in s's segment.
func (s ZarbServer_getValidator_Results) NewResult() (ValidatorResult, error) {
	ss, err := NewValidatorResult(s.Struct.Segment())
	if err != nil {
		return ValidatorResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_getValidator_Results_List is a list of ZarbServer_getValidator_Results.
type ZarbServer_getValidator_Results_List struct{ capnp.List }

// NewZarbServer_getValidator_Results creates a new list of ZarbServer_getValidator_Results.
func NewZarbServer_getValidator_Results_List(s *capnp.Segment, sz int32) (ZarbServer_getValidator_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_getValidator_Results_List{l}, err
}

func (s ZarbServer_getValidator_Results_List) At(i int) ZarbServer_getValidator_Results {
	return ZarbServer_getValidator_Results{s.List.Struct(i)}
}

func (s ZarbServer_getValidator_Results_List) Set(i int, v ZarbServer_getValidator_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getValidator_Results_List) String() string {
	str, _ := text.MarshalList(0xfb42d1f26b074c15, s.List)
	return str
}

// ZarbServer_getValidator_Results_Promise is a wrapper for a ZarbServer_getValidator_Results promised by a client call.
type ZarbServer_getValidator_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getValidator_Results_Promise) Struct() (ZarbServer_getValidator_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getValidator_Results{s}, err
}

func (p ZarbServer_getValidator_Results_Promise) Result() ValidatorResult_Promise {
	return ValidatorResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ZarbServer_getBlockchainInfo_Params struct{ capnp.Struct }

// ZarbServer_getBlockchainInfo_Params_TypeID is the unique identifier for the type ZarbServer_getBlockchainInfo_Params.
const ZarbServer_getBlockchainInfo_Params_TypeID = 0x8fb41d4bd35c5a30

func NewZarbServer_getBlockchainInfo_Params(s *capnp.Segment) (ZarbServer_getBlockchainInfo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ZarbServer_getBlockchainInfo_Params{st}, err
}

func NewRootZarbServer_getBlockchainInfo_Params(s *capnp.Segment) (ZarbServer_getBlockchainInfo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ZarbServer_getBlockchainInfo_Params{st}, err
}

func ReadRootZarbServer_getBlockchainInfo_Params(msg *capnp.Message) (ZarbServer_getBlockchainInfo_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getBlockchainInfo_Params{root.Struct()}, err
}

func (s ZarbServer_getBlockchainInfo_Params) String() string {
	str, _ := text.Marshal(0x8fb41d4bd35c5a30, s.Struct)
	return str
}

// ZarbServer_getBlockchainInfo_Params_List is a list of ZarbServer_getBlockchainInfo_Params.
type ZarbServer_getBlockchainInfo_Params_List struct{ capnp.List }

// NewZarbServer_getBlockchainInfo_Params creates a new list of ZarbServer_getBlockchainInfo_Params.
func NewZarbServer_getBlockchainInfo_Params_List(s *capnp.Segment, sz int32) (ZarbServer_getBlockchainInfo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return ZarbServer_getBlockchainInfo_Params_List{l}, err
}

func (s ZarbServer_getBlockchainInfo_Params_List) At(i int) ZarbServer_getBlockchainInfo_Params {
	return ZarbServer_getBlockchainInfo_Params{s.List.Struct(i)}
}

func (s ZarbServer_getBlockchainInfo_Params_List) Set(i int, v ZarbServer_getBlockchainInfo_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getBlockchainInfo_Params_List) String() string {
	str, _ := text.MarshalList(0x8fb41d4bd35c5a30, s.List)
	return str
}

// ZarbServer_getBlockchainInfo_Params_Promise is a wrapper for a ZarbServer_getBlockchainInfo_Params promised by a client call.
type ZarbServer_getBlockchainInfo_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getBlockchainInfo_Params_Promise) Struct() (ZarbServer_getBlockchainInfo_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getBlockchainInfo_Params{s}, err
}

type ZarbServer_getBlockchainInfo_Results struct{ capnp.Struct }

// ZarbServer_getBlockchainInfo_Results_TypeID is the unique identifier for the type ZarbServer_getBlockchainInfo_Results.
const ZarbServer_getBlockchainInfo_Results_TypeID = 0xa128fe760c2612c4

func NewZarbServer_getBlockchainInfo_Results(s *capnp.Segment) (ZarbServer_getBlockchainInfo_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getBlockchainInfo_Results{st}, err
}

func NewRootZarbServer_getBlockchainInfo_Results(s *capnp.Segment) (ZarbServer_getBlockchainInfo_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getBlockchainInfo_Results{st}, err
}

func ReadRootZarbServer_getBlockchainInfo_Results(msg *capnp.Message) (ZarbServer_getBlockchainInfo_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getBlockchainInfo_Results{root.Struct()}, err
}

func (s ZarbServer_getBlockchainInfo_Results) String() string {
	str, _ := text.Marshal(0xa128fe760c2612c4, s.Struct)
	return str
}

func (s ZarbServer_getBlockchainInfo_Results) Result() (BlockchainResult, error) {
	p, err := s.Struct.Ptr(0)
	return BlockchainResult{Struct: p.Struct()}, err
}

func (s ZarbServer_getBlockchainInfo_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getBlockchainInfo_Results) SetResult(v BlockchainResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated BlockchainResult struct, preferring placement in s's segment.
func (s ZarbServer_getBlockchainInfo_Results) NewResult() (BlockchainResult, error) {
	ss, err := NewBlockchainResult(s.Struct.Segment())
	if err != nil {
		return BlockchainResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_getBlockchainInfo_Results_List is a list of ZarbServer_getBlockchainInfo_Results.
type ZarbServer_getBlockchainInfo_Results_List struct{ capnp.List }

// NewZarbServer_getBlockchainInfo_Results creates a new list of ZarbServer_getBlockchainInfo_Results.
func NewZarbServer_getBlockchainInfo_Results_List(s *capnp.Segment, sz int32) (ZarbServer_getBlockchainInfo_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_getBlockchainInfo_Results_List{l}, err
}

func (s ZarbServer_getBlockchainInfo_Results_List) At(i int) ZarbServer_getBlockchainInfo_Results {
	return ZarbServer_getBlockchainInfo_Results{s.List.Struct(i)}
}

func (s ZarbServer_getBlockchainInfo_Results_List) Set(i int, v ZarbServer_getBlockchainInfo_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getBlockchainInfo_Results_List) String() string {
	str, _ := text.MarshalList(0xa128fe760c2612c4, s.List)
	return str
}

// ZarbServer_getBlockchainInfo_Results_Promise is a wrapper for a ZarbServer_getBlockchainInfo_Results promised by a client call.
type ZarbServer_getBlockchainInfo_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getBlockchainInfo_Results_Promise) Struct() (ZarbServer_getBlockchainInfo_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getBlockchainInfo_Results{s}, err
}

func (p ZarbServer_getBlockchainInfo_Results_Promise) Result() BlockchainResult_Promise {
	return BlockchainResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ZarbServer_getNetworkInfo_Params struct{ capnp.Struct }

// ZarbServer_getNetworkInfo_Params_TypeID is the unique identifier for the type ZarbServer_getNetworkInfo_Params.
const ZarbServer_getNetworkInfo_Params_TypeID = 0xe051a47070c97f9e

func NewZarbServer_getNetworkInfo_Params(s *capnp.Segment) (ZarbServer_getNetworkInfo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ZarbServer_getNetworkInfo_Params{st}, err
}

func NewRootZarbServer_getNetworkInfo_Params(s *capnp.Segment) (ZarbServer_getNetworkInfo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ZarbServer_getNetworkInfo_Params{st}, err
}

func ReadRootZarbServer_getNetworkInfo_Params(msg *capnp.Message) (ZarbServer_getNetworkInfo_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getNetworkInfo_Params{root.Struct()}, err
}

func (s ZarbServer_getNetworkInfo_Params) String() string {
	str, _ := text.Marshal(0xe051a47070c97f9e, s.Struct)
	return str
}

// ZarbServer_getNetworkInfo_Params_List is a list of ZarbServer_getNetworkInfo_Params.
type ZarbServer_getNetworkInfo_Params_List struct{ capnp.List }

// NewZarbServer_getNetworkInfo_Params creates a new list of ZarbServer_getNetworkInfo_Params.
func NewZarbServer_getNetworkInfo_Params_List(s *capnp.Segment, sz int32) (ZarbServer_getNetworkInfo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return ZarbServer_getNetworkInfo_Params_List{l}, err
}

func (s ZarbServer_getNetworkInfo_Params_List) At(i int) ZarbServer_getNetworkInfo_Params {
	return ZarbServer_getNetworkInfo_Params{s.List.Struct(i)}
}

func (s ZarbServer_getNetworkInfo_Params_List) Set(i int, v ZarbServer_getNetworkInfo_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getNetworkInfo_Params_List) String() string {
	str, _ := text.MarshalList(0xe051a47070c97f9e, s.List)
	return str
}

// ZarbServer_getNetworkInfo_Params_Promise is a wrapper for a ZarbServer_getNetworkInfo_Params promised by a client call.
type ZarbServer_getNetworkInfo_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getNetworkInfo_Params_Promise) Struct() (ZarbServer_getNetworkInfo_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getNetworkInfo_Params{s}, err
}

type ZarbServer_getNetworkInfo_Results struct{ capnp.Struct }

// ZarbServer_getNetworkInfo_Results_TypeID is the unique identifier for the type ZarbServer_getNetworkInfo_Results.
const ZarbServer_getNetworkInfo_Results_TypeID = 0x8d7ad02d9eab8fb7

func NewZarbServer_getNetworkInfo_Results(s *capnp.Segment) (ZarbServer_getNetworkInfo_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getNetworkInfo_Results{st}, err
}

func NewRootZarbServer_getNetworkInfo_Results(s *capnp.Segment) (ZarbServer_getNetworkInfo_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getNetworkInfo_Results{st}, err
}

func ReadRootZarbServer_getNetworkInfo_Results(msg *capnp.Message) (ZarbServer_getNetworkInfo_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getNetworkInfo_Results{root.Struct()}, err
}

func (s ZarbServer_getNetworkInfo_Results) String() string {
	str, _ := text.Marshal(0x8d7ad02d9eab8fb7, s.Struct)
	return str
}

func (s ZarbServer_getNetworkInfo_Results) Result() (NetworkResult, error) {
	p, err := s.Struct.Ptr(0)
	return NetworkResult{Struct: p.Struct()}, err
}

func (s ZarbServer_getNetworkInfo_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getNetworkInfo_Results) SetResult(v NetworkResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated NetworkResult struct, preferring placement in s's segment.
func (s ZarbServer_getNetworkInfo_Results) NewResult() (NetworkResult, error) {
	ss, err := NewNetworkResult(s.Struct.Segment())
	if err != nil {
		return NetworkResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_getNetworkInfo_Results_List is a list of ZarbServer_getNetworkInfo_Results.
type ZarbServer_getNetworkInfo_Results_List struct{ capnp.List }

// NewZarbServer_getNetworkInfo_Results creates a new list of ZarbServer_getNetworkInfo_Results.
func NewZarbServer_getNetworkInfo_Results_List(s *capnp.Segment, sz int32) (ZarbServer_getNetworkInfo_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_getNetworkInfo_Results_List{l}, err
}

func (s ZarbServer_getNetworkInfo_Results_List) At(i int) ZarbServer_getNetworkInfo_Results {
	return ZarbServer_getNetworkInfo_Results{s.List.Struct(i)}
}

func (s ZarbServer_getNetworkInfo_Results_List) Set(i int, v ZarbServer_getNetworkInfo_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getNetworkInfo_Results_List) String() string {
	str, _ := text.MarshalList(0x8d7ad02d9eab8fb7, s.List)
	return str
}

// ZarbServer_getNetworkInfo_Results_Promise is a wrapper for a ZarbServer_getNetworkInfo_Results promised by a client call.
type ZarbServer_getNetworkInfo_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getNetworkInfo_Results_Promise) Struct() (ZarbServer_getNetworkInfo_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getNetworkInfo_Results{s}, err
}

func (p ZarbServer_getNetworkInfo_Results_Promise) Result() NetworkResult_Promise {
	return NetworkResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ZarbServer_sendRawTransaction_Params struct{ capnp.Struct }

// ZarbServer_sendRawTransaction_Params_TypeID is the unique identifier for the type ZarbServer_sendRawTransaction_Params.
const ZarbServer_sendRawTransaction_Params_TypeID = 0x8317eae56a55f0ba

func NewZarbServer_sendRawTransaction_Params(s *capnp.Segment) (ZarbServer_sendRawTransaction_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_sendRawTransaction_Params{st}, err
}

func NewRootZarbServer_sendRawTransaction_Params(s *capnp.Segment) (ZarbServer_sendRawTransaction_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_sendRawTransaction_Params{st}, err
}

func ReadRootZarbServer_sendRawTransaction_Params(msg *capnp.Message) (ZarbServer_sendRawTransaction_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_sendRawTransaction_Params{root.Struct()}, err
}

func (s ZarbServer_sendRawTransaction_Params) String() string {
	str, _ := text.Marshal(0x8317eae56a55f0ba, s.Struct)
	return str
}

func (s ZarbServer_sendRawTransaction_Params) RawTx() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ZarbServer_sendRawTransaction_Params) HasRawTx() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_sendRawTransaction_Params) SetRawTx(v []byte) error {
	return s.Struct.SetData(0, v)
}

// ZarbServer_sendRawTransaction_Params_List is a list of ZarbServer_sendRawTransaction_Params.
type ZarbServer_sendRawTransaction_Params_List struct{ capnp.List }

// NewZarbServer_sendRawTransaction_Params creates a new list of ZarbServer_sendRawTransaction_Params.
func NewZarbServer_sendRawTransaction_Params_List(s *capnp.Segment, sz int32) (ZarbServer_sendRawTransaction_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_sendRawTransaction_Params_List{l}, err
}

func (s ZarbServer_sendRawTransaction_Params_List) At(i int) ZarbServer_sendRawTransaction_Params {
	return ZarbServer_sendRawTransaction_Params{s.List.Struct(i)}
}

func (s ZarbServer_sendRawTransaction_Params_List) Set(i int, v ZarbServer_sendRawTransaction_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_sendRawTransaction_Params_List) String() string {
	str, _ := text.MarshalList(0x8317eae56a55f0ba, s.List)
	return str
}

// ZarbServer_sendRawTransaction_Params_Promise is a wrapper for a ZarbServer_sendRawTransaction_Params promised by a client call.
type ZarbServer_sendRawTransaction_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_sendRawTransaction_Params_Promise) Struct() (ZarbServer_sendRawTransaction_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_sendRawTransaction_Params{s}, err
}

type ZarbServer_sendRawTransaction_Results struct{ capnp.Struct }

// ZarbServer_sendRawTransaction_Results_TypeID is the unique identifier for the type ZarbServer_sendRawTransaction_Results.
const ZarbServer_sendRawTransaction_Results_TypeID = 0xc0689e5f33bf949d

func NewZarbServer_sendRawTransaction_Results(s *capnp.Segment) (ZarbServer_sendRawTransaction_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_sendRawTransaction_Results{st}, err
}

func NewRootZarbServer_sendRawTransaction_Results(s *capnp.Segment) (ZarbServer_sendRawTransaction_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_sendRawTransaction_Results{st}, err
}

func ReadRootZarbServer_sendRawTransaction_Results(msg *capnp.Message) (ZarbServer_sendRawTransaction_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_sendRawTransaction_Results{root.Struct()}, err
}

func (s ZarbServer_sendRawTransaction_Results) String() string {
	str, _ := text.Marshal(0xc0689e5f33bf949d, s.Struct)
	return str
}

func (s ZarbServer_sendRawTransaction_Results) Result() (SendTransactionResult, error) {
	p, err := s.Struct.Ptr(0)
	return SendTransactionResult{Struct: p.Struct()}, err
}

func (s ZarbServer_sendRawTransaction_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_sendRawTransaction_Results) SetResult(v SendTransactionResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated SendTransactionResult struct, preferring placement in s's segment.
func (s ZarbServer_sendRawTransaction_Results) NewResult() (SendTransactionResult, error) {
	ss, err := NewSendTransactionResult(s.Struct.Segment())
	if err != nil {
		return SendTransactionResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_sendRawTransaction_Results_List is a list of ZarbServer_sendRawTransaction_Results.
type ZarbServer_sendRawTransaction_Results_List struct{ capnp.List }

// NewZarbServer_sendRawTransaction_Results creates a new list of ZarbServer_sendRawTransaction_Results.
func NewZarbServer_sendRawTransaction_Results_List(s *capnp.Segment, sz int32) (ZarbServer_sendRawTransaction_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_sendRawTransaction_Results_List{l}, err
}

func (s ZarbServer_sendRawTransaction_Results_List) At(i int) ZarbServer_sendRawTransaction_Results {
	return ZarbServer_sendRawTransaction_Results{s.List.Struct(i)}
}

func (s ZarbServer_sendRawTransaction_Results_List) Set(i int, v ZarbServer_sendRawTransaction_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_sendRawTransaction_Results_List) String() string {
	str, _ := text.MarshalList(0xc0689e5f33bf949d, s.List)
	return str
}

// ZarbServer_sendRawTransaction_Results_Promise is a wrapper for a ZarbServer_sendRawTransaction_Results promised by a client call.
type ZarbServer_sendRawTransaction_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_sendRawTransaction_Results_Promise) Struct() (ZarbServer_sendRawTransaction_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_sendRawTransaction_Results{s}, err
}

func (p ZarbServer_sendRawTransaction_Results_Promise) Result() SendTransactionResult_Promise {
	return SendTransactionResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_84b56bd0975dfd33 = "x\xda\xacX}\x8c\x14g\x19\x7f\x9ewv\xf6\xe3n" +
	"\xb9\xdda\x964%\xd0=\xcca\x0e,-p%%" +
	"\xfc\xe1\xc2y\xadG\x0bzs\x8b\x8d=\xad:\xb7\xfb" +
	"\x96\x1bn\xd99f\xe6\xee(JN\xae6\x02\x16\xaa" +
	"X\xadm\x84\x14ZcJ\xa5\x8d(\xda#\x12%V" +
	"\x1bH\x9bR\x08\xb1mhm\x09hiZ\x01\x0d\xb1" +
	"Da\xcd\xf3\xce\xce\xec\xecr_\x10\xff\xdb}\xe6\x99" +
	"\xe7\xfb\xf9\xfd\xdey\xe7\x87\xc2K\xd9\x02\xb9\x14\x03\xd0" +
	"\x1c9\\\xfa\xe0\xf2\xa3\xf7\x873\xa9\x87A\x99\x86\xa5" +
	"\x96+\x0f<q\xac\xf7\xc0w@\x96\"\x00-gC" +
	"u\xa8^\x0aE\x00\xd4\x8b\xa1\x17\x01K\x07/|i" +
	"\xcd\xd9\x0foz\x18\x94F\x04\x90\x91\x94\xb6\xc8\xc7\x11" +
	"P\xdd)g\x00K\xc7;\xffx\xf8\x96\xcf\xcc~$" +
	"\xa8pH\xdeO\x0a\xaf\x09\x85\xdf>\xf6\xfc\xaey\xc7" +
	"6l\x0b*|,\x1f$\x85+\xa4p\xf5\xe8\xf1O" +
	"\xe6\xbcrq\x9b\xd6\x88\x0c\x80\\\xb7\xcc\x0c\x0f\xd3\xe3" +
	"9\xe1A\xc0\x92\xae\xacyU\xff\xf1\x13\xdb\xab\"\x08" +
	"?E\x0aO\x86\xc9\xc1\x85\xbd?\x19:p\xea\xdd\xed" +
	"\xa0MC\x16H(LY\x8c\x84O\xab\x7f\xa2_-" +
	"\x87\xc3\xaf `i~\xd7WO\xdc;\xf3\xd7\x8f\xb9" +
	"\xe6\x84\xbb\x9d\xd1\xa3\x08\xa1RT\xfd\xc5\xd7\xd6\xa5{" +
	"\x1f\x07\xad\x11\xbdG?\x88\x8a@wG\xc9\xd1\xcbS" +
	"?\x1d\x1f\xb8\xda\xbc;\x18\xc9\xe1\xa8\xa8\xc5I\xa1\xf0" +
	"\x95\xc1\xe7\xcf\x17\xf0\x97{\x82\x0a\x97\\\x0br\x8c\x14" +
	"n\xea\xa8\xfb\xec\xa9\x95\x87\x9e\xa9)\xbdP\x9c\x1d\x9b" +
	"\x8e\xea\xa2\x18\x05\xbd@(\xb7\xc5\x87\xcc+?\xfc\xd7" +
	"K\xa3\xf4I\xd5bo\xab\x0f\x08\xdd\xfbc\xd4\xa6\x9e" +
	"\xdf\\M\xcd\xb8s\xf0\xd0h=\xbd\x14[\x82\xaa\\" +
	"G\xcaXG\xca\xcf\xf5\x0e\xff\xea\xc3c\x9b\x0fQ\xc1" +
	"\x02\xdan-\xea\x16\xa2\xbaO(?WGQ\xec|" +
	"\xfc\xf7-_\xdf\xd5\xf3\x87`NG\xea\xde\xa6\x9c\xde" +
	"\x11\x0as.\xcd=\xbf\xeft\xe3\xe1QrR\xaf\xd4" +
	"\x1dUc\xf5\xf4K\xae\xa7V7\xe7\xbf\xfby\xbb\xf0" +
	"\x9a[`\xd7\xd6\xa2\xfa\x1dd\xeb\xaez\xea\xf5=s" +
	"\xff\xbc\x7f$\xf4\x97\xd7k\"s5\x7fV\xdf\x85\xea" +
	"\x88\xb0v@h\x8ft\xed\x98\xado\xfd\xeb\x09\x08\xda" +
	"S\xe2b\xf6f\xc5I##\x7f\xb1\xff\xef\xaf\x8f\xbc" +
	"K\xf6\xa4\x80=1\xe0\x9b\xe2\xc7\xd5mq1N\xf1" +
	";\x19`i\xd7\xd0\x91\xbe\xbeg\xb5\xf7\x02\xa3q\xb6" +
	"a?\x8d\xc63\xa5\xef\xbd\xb0mx\xc6G\xa3\xf5\xed" +
	"d\xc3\\T\xcf6\x90\xc5\xf7\x1b\xa8 \xdbg\xfe\xad" +
	"\xf7\xdf+\xde\xfaGUX\x98\xd8Ca)\x09\x0a\xeb" +
	"\x9b\xdf\xdf3\x0b\x9f>x\xbe\xc6\x1c#\xc5u\x89\xe9" +
	"\xa8nJ\x90\xb9\x8dBy\xc6-?\x1f\xfei\xc7\x07" +
	"\x97\x82\x0d8\x97\xd8J\xd6.'\xc8\xdf\x99\xa1\x13S" +
	"^8\x1d\xbe\x0c\xca\xb4@\x8e\x80-7'\x19\xaa\xb3" +
	"\x93\xf4\xc2\xacd\x84\xa9[\x94\x08@\xa9~\xda7~" +
	"\xf4\xe2\xddw_\xae\xad\xb1\xc8w\x9dR\x87\xea&\xd2" +
	"k\xd9\xa8\xa4i_\xa6\xad\x88\xf4\xfe\xf3\x8d\xd6\xffT" +
	"\xed\xf7\xd4\xbdb\xbf\xa7\x92\xfb\xc1\xc1\xc1\xdbsz_" +
	"Q\xea\xbb}\x83nu\xdfF\xbf\xfb\x96\xb4\x16\xcc\\" +
	"o'\xb7\xfb\x0b\x0e@\x07\xa2\x16\x97B\x00!\x04P" +
	"\xee\x9a\x0b\xa0-\x95P[\xc1PALQ\x91\x94\xe5" +
	"$l\x93P\xeb`\xa80\x96\",PV.\x04\xd0" +
	"\xda%\xd4V1L\xf4\xe8v\x0fN\x01\x86S\x00\x13" +
	"y\xdd\xd1\xbd?\xe9n\xf2\x85\xc9\xca\xc2\x00b2\x10" +
	"Y\xb8*\xb2.\xdd\xea\xcerk\x80[\xb7\xd9\xbc\x98" +
	"\xef\xd4\x07WYz\xd1\xd6s\x8ea\x16\x9b:tK" +
	"_\x8b\xb6\x16\xf2\xc3\x9dBAD%\xd4R\x0c\xd3\x96" +
	">\xb8j\xbd\xe7\xd8w \x8f\xe5`5wD!\xda" +
	"\xb9\xb1\xba\xc7i\xeaH\x93\xf5*\xe3s+\xc6\xab2" +
	"\x9c\x94\xed/pg\xd0\xb4z\x97\x17\x1f4\x9b:3" +
	"\xa2\xd8U\xc6\x97T\x8cg,\xf1\x18\x93\x95\xe1\xab\xa9" +
	"\xd2\x84I\xb8\xb5\xb1\xc9\xa4\xe7a\x0eyh\x92P\x9b" +
	"O\xaddn+\xe7u\x02h\xb7J\xa8-f\x98\xe9" +
	"\x11\x99c\x0c\x18\xc6\x00K\x03\xdc\xea6m\xc3\x01|" +
	"\x08C\xc004\xc9\x00\x96\xe5rf\x7f\xd1i\x12\x13" +
	"%M\"K\x1fik\xb2dUN\xda\xb9\x1e\xc9s" +
	"\x8b\xe6\xb3\xd17\xf8F+\x80\xf6\xaa\x84\xda\x9b\x81\xf9" +
	"<I\x8d:&\xa1v\x8a!\x96\xc7\xf3-\x0b@{" +
	"SB\xed\x0cCE\xc2\x14J\x00\xca\xfb\x94\xfd{\x12" +
	"j\x1f1TB,\x85!\x00\xe5\x1c\x99<#\xa1v" +
	"\x81\xa1\"K)\x94\x01\x94\x8f\xf7\x00h\x17$\xd4\xfe" +
	"\xcbP\x09\x87R\x18\x06P.\x93\xcdO$\xcc\x86\x90" +
	"\xa1\x12\x91S\x02G\x11\x87\x01:Q\xc2l\x1c\x19\x0e" +
	"\x0dp\xcb6\xcc\xa2W\xc1\x84c\xac\xe5(\x03C\x19" +
	"\xb0T\xd0m\xd1/H\xf7\xb6\x07\x07\xcavt\x87\xb7" +
	"\xeb6\xa0/\x1br\xd6\xdbU:\xf4\xee\xe7\xb8\xe5\xa0" +
	"\xf1\xa0\x91#\xf5H\x95\x05\xd3r\x0c\xc70!]\xcc" +
	"r\x9e\xf7\xe5}\x96\xd9g\xda\xdc\xc2e\xf9\xbc\xc5m" +
	"\x1b\xae\x19\xe2\xf0D\xb3\x95\xeb\xd1\x8d\xa2\x98\xe3\xf2\x90" +
	"\xc1u/\xd7$\x17\xc0\x9b\xc4\x1b\x08\xcd\x853\x9cx" +
	"\xf8|\x82\xbd\x8e\x15\x0b\x82\xd0\xa4w\xd9\xa7\xfd\x1aG" +
	"\xd5X\\^\x1e\x0a_*84\xecc\x00P\x10U" +
	"\xc7\xd8\x98\xd6\x82)\xe5zk\x00}\xc9h\x80>\\" +
	"\xc1n\x1f\xd0\xb5O\x01h+$\xd4\xbe,\xa0A\xcf" +
	"s\x0b\x93\x95\x03\\9\x8b\xda)\x04LVX\xcb\xd5" +
	"\x898\xebmLV\xce\x1e\xe3\xe6\x1f(m\xc6\xeda" +
	"M\xfc\xd3'MH\xdd\x95\xf8%#?*\x1d\x95\x9c" +
	"\xb2;\x88\xd0\x8e\xd6\x96s\x14\x9a\x14\x13\xd6\x99\xf6#" +
	"\x1b\xa3\xebe(\xf5\xf6\xfcF\xd8m\xd2\xf0\xe9\x1f\xc4" +
	"\xc6\x85\xcfU\xebm\x97\xdcG1\xd7D\x11\xebv\x0f" +
	"\xb7\xb1\x01\xb0CBQ\x89\x86\xeb\xc4{\x8f\x8e\x03\x94" +
	"\xd3Z\xa1\x1c\xafWA\xc6\x19\xd2]\x10\xf2\x0b?\x1e" +
	"\xe5\x84\xaaB\xc8\xf2b>P\xad\xc0\xbe\x8c\xcex\xbe" +
	"{\x9a\x9ff\x09\xb5;\x18f\x08f\xfbm\xcfS`" +
	"H\xae\x1b\x05\xbc\xd3B\xc0\xf9\xf4\xf1s\x0fz\x1b/" +
	"\xed\xea.vp\x8e\x82\x02\x9b=Gj\x0c\x97\x00d" +
	"CD8I\xf4}\xa9S\xb0\x15 \x1b%q\x8a\xe8" +
	"\x89\xa1X\x0bU\xc1n\x80l\x92\xe43H.1\xc1" +
	"\x85\xea\xcd\xc2L\x8a\xe4\x8d$\x0fI\x82\x0e\xd5\x99\xd8" +
	"\x09\x90\x9dA\xf2f\x92\xcb\x8d\x82\x11\xd5\xd9\xb8\x17 " +
	"\xdbL\xf2;H\x1ef\x82\x14\xd5\x05\xc2\xce\xad$_" +
	",hQriq\x11n\x05\xc8.&y\x1b\xc9\xa3" +
	"\xa1\x14F\x01\xd4eD\x97\xd9\xa5$_A\xf2\x98\x9c" +
	"\xc2\x18\x80\xba\x1c-\x80l;\xc9W\xe15\xbd\x1aZ" +
	"k\x16\x8d^na\x1c\x18\xc6\x01KE3\xcf\xef\xe3" +
	"\x96\xed.rY\x9a\xe9\xe3\xdcZ\xde\xe6+\xf5\xf5w" +
	"\x17\x8c\xdc\xbd\x9c\xea\xec\xc9\x8c\xa2\xe1\x18z\xa1\x15i" +
	"\xbb\xdb\xcc\xc1b\xa2`\xeayD`\x88\xe0/\xb2\xd7" +
	"\x15\x8b\xe7\xb81\xc0\xf3\xb8\x92\xdb\xb6\xbe\x9a\xdb\x00\xfe" +
	"3\xa38\xa0\x17\x8c\xfcJ\xf4\x1e]\xf3\x16\xa4[\x1f" +
	"r\xb8}]\xa7\xa9\xe0\xb9\xb1<ec\xe0\xd3}\xe4" +
	"]wL\xab\x93'F\x81\xa7\x09\xc9c\xbc(|\xdb" +
	"\xb4\xe5\x91\x9aI\xff\x7fnyuJ\xe5\xe4'\xdcn" +
	"\x9f\x09\xe6-,\xafw\x1b\xab\xed~\x9a\xfe\xfa\x00\x97" +
	"\xac|o\x02N\x1a\xea\xdc\xb3\xb5\xcbK6\xc0\x84\xd0" +
	"\xec_\xdf\x8c\xcby\x15\x1f\xe0\x9ene\x00\xef\xa6%" +
	"\xf0Iy\xf1\x1e`\xca\xb9\x08V\xeeq\xd0\xbb\x06Q" +
	"\xde\xd9\x00L9\x19A\xe6\x7fh\xa3w\xc1\xa1\x1c\xa1" +
	"g\x87#(y\x9f\xf4\x81k\x9a\x03]\xc0\x94}\x11" +
	"\x0c\xf9_\xc2\xe8}D*\xbb\xd7\x00S\x9e\x8c\xa0\xec" +
	"\xdf\xc3\xa0w\xab\xa2l\xdb\x01L\xd9\x12\xc1\xb0\xff!" +
	"\x8e\xde\xdd\x91\xb2\x91\xfc\xf5G0\xe2_H\xa1w1" +
	"\xa1\x18O\x01Sx\xa4\xe4\xd5\x12\x00\x96b\xe5_\xc6" +
	"=\x1f\xba\"\x81\xaf\x90q\x11\xd6\x15\x09\xaa\x01\xa9X" +
	"\xd6\x10S\x09\x09\x9a\xcb\x80\x15\xf4N\x81h\xbaR1" +
	"E\x90q\x97h)\x96<\xb2E\x0f\xc0%\xb2\xdf\x81" +
	"c\xf5\x87\xce7\xde\xf1Ft(\xe5\xb7}#\xcd\xf9" +
	"\xb7$\xd46Wf\xff\x11\x9a\xc1oK\xa8=Z\x81" +
	"]eK\x17\x80\xb6YB\xed\xd9\x0a\xe6*\xbb\xe9\xed" +
	"\xa7%\xd4~W\x01\\e\x84\x84/I\xa8\xbd\xcc\xb0" +
	"$>\x97\xab?\x04\xd2\x96\xd9_\xccc\x14\x18F\x01" +
	"K9s\xedZ\xc3q8H\x95\xe1\x0e\x95\xd9[\xef" +
	"\xb6y\xd1\xe1\x1c\xf0\x9aG\xb6\xb1\xba\xa8;\xfd\x16 " +
	"\xbfA \xe8\xe4vbR\x07_\xffB\xc6]\x82\xff" +
	"\x05\x00\x00\xff\xffu\xc9k\x12"

func init() {
	schemas.Register(schema_84b56bd0975dfd33,
		0x83143f06598cf9e8,
		0x8317eae56a55f0ba,
		0x85252b1ec1c352d2,
		0x8d7ad02d9eab8fb7,
		0x8df1c729f8d2ca00,
		0x8e979661cc6a1161,
		0x8ededcb57f98aaf0,
		0x8fb41d4bd35c5a30,
		0x946b1f715eac1308,
		0xa128fe760c2612c4,
		0xa2b1016cefab775b,
		0xa3bd4ddc3e0a5017,
		0xb8f393fd6f7f0c44,
		0xbd77371c14feb668,
		0xbd88d0eab3826ba9,
		0xc0689e5f33bf949d,
		0xc120e2adef2af529,
		0xcd6c734787642800,
		0xcfd704b9b2c62a4a,
		0xd3df8a6125925ab9,
		0xdeb9cfe7754f053f,
		0xe051a47070c97f9e,
		0xec1c828dae8bffa3,
		0xeed94cf76be61d8e,
		0xefbaa00121a2907b,
		0xf5e8509c82a71e1c,
		0xf906e2ae0dd37fe4,
		0xf94646af9560150b,
		0xfb42d1f26b074c15)
}
