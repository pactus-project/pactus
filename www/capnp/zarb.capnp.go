// Code generated by capnpc-go. DO NOT EDIT.

package capnp

import (
	context "golang.org/x/net/context"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Header struct{ capnp.Struct }

// Header_TypeID is the unique identifier for the type Header.
const Header_TypeID = 0x8ededcb57f98aaf0

func NewHeader(s *capnp.Segment) (Header, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Header{st}, err
}

func NewRootHeader(s *capnp.Segment) (Header, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Header{st}, err
}

func ReadRootHeader(msg *capnp.Message) (Header, error) {
	root, err := msg.RootPtr()
	return Header{root.Struct()}, err
}

func (s Header) String() string {
	str, _ := text.Marshal(0x8ededcb57f98aaf0, s.Struct)
	return str
}

func (s Header) Version() uint8 {
	return s.Struct.Uint8(0)
}

func (s Header) SetVersion(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s Header) Time() int32 {
	return int32(s.Struct.Uint32(4))
}

func (s Header) SetTime(v int32) {
	s.Struct.SetUint32(4, uint32(v))
}

func (s Header) PrevBlockHash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Header) HasPrevBlockHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Header) SetPrevBlockHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Header) StateRoot() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Header) HasStateRoot() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Header) SetStateRoot(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s Header) SortitionSeed() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s Header) HasSortitionSeed() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Header) SetSortitionSeed(v []byte) error {
	return s.Struct.SetData(2, v)
}

func (s Header) ProposerAddress() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s Header) HasProposerAddress() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Header) ProposerAddressBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s Header) SetProposerAddress(v string) error {
	return s.Struct.SetText(3, v)
}

// Header_List is a list of Header.
type Header_List struct{ capnp.List }

// NewHeader creates a new list of Header.
func NewHeader_List(s *capnp.Segment, sz int32) (Header_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return Header_List{l}, err
}

func (s Header_List) At(i int) Header { return Header{s.List.Struct(i)} }

func (s Header_List) Set(i int, v Header) error { return s.List.SetStruct(i, v.Struct) }

func (s Header_List) String() string {
	str, _ := text.MarshalList(0x8ededcb57f98aaf0, s.List)
	return str
}

// Header_Promise is a wrapper for a Header promised by a client call.
type Header_Promise struct{ *capnp.Pipeline }

func (p Header_Promise) Struct() (Header, error) {
	s, err := p.Pipeline.Struct()
	return Header{s}, err
}

type Certificate struct{ capnp.Struct }

// Certificate_TypeID is the unique identifier for the type Certificate.
const Certificate_TypeID = 0xf94646af9560150b

func NewCertificate(s *capnp.Segment) (Certificate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Certificate{st}, err
}

func NewRootCertificate(s *capnp.Segment) (Certificate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Certificate{st}, err
}

func ReadRootCertificate(msg *capnp.Message) (Certificate, error) {
	root, err := msg.RootPtr()
	return Certificate{root.Struct()}, err
}

func (s Certificate) String() string {
	str, _ := text.Marshal(0xf94646af9560150b, s.Struct)
	return str
}

func (s Certificate) Round() int16 {
	return int16(s.Struct.Uint16(0))
}

func (s Certificate) SetRound(v int16) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Certificate) Committers() (capnp.Int32List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.Int32List{List: p.List()}, err
}

func (s Certificate) HasCommitters() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Certificate) SetCommitters(v capnp.Int32List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewCommitters sets the committers field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s Certificate) NewCommitters(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Certificate) Absentees() (capnp.Int32List, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.Int32List{List: p.List()}, err
}

func (s Certificate) HasAbsentees() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Certificate) SetAbsentees(v capnp.Int32List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewAbsentees sets the absentees field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s Certificate) NewAbsentees(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Certificate) Signature() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s Certificate) HasSignature() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Certificate) SetSignature(v []byte) error {
	return s.Struct.SetData(2, v)
}

// Certificate_List is a list of Certificate.
type Certificate_List struct{ capnp.List }

// NewCertificate creates a new list of Certificate.
func NewCertificate_List(s *capnp.Segment, sz int32) (Certificate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return Certificate_List{l}, err
}

func (s Certificate_List) At(i int) Certificate { return Certificate{s.List.Struct(i)} }

func (s Certificate_List) Set(i int, v Certificate) error { return s.List.SetStruct(i, v.Struct) }

func (s Certificate_List) String() string {
	str, _ := text.MarshalList(0xf94646af9560150b, s.List)
	return str
}

// Certificate_Promise is a wrapper for a Certificate promised by a client call.
type Certificate_Promise struct{ *capnp.Pipeline }

func (p Certificate_Promise) Struct() (Certificate, error) {
	s, err := p.Pipeline.Struct()
	return Certificate{s}, err
}

type Block struct{ capnp.Struct }

// Block_TypeID is the unique identifier for the type Block.
const Block_TypeID = 0xb8f393fd6f7f0c44

func NewBlock(s *capnp.Segment) (Block, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Block{st}, err
}

func NewRootBlock(s *capnp.Segment) (Block, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Block{st}, err
}

func ReadRootBlock(msg *capnp.Message) (Block, error) {
	root, err := msg.RootPtr()
	return Block{root.Struct()}, err
}

func (s Block) String() string {
	str, _ := text.Marshal(0xb8f393fd6f7f0c44, s.Struct)
	return str
}

func (s Block) Header() (Header, error) {
	p, err := s.Struct.Ptr(0)
	return Header{Struct: p.Struct()}, err
}

func (s Block) HasHeader() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Block) SetHeader(v Header) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHeader sets the header field to a newly
// allocated Header struct, preferring placement in s's segment.
func (s Block) NewHeader() (Header, error) {
	ss, err := NewHeader(s.Struct.Segment())
	if err != nil {
		return Header{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Block) PrevCert() (Certificate, error) {
	p, err := s.Struct.Ptr(1)
	return Certificate{Struct: p.Struct()}, err
}

func (s Block) HasPrevCert() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Block) SetPrevCert(v Certificate) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewPrevCert sets the prevCert field to a newly
// allocated Certificate struct, preferring placement in s's segment.
func (s Block) NewPrevCert() (Certificate, error) {
	ss, err := NewCertificate(s.Struct.Segment())
	if err != nil {
		return Certificate{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Block) Txs() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.DataList{List: p.List()}, err
}

func (s Block) HasTxs() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Block) SetTxs(v capnp.DataList) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewTxs sets the txs field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Block) NewTxs(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// Block_List is a list of Block.
type Block_List struct{ capnp.List }

// NewBlock creates a new list of Block.
func NewBlock_List(s *capnp.Segment, sz int32) (Block_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Block_List{l}, err
}

func (s Block_List) At(i int) Block { return Block{s.List.Struct(i)} }

func (s Block_List) Set(i int, v Block) error { return s.List.SetStruct(i, v.Struct) }

func (s Block_List) String() string {
	str, _ := text.MarshalList(0xb8f393fd6f7f0c44, s.List)
	return str
}

// Block_Promise is a wrapper for a Block promised by a client call.
type Block_Promise struct{ *capnp.Pipeline }

func (p Block_Promise) Struct() (Block, error) {
	s, err := p.Pipeline.Struct()
	return Block{s}, err
}

func (p Block_Promise) Header() Header_Promise {
	return Header_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Block_Promise) PrevCert() Certificate_Promise {
	return Certificate_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type BlockchainInfoResult struct{ capnp.Struct }

// BlockchainInfoResult_TypeID is the unique identifier for the type BlockchainInfoResult.
const BlockchainInfoResult_TypeID = 0xae39f74773bfa089

func NewBlockchainInfoResult(s *capnp.Segment) (BlockchainInfoResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return BlockchainInfoResult{st}, err
}

func NewRootBlockchainInfoResult(s *capnp.Segment) (BlockchainInfoResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return BlockchainInfoResult{st}, err
}

func ReadRootBlockchainInfoResult(msg *capnp.Message) (BlockchainInfoResult, error) {
	root, err := msg.RootPtr()
	return BlockchainInfoResult{root.Struct()}, err
}

func (s BlockchainInfoResult) String() string {
	str, _ := text.Marshal(0xae39f74773bfa089, s.Struct)
	return str
}

func (s BlockchainInfoResult) LastBlockHeight() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s BlockchainInfoResult) SetLastBlockHeight(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s BlockchainInfoResult) LastBlockHash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s BlockchainInfoResult) HasLastBlockHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s BlockchainInfoResult) SetLastBlockHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s BlockchainInfoResult) Committee() (Committee, error) {
	p, err := s.Struct.Ptr(1)
	return Committee{Struct: p.Struct()}, err
}

func (s BlockchainInfoResult) HasCommittee() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s BlockchainInfoResult) SetCommittee(v Committee) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewCommittee sets the committee field to a newly
// allocated Committee struct, preferring placement in s's segment.
func (s BlockchainInfoResult) NewCommittee() (Committee, error) {
	ss, err := NewCommittee(s.Struct.Segment())
	if err != nil {
		return Committee{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// BlockchainInfoResult_List is a list of BlockchainInfoResult.
type BlockchainInfoResult_List struct{ capnp.List }

// NewBlockchainInfoResult creates a new list of BlockchainInfoResult.
func NewBlockchainInfoResult_List(s *capnp.Segment, sz int32) (BlockchainInfoResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return BlockchainInfoResult_List{l}, err
}

func (s BlockchainInfoResult_List) At(i int) BlockchainInfoResult {
	return BlockchainInfoResult{s.List.Struct(i)}
}

func (s BlockchainInfoResult_List) Set(i int, v BlockchainInfoResult) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s BlockchainInfoResult_List) String() string {
	str, _ := text.MarshalList(0xae39f74773bfa089, s.List)
	return str
}

// BlockchainInfoResult_Promise is a wrapper for a BlockchainInfoResult promised by a client call.
type BlockchainInfoResult_Promise struct{ *capnp.Pipeline }

func (p BlockchainInfoResult_Promise) Struct() (BlockchainInfoResult, error) {
	s, err := p.Pipeline.Struct()
	return BlockchainInfoResult{s}, err
}

func (p BlockchainInfoResult_Promise) Committee() Committee_Promise {
	return Committee_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type BlockResult struct{ capnp.Struct }

// BlockResult_TypeID is the unique identifier for the type BlockResult.
const BlockResult_TypeID = 0x83143f06598cf9e8

func NewBlockResult(s *capnp.Segment) (BlockResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return BlockResult{st}, err
}

func NewRootBlockResult(s *capnp.Segment) (BlockResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return BlockResult{st}, err
}

func ReadRootBlockResult(msg *capnp.Message) (BlockResult, error) {
	root, err := msg.RootPtr()
	return BlockResult{root.Struct()}, err
}

func (s BlockResult) String() string {
	str, _ := text.Marshal(0x83143f06598cf9e8, s.Struct)
	return str
}

func (s BlockResult) Height() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s BlockResult) HasHeight() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s BlockResult) SetHeight(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s BlockResult) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s BlockResult) HasHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s BlockResult) SetHash(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s BlockResult) Block() (Block, error) {
	p, err := s.Struct.Ptr(2)
	return Block{Struct: p.Struct()}, err
}

func (s BlockResult) HasBlock() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s BlockResult) SetBlock(v Block) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewBlock sets the block field to a newly
// allocated Block struct, preferring placement in s's segment.
func (s BlockResult) NewBlock() (Block, error) {
	ss, err := NewBlock(s.Struct.Segment())
	if err != nil {
		return Block{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s BlockResult) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s BlockResult) HasData() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s BlockResult) SetData(v []byte) error {
	return s.Struct.SetData(3, v)
}

// BlockResult_List is a list of BlockResult.
type BlockResult_List struct{ capnp.List }

// NewBlockResult creates a new list of BlockResult.
func NewBlockResult_List(s *capnp.Segment, sz int32) (BlockResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return BlockResult_List{l}, err
}

func (s BlockResult_List) At(i int) BlockResult { return BlockResult{s.List.Struct(i)} }

func (s BlockResult_List) Set(i int, v BlockResult) error { return s.List.SetStruct(i, v.Struct) }

func (s BlockResult_List) String() string {
	str, _ := text.MarshalList(0x83143f06598cf9e8, s.List)
	return str
}

// BlockResult_Promise is a wrapper for a BlockResult promised by a client call.
type BlockResult_Promise struct{ *capnp.Pipeline }

func (p BlockResult_Promise) Struct() (BlockResult, error) {
	s, err := p.Pipeline.Struct()
	return BlockResult{s}, err
}

func (p BlockResult_Promise) Block() Block_Promise {
	return Block_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type TransactionResult struct{ capnp.Struct }

// TransactionResult_TypeID is the unique identifier for the type TransactionResult.
const TransactionResult_TypeID = 0xbd77371c14feb668

func NewTransactionResult(s *capnp.Segment) (TransactionResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return TransactionResult{st}, err
}

func NewRootTransactionResult(s *capnp.Segment) (TransactionResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return TransactionResult{st}, err
}

func ReadRootTransactionResult(msg *capnp.Message) (TransactionResult, error) {
	root, err := msg.RootPtr()
	return TransactionResult{root.Struct()}, err
}

func (s TransactionResult) String() string {
	str, _ := text.Marshal(0xbd77371c14feb668, s.Struct)
	return str
}

func (s TransactionResult) Id() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s TransactionResult) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s TransactionResult) SetId(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s TransactionResult) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s TransactionResult) HasData() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s TransactionResult) SetData(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s TransactionResult) Transaction() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s TransactionResult) HasTransaction() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s TransactionResult) SetTransaction(v []byte) error {
	return s.Struct.SetData(2, v)
}

// TransactionResult_List is a list of TransactionResult.
type TransactionResult_List struct{ capnp.List }

// NewTransactionResult creates a new list of TransactionResult.
func NewTransactionResult_List(s *capnp.Segment, sz int32) (TransactionResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return TransactionResult_List{l}, err
}

func (s TransactionResult_List) At(i int) TransactionResult {
	return TransactionResult{s.List.Struct(i)}
}

func (s TransactionResult_List) Set(i int, v TransactionResult) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s TransactionResult_List) String() string {
	str, _ := text.MarshalList(0xbd77371c14feb668, s.List)
	return str
}

// TransactionResult_Promise is a wrapper for a TransactionResult promised by a client call.
type TransactionResult_Promise struct{ *capnp.Pipeline }

func (p TransactionResult_Promise) Struct() (TransactionResult, error) {
	s, err := p.Pipeline.Struct()
	return TransactionResult{s}, err
}

type AccountResult struct{ capnp.Struct }

// AccountResult_TypeID is the unique identifier for the type AccountResult.
const AccountResult_TypeID = 0xa3bd4ddc3e0a5017

func NewAccountResult(s *capnp.Segment) (AccountResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AccountResult{st}, err
}

func NewRootAccountResult(s *capnp.Segment) (AccountResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AccountResult{st}, err
}

func ReadRootAccountResult(msg *capnp.Message) (AccountResult, error) {
	root, err := msg.RootPtr()
	return AccountResult{root.Struct()}, err
}

func (s AccountResult) String() string {
	str, _ := text.Marshal(0xa3bd4ddc3e0a5017, s.Struct)
	return str
}

func (s AccountResult) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s AccountResult) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AccountResult) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// AccountResult_List is a list of AccountResult.
type AccountResult_List struct{ capnp.List }

// NewAccountResult creates a new list of AccountResult.
func NewAccountResult_List(s *capnp.Segment, sz int32) (AccountResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return AccountResult_List{l}, err
}

func (s AccountResult_List) At(i int) AccountResult { return AccountResult{s.List.Struct(i)} }

func (s AccountResult_List) Set(i int, v AccountResult) error { return s.List.SetStruct(i, v.Struct) }

func (s AccountResult_List) String() string {
	str, _ := text.MarshalList(0xa3bd4ddc3e0a5017, s.List)
	return str
}

// AccountResult_Promise is a wrapper for a AccountResult promised by a client call.
type AccountResult_Promise struct{ *capnp.Pipeline }

func (p AccountResult_Promise) Struct() (AccountResult, error) {
	s, err := p.Pipeline.Struct()
	return AccountResult{s}, err
}

type ValidatorResult struct{ capnp.Struct }

// ValidatorResult_TypeID is the unique identifier for the type ValidatorResult.
const ValidatorResult_TypeID = 0xec1c828dae8bffa3

func NewValidatorResult(s *capnp.Segment) (ValidatorResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ValidatorResult{st}, err
}

func NewRootValidatorResult(s *capnp.Segment) (ValidatorResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ValidatorResult{st}, err
}

func ReadRootValidatorResult(msg *capnp.Message) (ValidatorResult, error) {
	root, err := msg.RootPtr()
	return ValidatorResult{root.Struct()}, err
}

func (s ValidatorResult) String() string {
	str, _ := text.Marshal(0xec1c828dae8bffa3, s.Struct)
	return str
}

func (s ValidatorResult) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ValidatorResult) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ValidatorResult) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// ValidatorResult_List is a list of ValidatorResult.
type ValidatorResult_List struct{ capnp.List }

// NewValidatorResult creates a new list of ValidatorResult.
func NewValidatorResult_List(s *capnp.Segment, sz int32) (ValidatorResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ValidatorResult_List{l}, err
}

func (s ValidatorResult_List) At(i int) ValidatorResult { return ValidatorResult{s.List.Struct(i)} }

func (s ValidatorResult_List) Set(i int, v ValidatorResult) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ValidatorResult_List) String() string {
	str, _ := text.MarshalList(0xec1c828dae8bffa3, s.List)
	return str
}

// ValidatorResult_Promise is a wrapper for a ValidatorResult promised by a client call.
type ValidatorResult_Promise struct{ *capnp.Pipeline }

func (p ValidatorResult_Promise) Struct() (ValidatorResult, error) {
	s, err := p.Pipeline.Struct()
	return ValidatorResult{s}, err
}

type Committee struct{ capnp.Struct }

// Committee_TypeID is the unique identifier for the type Committee.
const Committee_TypeID = 0xb89d0df283dbb65c

func NewCommittee(s *capnp.Segment) (Committee, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Committee{st}, err
}

func NewRootCommittee(s *capnp.Segment) (Committee, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Committee{st}, err
}

func ReadRootCommittee(msg *capnp.Message) (Committee, error) {
	root, err := msg.RootPtr()
	return Committee{root.Struct()}, err
}

func (s Committee) String() string {
	str, _ := text.Marshal(0xb89d0df283dbb65c, s.Struct)
	return str
}

func (s Committee) TotalPower() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Committee) SetTotalPower(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s Committee) CommitteePower() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s Committee) SetCommitteePower(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s Committee) Validators() (ValidatorResult_List, error) {
	p, err := s.Struct.Ptr(0)
	return ValidatorResult_List{List: p.List()}, err
}

func (s Committee) HasValidators() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Committee) SetValidators(v ValidatorResult_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewValidators sets the validators field to a newly
// allocated ValidatorResult_List, preferring placement in s's segment.
func (s Committee) NewValidators(n int32) (ValidatorResult_List, error) {
	l, err := NewValidatorResult_List(s.Struct.Segment(), n)
	if err != nil {
		return ValidatorResult_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Committee_List is a list of Committee.
type Committee_List struct{ capnp.List }

// NewCommittee creates a new list of Committee.
func NewCommittee_List(s *capnp.Segment, sz int32) (Committee_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return Committee_List{l}, err
}

func (s Committee_List) At(i int) Committee { return Committee{s.List.Struct(i)} }

func (s Committee_List) Set(i int, v Committee) error { return s.List.SetStruct(i, v.Struct) }

func (s Committee_List) String() string {
	str, _ := text.MarshalList(0xb89d0df283dbb65c, s.List)
	return str
}

// Committee_Promise is a wrapper for a Committee promised by a client call.
type Committee_Promise struct{ *capnp.Pipeline }

func (p Committee_Promise) Struct() (Committee, error) {
	s, err := p.Pipeline.Struct()
	return Committee{s}, err
}

type Peer struct{ capnp.Struct }

// Peer_TypeID is the unique identifier for the type Peer.
const Peer_TypeID = 0xdeb9cfe7754f053f

func NewPeer(s *capnp.Segment) (Peer, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 4})
	return Peer{st}, err
}

func NewRootPeer(s *capnp.Segment) (Peer, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 4})
	return Peer{st}, err
}

func ReadRootPeer(msg *capnp.Message) (Peer, error) {
	root, err := msg.RootPtr()
	return Peer{root.Struct()}, err
}

func (s Peer) String() string {
	str, _ := text.Marshal(0xdeb9cfe7754f053f, s.Struct)
	return str
}

func (s Peer) Status() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s Peer) SetStatus(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s Peer) Moniker() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Peer) HasMoniker() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Peer) MonikerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Peer) SetMoniker(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Peer) Agent() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Peer) HasAgent() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Peer) AgentBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Peer) SetAgent(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Peer) PeerID() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Peer) HasPeerID() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Peer) PeerIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Peer) SetPeerID(v string) error {
	return s.Struct.SetText(2, v)
}

func (s Peer) PublicKey() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s Peer) HasPublicKey() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Peer) PublicKeyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s Peer) SetPublicKey(v string) error {
	return s.Struct.SetText(3, v)
}

func (s Peer) LastSeen() int32 {
	return int32(s.Struct.Uint32(4))
}

func (s Peer) SetLastSeen(v int32) {
	s.Struct.SetUint32(4, uint32(v))
}

func (s Peer) Flags() int32 {
	return int32(s.Struct.Uint32(8))
}

func (s Peer) SetFlags(v int32) {
	s.Struct.SetUint32(8, uint32(v))
}

func (s Peer) Height() int32 {
	return int32(s.Struct.Uint32(12))
}

func (s Peer) SetHeight(v int32) {
	s.Struct.SetUint32(12, uint32(v))
}

func (s Peer) ReceivedMessages() int32 {
	return int32(s.Struct.Uint32(16))
}

func (s Peer) SetReceivedMessages(v int32) {
	s.Struct.SetUint32(16, uint32(v))
}

func (s Peer) InvalidMessages() int32 {
	return int32(s.Struct.Uint32(20))
}

func (s Peer) SetInvalidMessages(v int32) {
	s.Struct.SetUint32(20, uint32(v))
}

func (s Peer) ReceivedBytes() int32 {
	return int32(s.Struct.Uint32(24))
}

func (s Peer) SetReceivedBytes(v int32) {
	s.Struct.SetUint32(24, uint32(v))
}

// Peer_List is a list of Peer.
type Peer_List struct{ capnp.List }

// NewPeer creates a new list of Peer.
func NewPeer_List(s *capnp.Segment, sz int32) (Peer_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 4}, sz)
	return Peer_List{l}, err
}

func (s Peer_List) At(i int) Peer { return Peer{s.List.Struct(i)} }

func (s Peer_List) Set(i int, v Peer) error { return s.List.SetStruct(i, v.Struct) }

func (s Peer_List) String() string {
	str, _ := text.MarshalList(0xdeb9cfe7754f053f, s.List)
	return str
}

// Peer_Promise is a wrapper for a Peer promised by a client call.
type Peer_Promise struct{ *capnp.Pipeline }

func (p Peer_Promise) Struct() (Peer, error) {
	s, err := p.Pipeline.Struct()
	return Peer{s}, err
}

type NetworkInfoResult struct{ capnp.Struct }

// NetworkInfoResult_TypeID is the unique identifier for the type NetworkInfoResult.
const NetworkInfoResult_TypeID = 0x9770d1aea1bdc9cb

func NewNetworkInfoResult(s *capnp.Segment) (NetworkInfoResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return NetworkInfoResult{st}, err
}

func NewRootNetworkInfoResult(s *capnp.Segment) (NetworkInfoResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return NetworkInfoResult{st}, err
}

func ReadRootNetworkInfoResult(msg *capnp.Message) (NetworkInfoResult, error) {
	root, err := msg.RootPtr()
	return NetworkInfoResult{root.Struct()}, err
}

func (s NetworkInfoResult) String() string {
	str, _ := text.Marshal(0x9770d1aea1bdc9cb, s.Struct)
	return str
}

func (s NetworkInfoResult) PeerID() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s NetworkInfoResult) HasPeerID() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s NetworkInfoResult) PeerIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s NetworkInfoResult) SetPeerID(v string) error {
	return s.Struct.SetText(0, v)
}

func (s NetworkInfoResult) Peers() (Peer_List, error) {
	p, err := s.Struct.Ptr(1)
	return Peer_List{List: p.List()}, err
}

func (s NetworkInfoResult) HasPeers() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s NetworkInfoResult) SetPeers(v Peer_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewPeers sets the peers field to a newly
// allocated Peer_List, preferring placement in s's segment.
func (s NetworkInfoResult) NewPeers(n int32) (Peer_List, error) {
	l, err := NewPeer_List(s.Struct.Segment(), n)
	if err != nil {
		return Peer_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// NetworkInfoResult_List is a list of NetworkInfoResult.
type NetworkInfoResult_List struct{ capnp.List }

// NewNetworkInfoResult creates a new list of NetworkInfoResult.
func NewNetworkInfoResult_List(s *capnp.Segment, sz int32) (NetworkInfoResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return NetworkInfoResult_List{l}, err
}

func (s NetworkInfoResult_List) At(i int) NetworkInfoResult {
	return NetworkInfoResult{s.List.Struct(i)}
}

func (s NetworkInfoResult_List) Set(i int, v NetworkInfoResult) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s NetworkInfoResult_List) String() string {
	str, _ := text.MarshalList(0x9770d1aea1bdc9cb, s.List)
	return str
}

// NetworkInfoResult_Promise is a wrapper for a NetworkInfoResult promised by a client call.
type NetworkInfoResult_Promise struct{ *capnp.Pipeline }

func (p NetworkInfoResult_Promise) Struct() (NetworkInfoResult, error) {
	s, err := p.Pipeline.Struct()
	return NetworkInfoResult{s}, err
}

type Vote struct{ capnp.Struct }

// Vote_TypeID is the unique identifier for the type Vote.
const Vote_TypeID = 0xab9a904927908aff

func NewVote(s *capnp.Segment) (Vote, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Vote{st}, err
}

func NewRootVote(s *capnp.Segment) (Vote, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Vote{st}, err
}

func ReadRootVote(msg *capnp.Message) (Vote, error) {
	root, err := msg.RootPtr()
	return Vote{root.Struct()}, err
}

func (s Vote) String() string {
	str, _ := text.Marshal(0xab9a904927908aff, s.Struct)
	return str
}

func (s Vote) Type() int8 {
	return int8(s.Struct.Uint8(0))
}

func (s Vote) SetType(v int8) {
	s.Struct.SetUint8(0, uint8(v))
}

func (s Vote) Voter() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Vote) HasVoter() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Vote) VoterBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Vote) SetVoter(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Vote) BlockHash() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Vote) HasBlockHash() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Vote) SetBlockHash(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s Vote) Round() int16 {
	return int16(s.Struct.Uint16(2))
}

func (s Vote) SetRound(v int16) {
	s.Struct.SetUint16(2, uint16(v))
}

// Vote_List is a list of Vote.
type Vote_List struct{ capnp.List }

// NewVote creates a new list of Vote.
func NewVote_List(s *capnp.Segment, sz int32) (Vote_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Vote_List{l}, err
}

func (s Vote_List) At(i int) Vote { return Vote{s.List.Struct(i)} }

func (s Vote_List) Set(i int, v Vote) error { return s.List.SetStruct(i, v.Struct) }

func (s Vote_List) String() string {
	str, _ := text.MarshalList(0xab9a904927908aff, s.List)
	return str
}

// Vote_Promise is a wrapper for a Vote promised by a client call.
type Vote_Promise struct{ *capnp.Pipeline }

func (p Vote_Promise) Struct() (Vote, error) {
	s, err := p.Pipeline.Struct()
	return Vote{s}, err
}

type ConsensusInfoResult struct{ capnp.Struct }

// ConsensusInfoResult_TypeID is the unique identifier for the type ConsensusInfoResult.
const ConsensusInfoResult_TypeID = 0xddf1212e9514d1f1

func NewConsensusInfoResult(s *capnp.Segment) (ConsensusInfoResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ConsensusInfoResult{st}, err
}

func NewRootConsensusInfoResult(s *capnp.Segment) (ConsensusInfoResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ConsensusInfoResult{st}, err
}

func ReadRootConsensusInfoResult(msg *capnp.Message) (ConsensusInfoResult, error) {
	root, err := msg.RootPtr()
	return ConsensusInfoResult{root.Struct()}, err
}

func (s ConsensusInfoResult) String() string {
	str, _ := text.Marshal(0xddf1212e9514d1f1, s.Struct)
	return str
}

func (s ConsensusInfoResult) Height() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s ConsensusInfoResult) SetHeight(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s ConsensusInfoResult) Round() int16 {
	return int16(s.Struct.Uint16(4))
}

func (s ConsensusInfoResult) SetRound(v int16) {
	s.Struct.SetUint16(4, uint16(v))
}

func (s ConsensusInfoResult) Votes() (Vote_List, error) {
	p, err := s.Struct.Ptr(0)
	return Vote_List{List: p.List()}, err
}

func (s ConsensusInfoResult) HasVotes() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ConsensusInfoResult) SetVotes(v Vote_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewVotes sets the votes field to a newly
// allocated Vote_List, preferring placement in s's segment.
func (s ConsensusInfoResult) NewVotes(n int32) (Vote_List, error) {
	l, err := NewVote_List(s.Struct.Segment(), n)
	if err != nil {
		return Vote_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ConsensusInfoResult_List is a list of ConsensusInfoResult.
type ConsensusInfoResult_List struct{ capnp.List }

// NewConsensusInfoResult creates a new list of ConsensusInfoResult.
func NewConsensusInfoResult_List(s *capnp.Segment, sz int32) (ConsensusInfoResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ConsensusInfoResult_List{l}, err
}

func (s ConsensusInfoResult_List) At(i int) ConsensusInfoResult {
	return ConsensusInfoResult{s.List.Struct(i)}
}

func (s ConsensusInfoResult_List) Set(i int, v ConsensusInfoResult) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ConsensusInfoResult_List) String() string {
	str, _ := text.MarshalList(0xddf1212e9514d1f1, s.List)
	return str
}

// ConsensusInfoResult_Promise is a wrapper for a ConsensusInfoResult promised by a client call.
type ConsensusInfoResult_Promise struct{ *capnp.Pipeline }

func (p ConsensusInfoResult_Promise) Struct() (ConsensusInfoResult, error) {
	s, err := p.Pipeline.Struct()
	return ConsensusInfoResult{s}, err
}

type SendTransactionResult struct{ capnp.Struct }

// SendTransactionResult_TypeID is the unique identifier for the type SendTransactionResult.
const SendTransactionResult_TypeID = 0xcfd704b9b2c62a4a

func NewSendTransactionResult(s *capnp.Segment) (SendTransactionResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SendTransactionResult{st}, err
}

func NewRootSendTransactionResult(s *capnp.Segment) (SendTransactionResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SendTransactionResult{st}, err
}

func ReadRootSendTransactionResult(msg *capnp.Message) (SendTransactionResult, error) {
	root, err := msg.RootPtr()
	return SendTransactionResult{root.Struct()}, err
}

func (s SendTransactionResult) String() string {
	str, _ := text.Marshal(0xcfd704b9b2c62a4a, s.Struct)
	return str
}

func (s SendTransactionResult) Status() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s SendTransactionResult) SetStatus(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s SendTransactionResult) Id() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s SendTransactionResult) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SendTransactionResult) SetId(v []byte) error {
	return s.Struct.SetData(0, v)
}

// SendTransactionResult_List is a list of SendTransactionResult.
type SendTransactionResult_List struct{ capnp.List }

// NewSendTransactionResult creates a new list of SendTransactionResult.
func NewSendTransactionResult_List(s *capnp.Segment, sz int32) (SendTransactionResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return SendTransactionResult_List{l}, err
}

func (s SendTransactionResult_List) At(i int) SendTransactionResult {
	return SendTransactionResult{s.List.Struct(i)}
}

func (s SendTransactionResult_List) Set(i int, v SendTransactionResult) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SendTransactionResult_List) String() string {
	str, _ := text.MarshalList(0xcfd704b9b2c62a4a, s.List)
	return str
}

// SendTransactionResult_Promise is a wrapper for a SendTransactionResult promised by a client call.
type SendTransactionResult_Promise struct{ *capnp.Pipeline }

func (p SendTransactionResult_Promise) Struct() (SendTransactionResult, error) {
	s, err := p.Pipeline.Struct()
	return SendTransactionResult{s}, err
}

type ZarbServer struct{ Client capnp.Client }

// ZarbServer_TypeID is the unique identifier for the type ZarbServer.
const ZarbServer_TypeID = 0xf906e2ae0dd37fe4

func (c ZarbServer) GetBlock(ctx context.Context, params func(ZarbServer_getBlock_Params) error, opts ...capnp.CallOption) ZarbServer_getBlock_Results_Promise {
	if c.Client == nil {
		return ZarbServer_getBlock_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      0,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getBlock",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_getBlock_Params{Struct: s}) }
	}
	return ZarbServer_getBlock_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) GetBlockHash(ctx context.Context, params func(ZarbServer_getBlockHash_Params) error, opts ...capnp.CallOption) ZarbServer_getBlockHash_Results_Promise {
	if c.Client == nil {
		return ZarbServer_getBlockHash_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      1,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getBlockHash",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_getBlockHash_Params{Struct: s}) }
	}
	return ZarbServer_getBlockHash_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) GetTransaction(ctx context.Context, params func(ZarbServer_getTransaction_Params) error, opts ...capnp.CallOption) ZarbServer_getTransaction_Results_Promise {
	if c.Client == nil {
		return ZarbServer_getTransaction_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      2,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getTransaction",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_getTransaction_Params{Struct: s}) }
	}
	return ZarbServer_getTransaction_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) GetAccount(ctx context.Context, params func(ZarbServer_getAccount_Params) error, opts ...capnp.CallOption) ZarbServer_getAccount_Results_Promise {
	if c.Client == nil {
		return ZarbServer_getAccount_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      3,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getAccount",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_getAccount_Params{Struct: s}) }
	}
	return ZarbServer_getAccount_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) GetValidator(ctx context.Context, params func(ZarbServer_getValidator_Params) error, opts ...capnp.CallOption) ZarbServer_getValidator_Results_Promise {
	if c.Client == nil {
		return ZarbServer_getValidator_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      4,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getValidator",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_getValidator_Params{Struct: s}) }
	}
	return ZarbServer_getValidator_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) GetBlockchainInfo(ctx context.Context, params func(ZarbServer_getBlockchainInfo_Params) error, opts ...capnp.CallOption) ZarbServer_getBlockchainInfo_Results_Promise {
	if c.Client == nil {
		return ZarbServer_getBlockchainInfo_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      5,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getBlockchainInfo",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_getBlockchainInfo_Params{Struct: s}) }
	}
	return ZarbServer_getBlockchainInfo_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) GetNetworkInfo(ctx context.Context, params func(ZarbServer_getNetworkInfo_Params) error, opts ...capnp.CallOption) ZarbServer_getNetworkInfo_Results_Promise {
	if c.Client == nil {
		return ZarbServer_getNetworkInfo_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      6,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getNetworkInfo",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_getNetworkInfo_Params{Struct: s}) }
	}
	return ZarbServer_getNetworkInfo_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) GetConsensusInfo(ctx context.Context, params func(ZarbServer_getConsensusInfo_Params) error, opts ...capnp.CallOption) ZarbServer_getConsensusInfo_Results_Promise {
	if c.Client == nil {
		return ZarbServer_getConsensusInfo_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      7,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getConsensusInfo",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_getConsensusInfo_Params{Struct: s}) }
	}
	return ZarbServer_getConsensusInfo_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c ZarbServer) SendRawTransaction(ctx context.Context, params func(ZarbServer_sendRawTransaction_Params) error, opts ...capnp.CallOption) ZarbServer_sendRawTransaction_Results_Promise {
	if c.Client == nil {
		return ZarbServer_sendRawTransaction_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      8,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "sendRawTransaction",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(ZarbServer_sendRawTransaction_Params{Struct: s}) }
	}
	return ZarbServer_sendRawTransaction_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type ZarbServer_Server interface {
	GetBlock(ZarbServer_getBlock) error

	GetBlockHash(ZarbServer_getBlockHash) error

	GetTransaction(ZarbServer_getTransaction) error

	GetAccount(ZarbServer_getAccount) error

	GetValidator(ZarbServer_getValidator) error

	GetBlockchainInfo(ZarbServer_getBlockchainInfo) error

	GetNetworkInfo(ZarbServer_getNetworkInfo) error

	GetConsensusInfo(ZarbServer_getConsensusInfo) error

	SendRawTransaction(ZarbServer_sendRawTransaction) error
}

func ZarbServer_ServerToClient(s ZarbServer_Server) ZarbServer {
	c, _ := s.(server.Closer)
	return ZarbServer{Client: server.New(ZarbServer_Methods(nil, s), c)}
}

func ZarbServer_Methods(methods []server.Method, s ZarbServer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 9)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      0,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getBlock",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_getBlock{c, opts, ZarbServer_getBlock_Params{Struct: p}, ZarbServer_getBlock_Results{Struct: r}}
			return s.GetBlock(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      1,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getBlockHash",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_getBlockHash{c, opts, ZarbServer_getBlockHash_Params{Struct: p}, ZarbServer_getBlockHash_Results{Struct: r}}
			return s.GetBlockHash(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      2,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getTransaction",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_getTransaction{c, opts, ZarbServer_getTransaction_Params{Struct: p}, ZarbServer_getTransaction_Results{Struct: r}}
			return s.GetTransaction(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      3,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getAccount",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_getAccount{c, opts, ZarbServer_getAccount_Params{Struct: p}, ZarbServer_getAccount_Results{Struct: r}}
			return s.GetAccount(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      4,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getValidator",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_getValidator{c, opts, ZarbServer_getValidator_Params{Struct: p}, ZarbServer_getValidator_Results{Struct: r}}
			return s.GetValidator(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      5,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getBlockchainInfo",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_getBlockchainInfo{c, opts, ZarbServer_getBlockchainInfo_Params{Struct: p}, ZarbServer_getBlockchainInfo_Results{Struct: r}}
			return s.GetBlockchainInfo(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      6,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getNetworkInfo",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_getNetworkInfo{c, opts, ZarbServer_getNetworkInfo_Params{Struct: p}, ZarbServer_getNetworkInfo_Results{Struct: r}}
			return s.GetNetworkInfo(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      7,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "getConsensusInfo",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_getConsensusInfo{c, opts, ZarbServer_getConsensusInfo_Params{Struct: p}, ZarbServer_getConsensusInfo_Results{Struct: r}}
			return s.GetConsensusInfo(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf906e2ae0dd37fe4,
			MethodID:      8,
			InterfaceName: "www/capnp/zarb.capnp:ZarbServer",
			MethodName:    "sendRawTransaction",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := ZarbServer_sendRawTransaction{c, opts, ZarbServer_sendRawTransaction_Params{Struct: p}, ZarbServer_sendRawTransaction_Results{Struct: r}}
			return s.SendRawTransaction(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// ZarbServer_getBlock holds the arguments for a server call to ZarbServer.getBlock.
type ZarbServer_getBlock struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_getBlock_Params
	Results ZarbServer_getBlock_Results
}

// ZarbServer_getBlockHash holds the arguments for a server call to ZarbServer.getBlockHash.
type ZarbServer_getBlockHash struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_getBlockHash_Params
	Results ZarbServer_getBlockHash_Results
}

// ZarbServer_getTransaction holds the arguments for a server call to ZarbServer.getTransaction.
type ZarbServer_getTransaction struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_getTransaction_Params
	Results ZarbServer_getTransaction_Results
}

// ZarbServer_getAccount holds the arguments for a server call to ZarbServer.getAccount.
type ZarbServer_getAccount struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_getAccount_Params
	Results ZarbServer_getAccount_Results
}

// ZarbServer_getValidator holds the arguments for a server call to ZarbServer.getValidator.
type ZarbServer_getValidator struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_getValidator_Params
	Results ZarbServer_getValidator_Results
}

// ZarbServer_getBlockchainInfo holds the arguments for a server call to ZarbServer.getBlockchainInfo.
type ZarbServer_getBlockchainInfo struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_getBlockchainInfo_Params
	Results ZarbServer_getBlockchainInfo_Results
}

// ZarbServer_getNetworkInfo holds the arguments for a server call to ZarbServer.getNetworkInfo.
type ZarbServer_getNetworkInfo struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_getNetworkInfo_Params
	Results ZarbServer_getNetworkInfo_Results
}

// ZarbServer_getConsensusInfo holds the arguments for a server call to ZarbServer.getConsensusInfo.
type ZarbServer_getConsensusInfo struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_getConsensusInfo_Params
	Results ZarbServer_getConsensusInfo_Results
}

// ZarbServer_sendRawTransaction holds the arguments for a server call to ZarbServer.sendRawTransaction.
type ZarbServer_sendRawTransaction struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  ZarbServer_sendRawTransaction_Params
	Results ZarbServer_sendRawTransaction_Results
}

type ZarbServer_getBlock_Params struct{ capnp.Struct }

// ZarbServer_getBlock_Params_TypeID is the unique identifier for the type ZarbServer_getBlock_Params.
const ZarbServer_getBlock_Params_TypeID = 0x8df1c729f8d2ca00

func NewZarbServer_getBlock_Params(s *capnp.Segment) (ZarbServer_getBlock_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZarbServer_getBlock_Params{st}, err
}

func NewRootZarbServer_getBlock_Params(s *capnp.Segment) (ZarbServer_getBlock_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZarbServer_getBlock_Params{st}, err
}

func ReadRootZarbServer_getBlock_Params(msg *capnp.Message) (ZarbServer_getBlock_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getBlock_Params{root.Struct()}, err
}

func (s ZarbServer_getBlock_Params) String() string {
	str, _ := text.Marshal(0x8df1c729f8d2ca00, s.Struct)
	return str
}

func (s ZarbServer_getBlock_Params) Hash() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ZarbServer_getBlock_Params) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getBlock_Params) SetHash(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s ZarbServer_getBlock_Params) Verbosity() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s ZarbServer_getBlock_Params) SetVerbosity(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// ZarbServer_getBlock_Params_List is a list of ZarbServer_getBlock_Params.
type ZarbServer_getBlock_Params_List struct{ capnp.List }

// NewZarbServer_getBlock_Params creates a new list of ZarbServer_getBlock_Params.
func NewZarbServer_getBlock_Params_List(s *capnp.Segment, sz int32) (ZarbServer_getBlock_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ZarbServer_getBlock_Params_List{l}, err
}

func (s ZarbServer_getBlock_Params_List) At(i int) ZarbServer_getBlock_Params {
	return ZarbServer_getBlock_Params{s.List.Struct(i)}
}

func (s ZarbServer_getBlock_Params_List) Set(i int, v ZarbServer_getBlock_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getBlock_Params_List) String() string {
	str, _ := text.MarshalList(0x8df1c729f8d2ca00, s.List)
	return str
}

// ZarbServer_getBlock_Params_Promise is a wrapper for a ZarbServer_getBlock_Params promised by a client call.
type ZarbServer_getBlock_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getBlock_Params_Promise) Struct() (ZarbServer_getBlock_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getBlock_Params{s}, err
}

type ZarbServer_getBlock_Results struct{ capnp.Struct }

// ZarbServer_getBlock_Results_TypeID is the unique identifier for the type ZarbServer_getBlock_Results.
const ZarbServer_getBlock_Results_TypeID = 0xf5e8509c82a71e1c

func NewZarbServer_getBlock_Results(s *capnp.Segment) (ZarbServer_getBlock_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getBlock_Results{st}, err
}

func NewRootZarbServer_getBlock_Results(s *capnp.Segment) (ZarbServer_getBlock_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getBlock_Results{st}, err
}

func ReadRootZarbServer_getBlock_Results(msg *capnp.Message) (ZarbServer_getBlock_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getBlock_Results{root.Struct()}, err
}

func (s ZarbServer_getBlock_Results) String() string {
	str, _ := text.Marshal(0xf5e8509c82a71e1c, s.Struct)
	return str
}

func (s ZarbServer_getBlock_Results) Result() (BlockResult, error) {
	p, err := s.Struct.Ptr(0)
	return BlockResult{Struct: p.Struct()}, err
}

func (s ZarbServer_getBlock_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getBlock_Results) SetResult(v BlockResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated BlockResult struct, preferring placement in s's segment.
func (s ZarbServer_getBlock_Results) NewResult() (BlockResult, error) {
	ss, err := NewBlockResult(s.Struct.Segment())
	if err != nil {
		return BlockResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_getBlock_Results_List is a list of ZarbServer_getBlock_Results.
type ZarbServer_getBlock_Results_List struct{ capnp.List }

// NewZarbServer_getBlock_Results creates a new list of ZarbServer_getBlock_Results.
func NewZarbServer_getBlock_Results_List(s *capnp.Segment, sz int32) (ZarbServer_getBlock_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_getBlock_Results_List{l}, err
}

func (s ZarbServer_getBlock_Results_List) At(i int) ZarbServer_getBlock_Results {
	return ZarbServer_getBlock_Results{s.List.Struct(i)}
}

func (s ZarbServer_getBlock_Results_List) Set(i int, v ZarbServer_getBlock_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getBlock_Results_List) String() string {
	str, _ := text.MarshalList(0xf5e8509c82a71e1c, s.List)
	return str
}

// ZarbServer_getBlock_Results_Promise is a wrapper for a ZarbServer_getBlock_Results promised by a client call.
type ZarbServer_getBlock_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getBlock_Results_Promise) Struct() (ZarbServer_getBlock_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getBlock_Results{s}, err
}

func (p ZarbServer_getBlock_Results_Promise) Result() BlockResult_Promise {
	return BlockResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ZarbServer_getBlockHash_Params struct{ capnp.Struct }

// ZarbServer_getBlockHash_Params_TypeID is the unique identifier for the type ZarbServer_getBlockHash_Params.
const ZarbServer_getBlockHash_Params_TypeID = 0x85252b1ec1c352d2

func NewZarbServer_getBlockHash_Params(s *capnp.Segment) (ZarbServer_getBlockHash_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ZarbServer_getBlockHash_Params{st}, err
}

func NewRootZarbServer_getBlockHash_Params(s *capnp.Segment) (ZarbServer_getBlockHash_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ZarbServer_getBlockHash_Params{st}, err
}

func ReadRootZarbServer_getBlockHash_Params(msg *capnp.Message) (ZarbServer_getBlockHash_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getBlockHash_Params{root.Struct()}, err
}

func (s ZarbServer_getBlockHash_Params) String() string {
	str, _ := text.Marshal(0x85252b1ec1c352d2, s.Struct)
	return str
}

func (s ZarbServer_getBlockHash_Params) Height() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s ZarbServer_getBlockHash_Params) SetHeight(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// ZarbServer_getBlockHash_Params_List is a list of ZarbServer_getBlockHash_Params.
type ZarbServer_getBlockHash_Params_List struct{ capnp.List }

// NewZarbServer_getBlockHash_Params creates a new list of ZarbServer_getBlockHash_Params.
func NewZarbServer_getBlockHash_Params_List(s *capnp.Segment, sz int32) (ZarbServer_getBlockHash_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return ZarbServer_getBlockHash_Params_List{l}, err
}

func (s ZarbServer_getBlockHash_Params_List) At(i int) ZarbServer_getBlockHash_Params {
	return ZarbServer_getBlockHash_Params{s.List.Struct(i)}
}

func (s ZarbServer_getBlockHash_Params_List) Set(i int, v ZarbServer_getBlockHash_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getBlockHash_Params_List) String() string {
	str, _ := text.MarshalList(0x85252b1ec1c352d2, s.List)
	return str
}

// ZarbServer_getBlockHash_Params_Promise is a wrapper for a ZarbServer_getBlockHash_Params promised by a client call.
type ZarbServer_getBlockHash_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getBlockHash_Params_Promise) Struct() (ZarbServer_getBlockHash_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getBlockHash_Params{s}, err
}

type ZarbServer_getBlockHash_Results struct{ capnp.Struct }

// ZarbServer_getBlockHash_Results_TypeID is the unique identifier for the type ZarbServer_getBlockHash_Results.
const ZarbServer_getBlockHash_Results_TypeID = 0x946b1f715eac1308

func NewZarbServer_getBlockHash_Results(s *capnp.Segment) (ZarbServer_getBlockHash_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getBlockHash_Results{st}, err
}

func NewRootZarbServer_getBlockHash_Results(s *capnp.Segment) (ZarbServer_getBlockHash_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getBlockHash_Results{st}, err
}

func ReadRootZarbServer_getBlockHash_Results(msg *capnp.Message) (ZarbServer_getBlockHash_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getBlockHash_Results{root.Struct()}, err
}

func (s ZarbServer_getBlockHash_Results) String() string {
	str, _ := text.Marshal(0x946b1f715eac1308, s.Struct)
	return str
}

func (s ZarbServer_getBlockHash_Results) Result() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ZarbServer_getBlockHash_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getBlockHash_Results) SetResult(v []byte) error {
	return s.Struct.SetData(0, v)
}

// ZarbServer_getBlockHash_Results_List is a list of ZarbServer_getBlockHash_Results.
type ZarbServer_getBlockHash_Results_List struct{ capnp.List }

// NewZarbServer_getBlockHash_Results creates a new list of ZarbServer_getBlockHash_Results.
func NewZarbServer_getBlockHash_Results_List(s *capnp.Segment, sz int32) (ZarbServer_getBlockHash_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_getBlockHash_Results_List{l}, err
}

func (s ZarbServer_getBlockHash_Results_List) At(i int) ZarbServer_getBlockHash_Results {
	return ZarbServer_getBlockHash_Results{s.List.Struct(i)}
}

func (s ZarbServer_getBlockHash_Results_List) Set(i int, v ZarbServer_getBlockHash_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getBlockHash_Results_List) String() string {
	str, _ := text.MarshalList(0x946b1f715eac1308, s.List)
	return str
}

// ZarbServer_getBlockHash_Results_Promise is a wrapper for a ZarbServer_getBlockHash_Results promised by a client call.
type ZarbServer_getBlockHash_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getBlockHash_Results_Promise) Struct() (ZarbServer_getBlockHash_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getBlockHash_Results{s}, err
}

type ZarbServer_getTransaction_Params struct{ capnp.Struct }

// ZarbServer_getTransaction_Params_TypeID is the unique identifier for the type ZarbServer_getTransaction_Params.
const ZarbServer_getTransaction_Params_TypeID = 0xd3df8a6125925ab9

func NewZarbServer_getTransaction_Params(s *capnp.Segment) (ZarbServer_getTransaction_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZarbServer_getTransaction_Params{st}, err
}

func NewRootZarbServer_getTransaction_Params(s *capnp.Segment) (ZarbServer_getTransaction_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZarbServer_getTransaction_Params{st}, err
}

func ReadRootZarbServer_getTransaction_Params(msg *capnp.Message) (ZarbServer_getTransaction_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getTransaction_Params{root.Struct()}, err
}

func (s ZarbServer_getTransaction_Params) String() string {
	str, _ := text.Marshal(0xd3df8a6125925ab9, s.Struct)
	return str
}

func (s ZarbServer_getTransaction_Params) Id() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ZarbServer_getTransaction_Params) HasId() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getTransaction_Params) SetId(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s ZarbServer_getTransaction_Params) Verbosity() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s ZarbServer_getTransaction_Params) SetVerbosity(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// ZarbServer_getTransaction_Params_List is a list of ZarbServer_getTransaction_Params.
type ZarbServer_getTransaction_Params_List struct{ capnp.List }

// NewZarbServer_getTransaction_Params creates a new list of ZarbServer_getTransaction_Params.
func NewZarbServer_getTransaction_Params_List(s *capnp.Segment, sz int32) (ZarbServer_getTransaction_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ZarbServer_getTransaction_Params_List{l}, err
}

func (s ZarbServer_getTransaction_Params_List) At(i int) ZarbServer_getTransaction_Params {
	return ZarbServer_getTransaction_Params{s.List.Struct(i)}
}

func (s ZarbServer_getTransaction_Params_List) Set(i int, v ZarbServer_getTransaction_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getTransaction_Params_List) String() string {
	str, _ := text.MarshalList(0xd3df8a6125925ab9, s.List)
	return str
}

// ZarbServer_getTransaction_Params_Promise is a wrapper for a ZarbServer_getTransaction_Params promised by a client call.
type ZarbServer_getTransaction_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getTransaction_Params_Promise) Struct() (ZarbServer_getTransaction_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getTransaction_Params{s}, err
}

type ZarbServer_getTransaction_Results struct{ capnp.Struct }

// ZarbServer_getTransaction_Results_TypeID is the unique identifier for the type ZarbServer_getTransaction_Results.
const ZarbServer_getTransaction_Results_TypeID = 0xa2b1016cefab775b

func NewZarbServer_getTransaction_Results(s *capnp.Segment) (ZarbServer_getTransaction_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getTransaction_Results{st}, err
}

func NewRootZarbServer_getTransaction_Results(s *capnp.Segment) (ZarbServer_getTransaction_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getTransaction_Results{st}, err
}

func ReadRootZarbServer_getTransaction_Results(msg *capnp.Message) (ZarbServer_getTransaction_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getTransaction_Results{root.Struct()}, err
}

func (s ZarbServer_getTransaction_Results) String() string {
	str, _ := text.Marshal(0xa2b1016cefab775b, s.Struct)
	return str
}

func (s ZarbServer_getTransaction_Results) Result() (TransactionResult, error) {
	p, err := s.Struct.Ptr(0)
	return TransactionResult{Struct: p.Struct()}, err
}

func (s ZarbServer_getTransaction_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getTransaction_Results) SetResult(v TransactionResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated TransactionResult struct, preferring placement in s's segment.
func (s ZarbServer_getTransaction_Results) NewResult() (TransactionResult, error) {
	ss, err := NewTransactionResult(s.Struct.Segment())
	if err != nil {
		return TransactionResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_getTransaction_Results_List is a list of ZarbServer_getTransaction_Results.
type ZarbServer_getTransaction_Results_List struct{ capnp.List }

// NewZarbServer_getTransaction_Results creates a new list of ZarbServer_getTransaction_Results.
func NewZarbServer_getTransaction_Results_List(s *capnp.Segment, sz int32) (ZarbServer_getTransaction_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_getTransaction_Results_List{l}, err
}

func (s ZarbServer_getTransaction_Results_List) At(i int) ZarbServer_getTransaction_Results {
	return ZarbServer_getTransaction_Results{s.List.Struct(i)}
}

func (s ZarbServer_getTransaction_Results_List) Set(i int, v ZarbServer_getTransaction_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getTransaction_Results_List) String() string {
	str, _ := text.MarshalList(0xa2b1016cefab775b, s.List)
	return str
}

// ZarbServer_getTransaction_Results_Promise is a wrapper for a ZarbServer_getTransaction_Results promised by a client call.
type ZarbServer_getTransaction_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getTransaction_Results_Promise) Struct() (ZarbServer_getTransaction_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getTransaction_Results{s}, err
}

func (p ZarbServer_getTransaction_Results_Promise) Result() TransactionResult_Promise {
	return TransactionResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ZarbServer_getAccount_Params struct{ capnp.Struct }

// ZarbServer_getAccount_Params_TypeID is the unique identifier for the type ZarbServer_getAccount_Params.
const ZarbServer_getAccount_Params_TypeID = 0xcd6c734787642800

func NewZarbServer_getAccount_Params(s *capnp.Segment) (ZarbServer_getAccount_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZarbServer_getAccount_Params{st}, err
}

func NewRootZarbServer_getAccount_Params(s *capnp.Segment) (ZarbServer_getAccount_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZarbServer_getAccount_Params{st}, err
}

func ReadRootZarbServer_getAccount_Params(msg *capnp.Message) (ZarbServer_getAccount_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getAccount_Params{root.Struct()}, err
}

func (s ZarbServer_getAccount_Params) String() string {
	str, _ := text.Marshal(0xcd6c734787642800, s.Struct)
	return str
}

func (s ZarbServer_getAccount_Params) Address() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ZarbServer_getAccount_Params) HasAddress() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getAccount_Params) AddressBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ZarbServer_getAccount_Params) SetAddress(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ZarbServer_getAccount_Params) Verbosity() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s ZarbServer_getAccount_Params) SetVerbosity(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// ZarbServer_getAccount_Params_List is a list of ZarbServer_getAccount_Params.
type ZarbServer_getAccount_Params_List struct{ capnp.List }

// NewZarbServer_getAccount_Params creates a new list of ZarbServer_getAccount_Params.
func NewZarbServer_getAccount_Params_List(s *capnp.Segment, sz int32) (ZarbServer_getAccount_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ZarbServer_getAccount_Params_List{l}, err
}

func (s ZarbServer_getAccount_Params_List) At(i int) ZarbServer_getAccount_Params {
	return ZarbServer_getAccount_Params{s.List.Struct(i)}
}

func (s ZarbServer_getAccount_Params_List) Set(i int, v ZarbServer_getAccount_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getAccount_Params_List) String() string {
	str, _ := text.MarshalList(0xcd6c734787642800, s.List)
	return str
}

// ZarbServer_getAccount_Params_Promise is a wrapper for a ZarbServer_getAccount_Params promised by a client call.
type ZarbServer_getAccount_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getAccount_Params_Promise) Struct() (ZarbServer_getAccount_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getAccount_Params{s}, err
}

type ZarbServer_getAccount_Results struct{ capnp.Struct }

// ZarbServer_getAccount_Results_TypeID is the unique identifier for the type ZarbServer_getAccount_Results.
const ZarbServer_getAccount_Results_TypeID = 0x8e979661cc6a1161

func NewZarbServer_getAccount_Results(s *capnp.Segment) (ZarbServer_getAccount_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getAccount_Results{st}, err
}

func NewRootZarbServer_getAccount_Results(s *capnp.Segment) (ZarbServer_getAccount_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getAccount_Results{st}, err
}

func ReadRootZarbServer_getAccount_Results(msg *capnp.Message) (ZarbServer_getAccount_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getAccount_Results{root.Struct()}, err
}

func (s ZarbServer_getAccount_Results) String() string {
	str, _ := text.Marshal(0x8e979661cc6a1161, s.Struct)
	return str
}

func (s ZarbServer_getAccount_Results) Result() (AccountResult, error) {
	p, err := s.Struct.Ptr(0)
	return AccountResult{Struct: p.Struct()}, err
}

func (s ZarbServer_getAccount_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getAccount_Results) SetResult(v AccountResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated AccountResult struct, preferring placement in s's segment.
func (s ZarbServer_getAccount_Results) NewResult() (AccountResult, error) {
	ss, err := NewAccountResult(s.Struct.Segment())
	if err != nil {
		return AccountResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_getAccount_Results_List is a list of ZarbServer_getAccount_Results.
type ZarbServer_getAccount_Results_List struct{ capnp.List }

// NewZarbServer_getAccount_Results creates a new list of ZarbServer_getAccount_Results.
func NewZarbServer_getAccount_Results_List(s *capnp.Segment, sz int32) (ZarbServer_getAccount_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_getAccount_Results_List{l}, err
}

func (s ZarbServer_getAccount_Results_List) At(i int) ZarbServer_getAccount_Results {
	return ZarbServer_getAccount_Results{s.List.Struct(i)}
}

func (s ZarbServer_getAccount_Results_List) Set(i int, v ZarbServer_getAccount_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getAccount_Results_List) String() string {
	str, _ := text.MarshalList(0x8e979661cc6a1161, s.List)
	return str
}

// ZarbServer_getAccount_Results_Promise is a wrapper for a ZarbServer_getAccount_Results promised by a client call.
type ZarbServer_getAccount_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getAccount_Results_Promise) Struct() (ZarbServer_getAccount_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getAccount_Results{s}, err
}

func (p ZarbServer_getAccount_Results_Promise) Result() AccountResult_Promise {
	return AccountResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ZarbServer_getValidator_Params struct{ capnp.Struct }

// ZarbServer_getValidator_Params_TypeID is the unique identifier for the type ZarbServer_getValidator_Params.
const ZarbServer_getValidator_Params_TypeID = 0xeed94cf76be61d8e

func NewZarbServer_getValidator_Params(s *capnp.Segment) (ZarbServer_getValidator_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZarbServer_getValidator_Params{st}, err
}

func NewRootZarbServer_getValidator_Params(s *capnp.Segment) (ZarbServer_getValidator_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ZarbServer_getValidator_Params{st}, err
}

func ReadRootZarbServer_getValidator_Params(msg *capnp.Message) (ZarbServer_getValidator_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getValidator_Params{root.Struct()}, err
}

func (s ZarbServer_getValidator_Params) String() string {
	str, _ := text.Marshal(0xeed94cf76be61d8e, s.Struct)
	return str
}

func (s ZarbServer_getValidator_Params) Address() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ZarbServer_getValidator_Params) HasAddress() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getValidator_Params) AddressBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ZarbServer_getValidator_Params) SetAddress(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ZarbServer_getValidator_Params) Verbosity() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s ZarbServer_getValidator_Params) SetVerbosity(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// ZarbServer_getValidator_Params_List is a list of ZarbServer_getValidator_Params.
type ZarbServer_getValidator_Params_List struct{ capnp.List }

// NewZarbServer_getValidator_Params creates a new list of ZarbServer_getValidator_Params.
func NewZarbServer_getValidator_Params_List(s *capnp.Segment, sz int32) (ZarbServer_getValidator_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ZarbServer_getValidator_Params_List{l}, err
}

func (s ZarbServer_getValidator_Params_List) At(i int) ZarbServer_getValidator_Params {
	return ZarbServer_getValidator_Params{s.List.Struct(i)}
}

func (s ZarbServer_getValidator_Params_List) Set(i int, v ZarbServer_getValidator_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getValidator_Params_List) String() string {
	str, _ := text.MarshalList(0xeed94cf76be61d8e, s.List)
	return str
}

// ZarbServer_getValidator_Params_Promise is a wrapper for a ZarbServer_getValidator_Params promised by a client call.
type ZarbServer_getValidator_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getValidator_Params_Promise) Struct() (ZarbServer_getValidator_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getValidator_Params{s}, err
}

type ZarbServer_getValidator_Results struct{ capnp.Struct }

// ZarbServer_getValidator_Results_TypeID is the unique identifier for the type ZarbServer_getValidator_Results.
const ZarbServer_getValidator_Results_TypeID = 0xfb42d1f26b074c15

func NewZarbServer_getValidator_Results(s *capnp.Segment) (ZarbServer_getValidator_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getValidator_Results{st}, err
}

func NewRootZarbServer_getValidator_Results(s *capnp.Segment) (ZarbServer_getValidator_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getValidator_Results{st}, err
}

func ReadRootZarbServer_getValidator_Results(msg *capnp.Message) (ZarbServer_getValidator_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getValidator_Results{root.Struct()}, err
}

func (s ZarbServer_getValidator_Results) String() string {
	str, _ := text.Marshal(0xfb42d1f26b074c15, s.Struct)
	return str
}

func (s ZarbServer_getValidator_Results) Result() (ValidatorResult, error) {
	p, err := s.Struct.Ptr(0)
	return ValidatorResult{Struct: p.Struct()}, err
}

func (s ZarbServer_getValidator_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getValidator_Results) SetResult(v ValidatorResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated ValidatorResult struct, preferring placement in s's segment.
func (s ZarbServer_getValidator_Results) NewResult() (ValidatorResult, error) {
	ss, err := NewValidatorResult(s.Struct.Segment())
	if err != nil {
		return ValidatorResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_getValidator_Results_List is a list of ZarbServer_getValidator_Results.
type ZarbServer_getValidator_Results_List struct{ capnp.List }

// NewZarbServer_getValidator_Results creates a new list of ZarbServer_getValidator_Results.
func NewZarbServer_getValidator_Results_List(s *capnp.Segment, sz int32) (ZarbServer_getValidator_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_getValidator_Results_List{l}, err
}

func (s ZarbServer_getValidator_Results_List) At(i int) ZarbServer_getValidator_Results {
	return ZarbServer_getValidator_Results{s.List.Struct(i)}
}

func (s ZarbServer_getValidator_Results_List) Set(i int, v ZarbServer_getValidator_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getValidator_Results_List) String() string {
	str, _ := text.MarshalList(0xfb42d1f26b074c15, s.List)
	return str
}

// ZarbServer_getValidator_Results_Promise is a wrapper for a ZarbServer_getValidator_Results promised by a client call.
type ZarbServer_getValidator_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getValidator_Results_Promise) Struct() (ZarbServer_getValidator_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getValidator_Results{s}, err
}

func (p ZarbServer_getValidator_Results_Promise) Result() ValidatorResult_Promise {
	return ValidatorResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ZarbServer_getBlockchainInfo_Params struct{ capnp.Struct }

// ZarbServer_getBlockchainInfo_Params_TypeID is the unique identifier for the type ZarbServer_getBlockchainInfo_Params.
const ZarbServer_getBlockchainInfo_Params_TypeID = 0x8fb41d4bd35c5a30

func NewZarbServer_getBlockchainInfo_Params(s *capnp.Segment) (ZarbServer_getBlockchainInfo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ZarbServer_getBlockchainInfo_Params{st}, err
}

func NewRootZarbServer_getBlockchainInfo_Params(s *capnp.Segment) (ZarbServer_getBlockchainInfo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ZarbServer_getBlockchainInfo_Params{st}, err
}

func ReadRootZarbServer_getBlockchainInfo_Params(msg *capnp.Message) (ZarbServer_getBlockchainInfo_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getBlockchainInfo_Params{root.Struct()}, err
}

func (s ZarbServer_getBlockchainInfo_Params) String() string {
	str, _ := text.Marshal(0x8fb41d4bd35c5a30, s.Struct)
	return str
}

// ZarbServer_getBlockchainInfo_Params_List is a list of ZarbServer_getBlockchainInfo_Params.
type ZarbServer_getBlockchainInfo_Params_List struct{ capnp.List }

// NewZarbServer_getBlockchainInfo_Params creates a new list of ZarbServer_getBlockchainInfo_Params.
func NewZarbServer_getBlockchainInfo_Params_List(s *capnp.Segment, sz int32) (ZarbServer_getBlockchainInfo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return ZarbServer_getBlockchainInfo_Params_List{l}, err
}

func (s ZarbServer_getBlockchainInfo_Params_List) At(i int) ZarbServer_getBlockchainInfo_Params {
	return ZarbServer_getBlockchainInfo_Params{s.List.Struct(i)}
}

func (s ZarbServer_getBlockchainInfo_Params_List) Set(i int, v ZarbServer_getBlockchainInfo_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getBlockchainInfo_Params_List) String() string {
	str, _ := text.MarshalList(0x8fb41d4bd35c5a30, s.List)
	return str
}

// ZarbServer_getBlockchainInfo_Params_Promise is a wrapper for a ZarbServer_getBlockchainInfo_Params promised by a client call.
type ZarbServer_getBlockchainInfo_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getBlockchainInfo_Params_Promise) Struct() (ZarbServer_getBlockchainInfo_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getBlockchainInfo_Params{s}, err
}

type ZarbServer_getBlockchainInfo_Results struct{ capnp.Struct }

// ZarbServer_getBlockchainInfo_Results_TypeID is the unique identifier for the type ZarbServer_getBlockchainInfo_Results.
const ZarbServer_getBlockchainInfo_Results_TypeID = 0xa128fe760c2612c4

func NewZarbServer_getBlockchainInfo_Results(s *capnp.Segment) (ZarbServer_getBlockchainInfo_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getBlockchainInfo_Results{st}, err
}

func NewRootZarbServer_getBlockchainInfo_Results(s *capnp.Segment) (ZarbServer_getBlockchainInfo_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getBlockchainInfo_Results{st}, err
}

func ReadRootZarbServer_getBlockchainInfo_Results(msg *capnp.Message) (ZarbServer_getBlockchainInfo_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getBlockchainInfo_Results{root.Struct()}, err
}

func (s ZarbServer_getBlockchainInfo_Results) String() string {
	str, _ := text.Marshal(0xa128fe760c2612c4, s.Struct)
	return str
}

func (s ZarbServer_getBlockchainInfo_Results) Result() (BlockchainInfoResult, error) {
	p, err := s.Struct.Ptr(0)
	return BlockchainInfoResult{Struct: p.Struct()}, err
}

func (s ZarbServer_getBlockchainInfo_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getBlockchainInfo_Results) SetResult(v BlockchainInfoResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated BlockchainInfoResult struct, preferring placement in s's segment.
func (s ZarbServer_getBlockchainInfo_Results) NewResult() (BlockchainInfoResult, error) {
	ss, err := NewBlockchainInfoResult(s.Struct.Segment())
	if err != nil {
		return BlockchainInfoResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_getBlockchainInfo_Results_List is a list of ZarbServer_getBlockchainInfo_Results.
type ZarbServer_getBlockchainInfo_Results_List struct{ capnp.List }

// NewZarbServer_getBlockchainInfo_Results creates a new list of ZarbServer_getBlockchainInfo_Results.
func NewZarbServer_getBlockchainInfo_Results_List(s *capnp.Segment, sz int32) (ZarbServer_getBlockchainInfo_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_getBlockchainInfo_Results_List{l}, err
}

func (s ZarbServer_getBlockchainInfo_Results_List) At(i int) ZarbServer_getBlockchainInfo_Results {
	return ZarbServer_getBlockchainInfo_Results{s.List.Struct(i)}
}

func (s ZarbServer_getBlockchainInfo_Results_List) Set(i int, v ZarbServer_getBlockchainInfo_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getBlockchainInfo_Results_List) String() string {
	str, _ := text.MarshalList(0xa128fe760c2612c4, s.List)
	return str
}

// ZarbServer_getBlockchainInfo_Results_Promise is a wrapper for a ZarbServer_getBlockchainInfo_Results promised by a client call.
type ZarbServer_getBlockchainInfo_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getBlockchainInfo_Results_Promise) Struct() (ZarbServer_getBlockchainInfo_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getBlockchainInfo_Results{s}, err
}

func (p ZarbServer_getBlockchainInfo_Results_Promise) Result() BlockchainInfoResult_Promise {
	return BlockchainInfoResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ZarbServer_getNetworkInfo_Params struct{ capnp.Struct }

// ZarbServer_getNetworkInfo_Params_TypeID is the unique identifier for the type ZarbServer_getNetworkInfo_Params.
const ZarbServer_getNetworkInfo_Params_TypeID = 0xe051a47070c97f9e

func NewZarbServer_getNetworkInfo_Params(s *capnp.Segment) (ZarbServer_getNetworkInfo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ZarbServer_getNetworkInfo_Params{st}, err
}

func NewRootZarbServer_getNetworkInfo_Params(s *capnp.Segment) (ZarbServer_getNetworkInfo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ZarbServer_getNetworkInfo_Params{st}, err
}

func ReadRootZarbServer_getNetworkInfo_Params(msg *capnp.Message) (ZarbServer_getNetworkInfo_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getNetworkInfo_Params{root.Struct()}, err
}

func (s ZarbServer_getNetworkInfo_Params) String() string {
	str, _ := text.Marshal(0xe051a47070c97f9e, s.Struct)
	return str
}

// ZarbServer_getNetworkInfo_Params_List is a list of ZarbServer_getNetworkInfo_Params.
type ZarbServer_getNetworkInfo_Params_List struct{ capnp.List }

// NewZarbServer_getNetworkInfo_Params creates a new list of ZarbServer_getNetworkInfo_Params.
func NewZarbServer_getNetworkInfo_Params_List(s *capnp.Segment, sz int32) (ZarbServer_getNetworkInfo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return ZarbServer_getNetworkInfo_Params_List{l}, err
}

func (s ZarbServer_getNetworkInfo_Params_List) At(i int) ZarbServer_getNetworkInfo_Params {
	return ZarbServer_getNetworkInfo_Params{s.List.Struct(i)}
}

func (s ZarbServer_getNetworkInfo_Params_List) Set(i int, v ZarbServer_getNetworkInfo_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getNetworkInfo_Params_List) String() string {
	str, _ := text.MarshalList(0xe051a47070c97f9e, s.List)
	return str
}

// ZarbServer_getNetworkInfo_Params_Promise is a wrapper for a ZarbServer_getNetworkInfo_Params promised by a client call.
type ZarbServer_getNetworkInfo_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getNetworkInfo_Params_Promise) Struct() (ZarbServer_getNetworkInfo_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getNetworkInfo_Params{s}, err
}

type ZarbServer_getNetworkInfo_Results struct{ capnp.Struct }

// ZarbServer_getNetworkInfo_Results_TypeID is the unique identifier for the type ZarbServer_getNetworkInfo_Results.
const ZarbServer_getNetworkInfo_Results_TypeID = 0x8d7ad02d9eab8fb7

func NewZarbServer_getNetworkInfo_Results(s *capnp.Segment) (ZarbServer_getNetworkInfo_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getNetworkInfo_Results{st}, err
}

func NewRootZarbServer_getNetworkInfo_Results(s *capnp.Segment) (ZarbServer_getNetworkInfo_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getNetworkInfo_Results{st}, err
}

func ReadRootZarbServer_getNetworkInfo_Results(msg *capnp.Message) (ZarbServer_getNetworkInfo_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getNetworkInfo_Results{root.Struct()}, err
}

func (s ZarbServer_getNetworkInfo_Results) String() string {
	str, _ := text.Marshal(0x8d7ad02d9eab8fb7, s.Struct)
	return str
}

func (s ZarbServer_getNetworkInfo_Results) Result() (NetworkInfoResult, error) {
	p, err := s.Struct.Ptr(0)
	return NetworkInfoResult{Struct: p.Struct()}, err
}

func (s ZarbServer_getNetworkInfo_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getNetworkInfo_Results) SetResult(v NetworkInfoResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated NetworkInfoResult struct, preferring placement in s's segment.
func (s ZarbServer_getNetworkInfo_Results) NewResult() (NetworkInfoResult, error) {
	ss, err := NewNetworkInfoResult(s.Struct.Segment())
	if err != nil {
		return NetworkInfoResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_getNetworkInfo_Results_List is a list of ZarbServer_getNetworkInfo_Results.
type ZarbServer_getNetworkInfo_Results_List struct{ capnp.List }

// NewZarbServer_getNetworkInfo_Results creates a new list of ZarbServer_getNetworkInfo_Results.
func NewZarbServer_getNetworkInfo_Results_List(s *capnp.Segment, sz int32) (ZarbServer_getNetworkInfo_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_getNetworkInfo_Results_List{l}, err
}

func (s ZarbServer_getNetworkInfo_Results_List) At(i int) ZarbServer_getNetworkInfo_Results {
	return ZarbServer_getNetworkInfo_Results{s.List.Struct(i)}
}

func (s ZarbServer_getNetworkInfo_Results_List) Set(i int, v ZarbServer_getNetworkInfo_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getNetworkInfo_Results_List) String() string {
	str, _ := text.MarshalList(0x8d7ad02d9eab8fb7, s.List)
	return str
}

// ZarbServer_getNetworkInfo_Results_Promise is a wrapper for a ZarbServer_getNetworkInfo_Results promised by a client call.
type ZarbServer_getNetworkInfo_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getNetworkInfo_Results_Promise) Struct() (ZarbServer_getNetworkInfo_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getNetworkInfo_Results{s}, err
}

func (p ZarbServer_getNetworkInfo_Results_Promise) Result() NetworkInfoResult_Promise {
	return NetworkInfoResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ZarbServer_getConsensusInfo_Params struct{ capnp.Struct }

// ZarbServer_getConsensusInfo_Params_TypeID is the unique identifier for the type ZarbServer_getConsensusInfo_Params.
const ZarbServer_getConsensusInfo_Params_TypeID = 0x8317eae56a55f0ba

func NewZarbServer_getConsensusInfo_Params(s *capnp.Segment) (ZarbServer_getConsensusInfo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ZarbServer_getConsensusInfo_Params{st}, err
}

func NewRootZarbServer_getConsensusInfo_Params(s *capnp.Segment) (ZarbServer_getConsensusInfo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ZarbServer_getConsensusInfo_Params{st}, err
}

func ReadRootZarbServer_getConsensusInfo_Params(msg *capnp.Message) (ZarbServer_getConsensusInfo_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getConsensusInfo_Params{root.Struct()}, err
}

func (s ZarbServer_getConsensusInfo_Params) String() string {
	str, _ := text.Marshal(0x8317eae56a55f0ba, s.Struct)
	return str
}

// ZarbServer_getConsensusInfo_Params_List is a list of ZarbServer_getConsensusInfo_Params.
type ZarbServer_getConsensusInfo_Params_List struct{ capnp.List }

// NewZarbServer_getConsensusInfo_Params creates a new list of ZarbServer_getConsensusInfo_Params.
func NewZarbServer_getConsensusInfo_Params_List(s *capnp.Segment, sz int32) (ZarbServer_getConsensusInfo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return ZarbServer_getConsensusInfo_Params_List{l}, err
}

func (s ZarbServer_getConsensusInfo_Params_List) At(i int) ZarbServer_getConsensusInfo_Params {
	return ZarbServer_getConsensusInfo_Params{s.List.Struct(i)}
}

func (s ZarbServer_getConsensusInfo_Params_List) Set(i int, v ZarbServer_getConsensusInfo_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getConsensusInfo_Params_List) String() string {
	str, _ := text.MarshalList(0x8317eae56a55f0ba, s.List)
	return str
}

// ZarbServer_getConsensusInfo_Params_Promise is a wrapper for a ZarbServer_getConsensusInfo_Params promised by a client call.
type ZarbServer_getConsensusInfo_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getConsensusInfo_Params_Promise) Struct() (ZarbServer_getConsensusInfo_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getConsensusInfo_Params{s}, err
}

type ZarbServer_getConsensusInfo_Results struct{ capnp.Struct }

// ZarbServer_getConsensusInfo_Results_TypeID is the unique identifier for the type ZarbServer_getConsensusInfo_Results.
const ZarbServer_getConsensusInfo_Results_TypeID = 0xc0689e5f33bf949d

func NewZarbServer_getConsensusInfo_Results(s *capnp.Segment) (ZarbServer_getConsensusInfo_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getConsensusInfo_Results{st}, err
}

func NewRootZarbServer_getConsensusInfo_Results(s *capnp.Segment) (ZarbServer_getConsensusInfo_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_getConsensusInfo_Results{st}, err
}

func ReadRootZarbServer_getConsensusInfo_Results(msg *capnp.Message) (ZarbServer_getConsensusInfo_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_getConsensusInfo_Results{root.Struct()}, err
}

func (s ZarbServer_getConsensusInfo_Results) String() string {
	str, _ := text.Marshal(0xc0689e5f33bf949d, s.Struct)
	return str
}

func (s ZarbServer_getConsensusInfo_Results) Result() (ConsensusInfoResult, error) {
	p, err := s.Struct.Ptr(0)
	return ConsensusInfoResult{Struct: p.Struct()}, err
}

func (s ZarbServer_getConsensusInfo_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_getConsensusInfo_Results) SetResult(v ConsensusInfoResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated ConsensusInfoResult struct, preferring placement in s's segment.
func (s ZarbServer_getConsensusInfo_Results) NewResult() (ConsensusInfoResult, error) {
	ss, err := NewConsensusInfoResult(s.Struct.Segment())
	if err != nil {
		return ConsensusInfoResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_getConsensusInfo_Results_List is a list of ZarbServer_getConsensusInfo_Results.
type ZarbServer_getConsensusInfo_Results_List struct{ capnp.List }

// NewZarbServer_getConsensusInfo_Results creates a new list of ZarbServer_getConsensusInfo_Results.
func NewZarbServer_getConsensusInfo_Results_List(s *capnp.Segment, sz int32) (ZarbServer_getConsensusInfo_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_getConsensusInfo_Results_List{l}, err
}

func (s ZarbServer_getConsensusInfo_Results_List) At(i int) ZarbServer_getConsensusInfo_Results {
	return ZarbServer_getConsensusInfo_Results{s.List.Struct(i)}
}

func (s ZarbServer_getConsensusInfo_Results_List) Set(i int, v ZarbServer_getConsensusInfo_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_getConsensusInfo_Results_List) String() string {
	str, _ := text.MarshalList(0xc0689e5f33bf949d, s.List)
	return str
}

// ZarbServer_getConsensusInfo_Results_Promise is a wrapper for a ZarbServer_getConsensusInfo_Results promised by a client call.
type ZarbServer_getConsensusInfo_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_getConsensusInfo_Results_Promise) Struct() (ZarbServer_getConsensusInfo_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_getConsensusInfo_Results{s}, err
}

func (p ZarbServer_getConsensusInfo_Results_Promise) Result() ConsensusInfoResult_Promise {
	return ConsensusInfoResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ZarbServer_sendRawTransaction_Params struct{ capnp.Struct }

// ZarbServer_sendRawTransaction_Params_TypeID is the unique identifier for the type ZarbServer_sendRawTransaction_Params.
const ZarbServer_sendRawTransaction_Params_TypeID = 0xfe238774e8fa0fd9

func NewZarbServer_sendRawTransaction_Params(s *capnp.Segment) (ZarbServer_sendRawTransaction_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_sendRawTransaction_Params{st}, err
}

func NewRootZarbServer_sendRawTransaction_Params(s *capnp.Segment) (ZarbServer_sendRawTransaction_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_sendRawTransaction_Params{st}, err
}

func ReadRootZarbServer_sendRawTransaction_Params(msg *capnp.Message) (ZarbServer_sendRawTransaction_Params, error) {
	root, err := msg.RootPtr()
	return ZarbServer_sendRawTransaction_Params{root.Struct()}, err
}

func (s ZarbServer_sendRawTransaction_Params) String() string {
	str, _ := text.Marshal(0xfe238774e8fa0fd9, s.Struct)
	return str
}

func (s ZarbServer_sendRawTransaction_Params) RawTx() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ZarbServer_sendRawTransaction_Params) HasRawTx() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_sendRawTransaction_Params) SetRawTx(v []byte) error {
	return s.Struct.SetData(0, v)
}

// ZarbServer_sendRawTransaction_Params_List is a list of ZarbServer_sendRawTransaction_Params.
type ZarbServer_sendRawTransaction_Params_List struct{ capnp.List }

// NewZarbServer_sendRawTransaction_Params creates a new list of ZarbServer_sendRawTransaction_Params.
func NewZarbServer_sendRawTransaction_Params_List(s *capnp.Segment, sz int32) (ZarbServer_sendRawTransaction_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_sendRawTransaction_Params_List{l}, err
}

func (s ZarbServer_sendRawTransaction_Params_List) At(i int) ZarbServer_sendRawTransaction_Params {
	return ZarbServer_sendRawTransaction_Params{s.List.Struct(i)}
}

func (s ZarbServer_sendRawTransaction_Params_List) Set(i int, v ZarbServer_sendRawTransaction_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_sendRawTransaction_Params_List) String() string {
	str, _ := text.MarshalList(0xfe238774e8fa0fd9, s.List)
	return str
}

// ZarbServer_sendRawTransaction_Params_Promise is a wrapper for a ZarbServer_sendRawTransaction_Params promised by a client call.
type ZarbServer_sendRawTransaction_Params_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_sendRawTransaction_Params_Promise) Struct() (ZarbServer_sendRawTransaction_Params, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_sendRawTransaction_Params{s}, err
}

type ZarbServer_sendRawTransaction_Results struct{ capnp.Struct }

// ZarbServer_sendRawTransaction_Results_TypeID is the unique identifier for the type ZarbServer_sendRawTransaction_Results.
const ZarbServer_sendRawTransaction_Results_TypeID = 0x9090e4cdf26bda5a

func NewZarbServer_sendRawTransaction_Results(s *capnp.Segment) (ZarbServer_sendRawTransaction_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_sendRawTransaction_Results{st}, err
}

func NewRootZarbServer_sendRawTransaction_Results(s *capnp.Segment) (ZarbServer_sendRawTransaction_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ZarbServer_sendRawTransaction_Results{st}, err
}

func ReadRootZarbServer_sendRawTransaction_Results(msg *capnp.Message) (ZarbServer_sendRawTransaction_Results, error) {
	root, err := msg.RootPtr()
	return ZarbServer_sendRawTransaction_Results{root.Struct()}, err
}

func (s ZarbServer_sendRawTransaction_Results) String() string {
	str, _ := text.Marshal(0x9090e4cdf26bda5a, s.Struct)
	return str
}

func (s ZarbServer_sendRawTransaction_Results) Result() (SendTransactionResult, error) {
	p, err := s.Struct.Ptr(0)
	return SendTransactionResult{Struct: p.Struct()}, err
}

func (s ZarbServer_sendRawTransaction_Results) HasResult() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZarbServer_sendRawTransaction_Results) SetResult(v SendTransactionResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated SendTransactionResult struct, preferring placement in s's segment.
func (s ZarbServer_sendRawTransaction_Results) NewResult() (SendTransactionResult, error) {
	ss, err := NewSendTransactionResult(s.Struct.Segment())
	if err != nil {
		return SendTransactionResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ZarbServer_sendRawTransaction_Results_List is a list of ZarbServer_sendRawTransaction_Results.
type ZarbServer_sendRawTransaction_Results_List struct{ capnp.List }

// NewZarbServer_sendRawTransaction_Results creates a new list of ZarbServer_sendRawTransaction_Results.
func NewZarbServer_sendRawTransaction_Results_List(s *capnp.Segment, sz int32) (ZarbServer_sendRawTransaction_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ZarbServer_sendRawTransaction_Results_List{l}, err
}

func (s ZarbServer_sendRawTransaction_Results_List) At(i int) ZarbServer_sendRawTransaction_Results {
	return ZarbServer_sendRawTransaction_Results{s.List.Struct(i)}
}

func (s ZarbServer_sendRawTransaction_Results_List) Set(i int, v ZarbServer_sendRawTransaction_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZarbServer_sendRawTransaction_Results_List) String() string {
	str, _ := text.MarshalList(0x9090e4cdf26bda5a, s.List)
	return str
}

// ZarbServer_sendRawTransaction_Results_Promise is a wrapper for a ZarbServer_sendRawTransaction_Results promised by a client call.
type ZarbServer_sendRawTransaction_Results_Promise struct{ *capnp.Pipeline }

func (p ZarbServer_sendRawTransaction_Results_Promise) Struct() (ZarbServer_sendRawTransaction_Results, error) {
	s, err := p.Pipeline.Struct()
	return ZarbServer_sendRawTransaction_Results{s}, err
}

func (p ZarbServer_sendRawTransaction_Results_Promise) Result() SendTransactionResult_Promise {
	return SendTransactionResult_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_84b56bd0975dfd33 = "x\xda\xb4X{pTg\x15?\xe7\xde\xdd\xbd\xd9\xbc" +
	"vo\xee\xa6U\xa6mZ\x05\x85HZH\xda\xb1\xcd" +
	"X\x97\xa6\xb4<Jt\xef.\xd46R\xcbM\xf6#" +
	"Y\xb2\xd9\xbb\xbd\xf7n\x02\x8c\x9d(\x94\xe9\x80B\x11" +
	"A\x90\x11\x86\xf41J\xa9\xd42m%\x1d\x99\x8a\x16" +
	"\x1dP\xa6\x05\xc6q\xc0Zm\xa7Xt|48L" +
	"\xa5\x0e\xacs\xbe\xdd\xfb\xd8M\x08\x093\xfe\xb7{\xee" +
	"\xf9\xce\xeb;\xe7w\xcewfUJs\x84\xd9\xfeG" +
	"\xab\x00\xd4'\xfc\x81\xfc\xb9\x8b\xdf~8\x10\x8d\xac\x05" +
	"\xb9\x1e\xf3-\x97\x1e\xd9\xfeV\xef+O\x80\xdf'\x01" +
	"\xb4l\xf3W\xa2\xf2\x9c_\x02P\x86\xfc\x1f\x00\xe6_" +
	"\xfbp\xc9\x8a\xb3\x7f\xbb~-\xc87#\x00\xe7\xc9\x05" +
	"~\x81\xe0\xcb\x9f\x8c\xff\xf2\xf0M\x9f\x9b\xb6\x0e\xd4\x9b" +
	"\xd1\xfe\xc4\x02O#\xa0\x92\x0bD\x01\xf3?}j\xdf" +
	"\xee\xa6\xb7Vo,\x1c\xf5#\x97\x1fx\x8d\x18\x9e#" +
	"\x86\xcb\xc7N\xfeg\xc6\xafG6\x16\xce\x17\xbe\x1f\x09" +
	"\xac\xa1\xef'\x02\x03\x80yM^\xf1[\xed{\xdb7" +
	"y\x05\xcc\x96v\x12\xc3=\x12i\xf8\xf0\xf9\x1d\x83\xaf" +
	"\xbc\xfd\xce&P\xeb\xb1\xdc\x15E\x93\xdeS\xfa$:" +
	"\x93\x92\xbe\x82\x80\xf9Y\x1dKO=p\xe3\xcbOy" +
	"\\9Rq\x8c\\\xe98\xd3{\xfe\xf8\xfb\x9b7{" +
	"\x15\x0dW\x9c!E\xc7+HQ\x85\xf2\xc2\xd7\x1ek" +
	"\xe8\xdd\xeae\xf8G\xc5\xf3\xc4p\x893\xfc\xe6\xe8\xa1" +
	"\xa1\xfd'\xb2\xdb\xcbb*\x10\xe3\x8d\xc1VT\x9a\x82" +
	"d\xd3\x8c \xf9\xf5F\xddg\xaa\xfb/O\x1f*\x09" +
	"L\xf0$I\xdb\x1b$i_\x1d\xd8\xf7\xaf4\xbe\xf4" +
	"\xb4\x97\xe1h\x90G\xee4g\xb8>V\xf9\xc5\xb7\xdb" +
	"\x0f=S\xa6\x8e3^\x0cNA%XI\xea\xfc\x95" +
	"\xc4\x9c\xdf\xb0\xf9\xb3\x0b6\xef\xdcW\x1e%2N\x99" +
	"VyR\x99\xcd\x99\x9b*\xe9\xbe\xd7\xefy\xdd\x9c\xf7" +
	"\xd1]\xfb\xc7bn\xf1W\xc5Q\xf9d\x15q\xd7W" +
	"\xbd\x08\x98_\xfa\xea\x1f\xd6\x9e\xaf\xd9u\x90\xb8\x852" +
	"C\x94\xe1\xaa\x8f\x95#\x9c\xf90g\x9e[=\xa8_" +
	"\xfa\xee\xbf\x0f\x96\x19-\x12G\xae\xfa\x8c\xf2\xcdj\xfa" +
	"\xf5x5\xf1\xf6\xbcz9r\xc3\xe7\x07\x0e\x8d\xc1\xdb" +
	"2\xa3\xa6\x15\x95\xbbj\x88\xf9\x8e\x1ab\xde\xb5\xf5\xf5" +
	"\x96Gw\xf7\xfc\xdc\x1b\xae\x135\xc7(\\gk(" +
	"\xd1\xa6'\x9f\x9cg\xa6\x8f{\x13\xcd_\xbb\x85\xbe\xd7" +
	"\xd7\xd2\x85,l\xfc\xd5\x81a\xdf\xef\xdf,w\x9as" +
	"\xe6j;PY_K\xea\xd6q\xee\xe1\x8e-\xd3\xb4" +
	"\x0d\x7f:\x05^y\xef\xd6\x1e y#\x9cc\xe4D" +
	"d\xdb\xad\xb7\x8c\xfcqLyjh!*,\xc4S" +
	"4D\xe6G\xfd_\xce}\xf0\xe6\xf0;\xc4\xed+\xcf" +
	"\xe2`\xf8\xa4R\x1f\xa6srX\x17\x00\xf3\xbb\x07\x8f" +
	"f\xb3\xcf\xaa\x7f\xf6d\xf1P\xdd\x01\xca\xe2g\xf2\xdf" +
	"\xda\xbfq\xcd\x0d\x7f\x1f+)\xbeS\xd7\x88\xcaP\x1d" +
	"I\xdcUGI\xb1\xe9\xc6\xbf\xf4~\xb4\xe8\xf4?K" +
	"\x9c8T\xc7\xcb\xf7x\x1d9q\xc3M?\\\xf3\x83" +
	"\xd8\xb9\x0b\xde\xa86)\x1b\x88\xe1n\x85D\xbc?x" +
	"\xaaf\xff{\x81\x8b \xd7\x8b\xae>\xc0\x96G\x14\x01" +
	"\x95\x94\xc2\x01A\x99'(\x97\"\x12@\xbe\xaa~\xd9" +
	"\xb6\x17\xef\xbf\xffbyP\xf8\x9d\x9e\x8dT\xa2r\x81" +
	"\xf8\x94\x91\x08\xe5a\xfd\"\xa9\xf7\xfc\x89\xb6\xffz\xb5" +
	"\x8f\xd4\xf3\x8a\xc3\xebH\xfb\xe9\xd0\xc7\xe7\xac'?}" +
	"\xd9\xcbp\xcbu\xbc\x88\xee\xe0\x0c\x03\x03\x03\xb7ui" +
	"\xd9\x8c\x98\xbdm\xb5ft\xdeJ\xbf\xb3\xadmi\xbd" +
	"\xab7\xce\xcc\\\xda\x02\x88!\xaaa\xd1\x07\xe0C\x00" +
	"Yk\x05P\x97\x8a\xa8\xf6\x08(#F(.2k" +
	"\x04P\x97\x89\xa8\xa6\x05\x94\x05!\x82\x02\x80\x9cj\x06" +
	"P\x93\"\xaaY\x01eQ\x8c\xa0\x08 \xf7\x11g\x8f" +
	"\x88\xaa%`\xb4\x87\xa5\xba{,\xac\x01\x01k\x00C" +
	"=\x9a\xd9c\xffi\xe8$\x130\xec\xd6\x03 \x86\x01" +
	"CI\xcd\xd2l&\xc7\xfa\xea\x12\xeb;4\xa33\xc1" +
	"\x8c~f\xdc\xda\xcd\xac{\xf5\x8c\xc92f\xce\\\x90" +
	"Y\xaeO\x8di\x86\xd6g\x82}p\x9cs<\x06\xf3" +
	"5\xb3\x87\xceHZ\x9f\xa9\xfa\x9c \xd4P\x10*D" +
	"T#\xae\x17>\x10\xd0\xe7\xb1\xc9?\x8e\xec/1k" +
	"@7z\xb9E\xf1(\x8f\xf3\x15\xc5\x1b\xfc3\x86]" +
	"\xf4,DbB\x8a\xb8\x13\xb6\xd3j\x85\xa3a\x06]" +
	"\xc3T\x11\xd5Y\x02\xda\x97\xd8\x14\x07Pg\x8a\xa8\xde" +
	")\x94\xdeE\xbe\x9f\x19\x9d\xba\x99\xb2\x00WM\xca\xcd" +
	"{\xba\xba\xf4\\\xc6\x9a\xca3I\x9c\x80\x8b\x0eb\x97" +
	"\xb9(\x94(\x99\xcf4)\xc9\x0c\xca\xcbO8\x02\xbf" +
	"\xdf\x06\xa0n\x15Q\xdd\xe3\xc9\xcb]\xe4\xe6\x0e\x11\xd5" +
	"g\x05\xc4bZ\x0e\x19\x00\xea\x1e\x11\xd5\x17(-\xb1" +
	"\x90\x96{\xc9\xf7\x1f\x89\xa8\xbe,\xa0\xec\x13\"\xe8\x03" +
	"\x90_\"\xce\x9f\x88\xa8\xfeL@\xd9/F\xd0\x0f " +
	"\x0f\xaf\x01P\x0f\x8a\xa8\xbe!\xe0`?3\xcc\x94\x9e" +
	"\xc1\x00\x08\x18\x00\x0cY\xa9>\xe6D(k\xb0~\x8a" +
	"?4\xf04r\xa2iZ\x9a\xc5\xe2\xba\x0eh\xb94" +
	"\xdd\xb0RVJ\x87\x86L\x82\xb1\xa4C\xcf\x1azV" +
	"7\x99\x81\xf7$\x93\x063M\xc0j\x10\xb0\xda\x13\x9a" +
	"\xc0\xd5n\xbf\xabGKe\xbc\xb9\x0fW?k\xb2L" +
	"2\xae\x0d,6\xb4\x8c\xa9uY)=3\xf1;t" +
	"\xda\xc4d\xd3\x94\xd7Z\x9c\x99\xa1\x09TC9\x00\x94" +
	"\xc2\x97\xa7\xbc\xa2\x05\x14\xa3\\\xf1d\x7f\xab\x9b\xfdN" +
	"\xae4\x11\\M\x17Q\x9d+`4\xcb\x98\xb1`\xae" +
	"\x1d\xec\x06\xfakb-`LD\x0c\xbb\xbd\x08\x90\x88" +
	"\xd7r\x17\x05\xb3\xf0\xea\xe1tF\x8dI\x84\xb3\xe4\xde" +
	"&\x0a/\xce0Q\xa6\xa84\xb4\xc5\x92&\xf3\xc5B" +
	"X=r\x1b]\xb9c\xe3ti\x1d?\xa8[\xc8\xca" +
	"\xbaK\xa3\xdb]\x9c\xe6\xd2\xecm.Xl.q\xb7" +
	"\x8f8U\xfc\x18q\xa6ETW\x0a\x18\xb2Ve\x19" +
	"\x0a \xa0\x00\xd8\xd0\xaf[\xccpj\xa7\xb3\x98n\x80" +
	"n\xbf1\xf4\\&\x89\"\x08(z\x0c\xf6\x8dn\x8b" +
	"\xce\x1d\xf2+D\x1e\x83j\xc7\x81\xfb\x08\x1e\xe6\x8a\xa8" +
	"\xc6\\\x07\xda\x09G\x16\x89\xa8>\xe4q`\x099\xb0" +
	"XDu\x99\x80\xf9\xb4f\xf2\x04\xc1\xde\xf9\xbc\x99\x80" +
	"\x03\"\xf6\x97r\x10\xe9\xd2\xfb\xfaR\x96\xc5\x00\x19\x86" +
	"\xdd\x09s\\\xdc\xbcW\xef\x8b\xf2C\xac\xcc\xe6\x0e\xd7" +
	"f\xa7\x1c\xdaW\xbbF\xdb\xd0\xb9\xa4\xa3hsV\xc0" +
	"\xbc\xa5[Z:\xa6\x0f\x80\xc8\x0c\xf4\x83\x80~\xafY" +
	"Q\x16\xd3\x07<\x1f\xfa\xb5t*\xa9Y:\x88\xdeB" +
	"r\x86\xb1\xb2B\x12\xca\xc3.v\xf5\x96\xd9L9<" +
	"GDu\x91\xc7\xe6\x05\x0b\x01\xd4\xf9\"\xaa\x8b=c" +
	"\x88\xfa\xa9\xa2#=\xbcWkIf`\xd8}\x14\x15" +
	"#F`}/3,\x00\xc0\xb0;\x85\x15\xbeJ\xd6" +
	"J\xc7h\xba\x80\xda+\x96\x87\xa7\xf2<\xc8\xe31{" +
	"\xcaXf7z\xe2o\x9b\xdd\xde\xe9\xc6_L9\x1d" +
	"\xa1\xb4\xae\xac\xa2:\x90\xa8\x0b\x95W[`\xc2SQ" +
	"\xc1T\x13\xe0\xaa(\xe1\x0c\xed\x93\x80#{\x0c\xe0\xfd" +
	"\x07M/\x10\xb7\x8d?\x86\x0cj\x85\xb6\xe7T\xeex" +
	"\x93Hi\xad&X&\xe9\xb9\x0d\x0f`\x8d\xdd\x07\x1c" +
	"\xf5S\x8am\xe0v\x01\xa3\xd4\xaas\xa6\xad\xc9s\x0d" +
	"\x93\x86\xe1X\x03o\xbe^\xe5S\xc6\xf7\xdd\xabm\xe2" +
	"n\x97\xdc\xabw\x82\xbfR\xe9\x08\xc5\x1cl\xf6\xe0\x96" +
	"\x9d\x82\xcd\xc5rJ\x8e\x9arK\xe1\x92\xc3\xab\xa7\xac" +
	"\x9d\xb7\xf4\xb8e\x1dc\x0c\xf9\x107\xd36M\x99\x86" +
	"\xad\x00\x89\x9bQ\xc4\xc4Lt\xc2\xa2\xcc\xc06\x80\xc4" +
	"T\"\xcfB\x17C\x95&l\x06HL'\xfa\xedD" +
	"\x17\x05\xde\x07\x94\xd9\\\xccL\xa2\xdfIt\x9f\xc8\x07" +
	":\xe5\x0e\x8c\x03$n'\xfa\x1c\xa2\xfb\x91\xcft\xca" +
	"\xdd\xb8\x10 \xf1\x05\xa2\xcf'z@\x88`\x00@\xb9" +
	"\x8f\xcb\x9fC\xf4ED\x97\xc4\x08\x7f\xb3/\xe0\xf2\xe7" +
	"\x12=F\xf4\x0a_\x04+\x00\x94v\xdc\x00\x90\x88\x11" +
	"})\xd1\x83\xfe\x08\x06\x01\x94\x87q\x0d@\xe2!\xa2" +
	"'\x89^\x19\x88`%\xbdl\xd1\x00H,#z\x1a" +
	"G\xa5\xdb`\x9f\x9eI\xf5\xbam\xabA\xebf\x19\xcb" +
	"\xfeW6\xa2\xe4\xb3\xb9\xcet\xaa\xeb\x01F)b\xd3" +
	"\xa8y$\x18\xcb\x10\xa8\xd9\x17\xb7<\xadu;*\xca" +
	"\xdf.\x06\xebb\xa9~\x96\xc4vf\x9aZ73\xdd" +
	"\x83\xf9T\x86cx;\xda\x9fF\x9d\x82\x86\xb6U\x94" +
	"\x07\xd7\xfa\x12*\xd6\xc8\x15\xa0\xf5\xc1b\x071\xe2," +
	"d\x03\xebdf\x8f\xf1\xacpd;o\xbd\xff\x13F" +
	"]\xfd\xad6q(v6\x94\xe3\x0el\xae\x0e\x0e\x03" +
	"SE?\x80\xbdSt\xb7\x17\x8a\x8c\x0bAP\x82(" +
	"!:;K\xb4\x17z\xf2\xa5\x15 \xc8\x17$\x14\x9c" +
	"\xb5\x0e\xda\xdb7\xf9\xaf\xabA\x90\xdf\x95P\xb4\x17H" +
	"\x9e\x8d\xe4\xef:@\x90\x8fK\xe8s6)h\xaf," +
	"\xe4\xc3$sXB\xbf\xb3rD{\xe5'\xffx\x0b" +
	"\x08\xf2^\x09\x03\xce\"\x07\xed=\xa9\xbc\x8b\xf4m\x93" +
	"Pr\xb6\xaeh\xaf\xb6\xe4\xf5\x1b@\x90\xd7IX\xe1" +
	",>\xd0\xdeZ\xca\xabv\x82 \xe7\xa4\xbc\x1di\x00" +
	"\x98\x83\xee\xbf\x10\x8dW\x05\x02\xc7m\x88\x16\x90\xbb@" +
	"\xe2-\x0c\xc4\x8cU\xf8\xcb\xf3\x05B\x941\x1e\x19h" +
	"\x8f\x86\xa8\x17\xa8<\xb9!ZH\xef\x02\x89\xe33\xda" +
	"\x00\xcdM\xb0\x1f[h\xb7\x0b\x91\xb4\xc6\xf0J7J" +
	"cJjy\xaaK\xb3\xd8\xa8\xe5L\xf3\x18\xe3sG" +
	"q\x0d\xf3\x0d\xcf\xf4\xf98%\xf0\xd7ETw\xb8\xb0" +
	")o\x8b\xbbO\xe8\xb2y\xd8\x99\xeb<\xe3\x9b\xaf8" +
	"\x09i\x9d&\xcbX\x8c\x01\x8e\xfad\xa6\xba3\x9a\x95" +
	"3hJ\xbd\xb6z\x9c\xe0{\xb0t\x94\x0cOd\x08" +
	"\x1a\xe3\x8dk\x0f(\x1e]\xcd\xae\xae\x06C\x1bX\xbc" +
	"\xd2\xf6\xe3\x7f\x01\x00\x00\xff\xff\x18@>b"

func init() {
	schemas.Register(schema_84b56bd0975dfd33,
		0x83143f06598cf9e8,
		0x8317eae56a55f0ba,
		0x85252b1ec1c352d2,
		0x8d7ad02d9eab8fb7,
		0x8df1c729f8d2ca00,
		0x8e979661cc6a1161,
		0x8ededcb57f98aaf0,
		0x8fb41d4bd35c5a30,
		0x9090e4cdf26bda5a,
		0x946b1f715eac1308,
		0x9770d1aea1bdc9cb,
		0xa128fe760c2612c4,
		0xa2b1016cefab775b,
		0xa3bd4ddc3e0a5017,
		0xab9a904927908aff,
		0xae39f74773bfa089,
		0xb89d0df283dbb65c,
		0xb8f393fd6f7f0c44,
		0xbd77371c14feb668,
		0xc0689e5f33bf949d,
		0xcd6c734787642800,
		0xcfd704b9b2c62a4a,
		0xd3df8a6125925ab9,
		0xddf1212e9514d1f1,
		0xdeb9cfe7754f053f,
		0xe051a47070c97f9e,
		0xec1c828dae8bffa3,
		0xeed94cf76be61d8e,
		0xf5e8509c82a71e1c,
		0xf906e2ae0dd37fe4,
		0xf94646af9560150b,
		0xfb42d1f26b074c15,
		0xfe238774e8fa0fd9)
}
