syntax = "proto3";
package pactus;

option go_package = "github.com/pactus-project/pactus/www/grpc/pactus";
option java_package = "pactus";

// Wallet service provides RPC methods for wallet management operations.
service Wallet {
  // CreateWallet creates a new wallet with the specified parameters.
  rpc CreateWallet(CreateWalletRequest) returns (CreateWalletResponse);

  // RestoreWallet restores an existing wallet with the given mnemonic.
  rpc RestoreWallet(RestoreWalletRequest) returns (RestoreWalletResponse);

  // LoadWallet loads an existing wallet with the given name.
  rpc LoadWallet(LoadWalletRequest) returns (LoadWalletResponse);

  // UnloadWallet unloads a currently loaded wallet with the specified name.
  rpc UnloadWallet(UnloadWalletRequest) returns (UnloadWalletResponse);

  // GetTotalBalance returns the total available balance of the wallet.
  rpc GetTotalBalance(GetTotalBalanceRequest) returns (GetTotalBalanceResponse);

  // SignRawTransaction signs a raw transaction for a specified wallet.
  rpc SignRawTransaction(SignRawTransactionRequest) returns (SignRawTransactionResponse);

  // GetValidatorAddress retrieves the validator address associated with a public key.
  rpc GetValidatorAddress(GetValidatorAddressRequest) returns (GetValidatorAddressResponse);

  // GetNewAddress generates a new address for the specified wallet.
  rpc GetNewAddress(GetNewAddressRequest) returns (GetNewAddressResponse);

  // GetAddressHistory retrieves the transaction history of an address.
  rpc GetAddressHistory(GetAddressHistoryRequest) returns (GetAddressHistoryResponse);

  // SignMessage signs an arbitrary message using a wallet's private key.
  rpc SignMessage(SignMessageRequest) returns (SignMessageResponse);

  // GetTotalStake returns the total stake amount in the wallet.
  rpc GetTotalStake(GetTotalStakeRequest) returns (GetTotalStakeResponse);

  // GetAddressInfo returns detailed information about a specific address.
  rpc GetAddressInfo(GetAddressInfoRequest) returns (GetAddressInfoResponse);

  // SetAddressLabel sets or updates the label for a given address.
  rpc SetAddressLabel(SetAddressLabelRequest) returns (SetAddressLabelResponse);

  // ListWallet returns list of all available wallets.
  rpc ListWallet(ListWalletRequest) returns (ListWalletResponse);

  // GetWalletInfo returns detailed information about a specific wallet.
  rpc GetWalletInfo(GetWalletInfoRequest) returns (GetWalletInfoResponse);

  // ListAddress returns all addresses in the specified wallet.
  rpc ListAddress(ListAddressRequest) returns (ListAddressResponse);
}

// AddressType defines different types of blockchain addresses.
enum AddressType {
  // Treasury address type.
  // Should not be used to generate new addresses.
  ADDRESS_TYPE_TREASURY = 0;
  // Validator address type used for validator nodes.
  ADDRESS_TYPE_VALIDATOR = 1;
  // Account address type with BLS signature scheme.
  ADDRESS_TYPE_BLS_ACCOUNT = 2;
  // Account address type with Ed25519 signature scheme.
  // Note: Generating a new Ed25519 address requires the wallet password.
  ADDRESS_TYPE_ED25519_ACCOUNT = 3;
}

// AddressInfo contains detailed information about a wallet address.
message AddressInfo {
  // The address string.
  string address = 1;
  // The public key associated with the address.
  string public_key = 2;
  // A human-readable label associated with the address.
  string label = 3;
  // The Hierarchical Deterministic (HD) path of the address within the wallet.
  string path = 4;
}

// HistoryInfo contains transaction history details for an address.
message HistoryInfo {
  // The transaction ID in hexadecimal format.
  string transaction_id = 1;
  // Unix timestamp of when the transaction was confirmed.
  uint32 time = 2;
  // The type of transaction payload.
  string payload_type = 3;
  // Human-readable description of the transaction.
  string description = 4;
  // The transaction amount in NanoPAC.
  int64 amount = 5;
}

// Request message for retrieving address transaction history.
message GetAddressHistoryRequest {
  // The name of the wallet containing the address.
  string wallet_name = 1;
  // The address to retrieve history for.
  string address = 2;
}

// Response message contains address transaction history.
message GetAddressHistoryResponse {
  // List of all historical transactions associated with the address.
  repeated HistoryInfo history_info = 1;
}

// Request message for generating a new wallet address.
message GetNewAddressRequest {
  // The name of the wallet to generate a new address.
  string wallet_name = 1;
  // The type of address to generate.
  AddressType address_type = 2;
  // A label for the new address.
  string label = 3;
  // Password for the new address. It's required when address_type is Ed25519 type.
  string password = 4;
}

// Response message contains newly generated address information.
message GetNewAddressResponse {
  // The name of the wallet where address was generated.
  string wallet_name = 1;
  // Detailed information about the new address.
  AddressInfo address_info = 2;
}

// Request message for restoring a wallet from mnemonic (seed phrase).
message RestoreWalletRequest {
  // The name for the restored wallet.
  string wallet_name = 1;
  // The mnemonic (seed phrase) for wallet recovery.
  string mnemonic = 2;
  // Password to secure the restored wallet.
  string password = 3;
}

// Response message confirming wallet restoration.
message RestoreWalletResponse {
  // The name of the restored wallet.
  string wallet_name = 1;
}

// Request message for creating a new wallet.
message CreateWalletRequest {
  // The name for the new wallet.
  string wallet_name = 1;
  // Password to secure the new wallet.
  string password = 4;
}

// Response message contains wallet recovery mnemonic (seed phrase).
message CreateWalletResponse {
  // The mnemonic (seed phrase) for wallet recovery.
  string mnemonic = 2;
}

// Request message for loading an existing wallet.
message LoadWalletRequest {
  // The name of the wallet to load.
  string wallet_name = 1;
}

// Response message confirming wallet loaded.
message LoadWalletResponse {
  // The name of the loaded wallet.
  string wallet_name = 1;
}

// Request message for unloading a wallet.
message UnloadWalletRequest {
  // The name of the wallet to unload.
  string wallet_name = 1;
}

// Response message confirming wallet unloading.
message UnloadWalletResponse {
  // The name of the unloaded wallet.
  string wallet_name = 1;
}

// Request message for obtaining the validator address associated with a public key.
message GetValidatorAddressRequest {
  // The public key of the validator.
  string public_key = 1;
}

// Response message containing the validator address corresponding to a public key.
message GetValidatorAddressResponse {
  // The validator address associated with the public key.
  string address = 1;
}

// Request message for signing a raw transaction.
message SignRawTransactionRequest {
  // The name of the wallet used for signing.
  string wallet_name = 1;
  // The raw transaction data to be signed.
  string raw_transaction = 2;
  // Wallet password required for signing.
  string password = 3;
}

// Response message contains the transaction ID and signed raw transaction.
message SignRawTransactionResponse {
  // The ID of the signed transaction.
  string transaction_id = 1;
  // The signed raw transaction data.
  string signed_raw_transaction = 2;
}

// Request message for obtaining the total available balance of a wallet.
message GetTotalBalanceRequest {
  // The name of the wallet to get the total balance.
  string wallet_name = 1;
}

// Response message contains the total available balance of the wallet.
message GetTotalBalanceResponse {
  // The name of the queried wallet.
  string wallet_name = 1;
  // The total balance of the wallet in NanoPAC.
  int64 total_balance = 2;
}

// Request message to sign an arbitrary message.
message SignMessageRequest {
  // The name of the wallet to sign with.
  string wallet_name = 1;
  // Wallet password required for signing.
  string password = 2;
  // The address whose private key should be used for signing the message.
  string address = 3;
  // The arbitrary message to be signed.
  string message = 4;
}

// Response message contains message signature.
message SignMessageResponse {
  // The signature in hexadecimal format.
  string signature = 1;
}

// Request message for obtaining the total stake of a wallet.
message GetTotalStakeRequest {
  // The name of the wallet to get the total stake.
  string wallet_name = 1;
}

// Response message contains the total stake of the wallet.
message GetTotalStakeResponse {
  // The name of the queried wallet.
  string wallet_name = 1;
  // The total stake amount in NanoPAC.
  int64 total_stake = 2;
}

// Request message for getting address information.
message GetAddressInfoRequest {
  // The name of the wallet containing the address.
  string wallet_name = 1;
  // The address to query.
  string address = 2;
}

// Response message contains address details.
message GetAddressInfoResponse {
  // The name of the wallet containing the address.
  string wallet_name = 1;
  // The queried address.
  string address = 2;
  // The address label.
  string label = 3;
  // The public key of the address.
  string public_key = 4;
  // The Hierarchical Deterministic (HD) path of the address.
  string path = 5;
}

// Request message for setting address label.
message SetAddressLabelRequest {
  // The name of the wallet containing the address.
  string wallet_name = 1;
  // Wallet password required for modification.
  string password = 3;
  // The address to label.
  string address = 4;
  // The new label for the address.
  string label = 5;
}

// Response message for address label update.
message SetAddressLabelResponse {}

// Request message for listing all wallets.
message ListWalletRequest {}

// Response message contains wallet names.
message ListWalletResponse {
  // Array of wallet names.
  repeated string wallets = 1;
}

// Request message for getting wallet information.
message GetWalletInfoRequest {
  // The name of the wallet to query.
  string wallet_name = 1;
}

// Response message contains wallet details.
message GetWalletInfoResponse {
  // The name of the wallet to query.
  string wallet_name = 1;
  // The wallet format version.
  int64 version = 2;
  // The network the wallet is connected to (e.g., mainnet, testnet).
  string network = 3;
  // Indicates if the wallet is encrypted.
  bool encrypted = 4;
  // A unique identifier of the wallet.
  string uuid = 5;
  // Unix timestamp of wallet creation.
  int64 created_at = 6;
}

// Request message for listing wallet addresses.
message ListAddressRequest {
  // The name of the queried wallet.
  string wallet_name = 1;
}

// Response message contains wallet addresses.
message ListAddressResponse {
  // The name of the queried wallet.
  string wallet_name = 1;
  // ist of all addresses in the wallet with their details.
  repeated AddressInfo data = 2;
}
