syntax = "proto3";

// Define the package and Go package path for the generated code.
package pactus;

option go_package = "github.com/pactus-project/pactus/www/grpc/pactus";
option java_package = "pactus.wallet";

import "transaction.proto";

// Define the Wallet service with various RPC methods for wallet management.
service Wallet {
  // CreateWallet creates a new wallet with the specified parameters.
  rpc CreateWallet(CreateWalletRequest) returns (CreateWalletResponse);

  // RestoreWallet restores an existing wallet with the given mnemonic.
  rpc RestoreWallet(RestoreWalletRequest) returns (RestoreWalletResponse);

  // LoadWallet loads an existing wallet with the given name.
  rpc LoadWallet(LoadWalletRequest) returns (LoadWalletResponse);

  // UnloadWallet unloads a currently loaded wallet with the specified name.
  rpc UnloadWallet(UnloadWalletRequest) returns (UnloadWalletResponse);

  // GetTotalBalance returns the total available balance of the wallet.
  rpc GetTotalBalance(GetTotalBalanceRequest) returns (GetTotalBalanceResponse);

  // SignRawTransaction signs a raw transaction for a specified wallet.
  rpc SignRawTransaction(SignRawTransactionRequest)
      returns (SignRawTransactionResponse);

  // GetValidatorAddress retrieves the validator address associated with a
  // public key.
  rpc GetValidatorAddress(GetValidatorAddressRequest)
      returns (GetValidatorAddressResponse);

  // GetNewAddress generates a new address for the specified wallet.
  rpc GetNewAddress(GetNewAddressRequest) returns (GetNewAddressResponse);

  // GetAddressHistory retrieves the transaction history of an address.
  rpc GetAddressHistory(GetAddressHistoryRequest)
      returns (GetAddressHistoryResponse);

  // SignMessage signs an arbitrary message.
  rpc SignMessage(SignMessageRequest)
      returns (SignMessageResponse);
  }

// Enum for the address type.
enum AddressType {
  ADDRESS_TYPE_TREASURY = 0;
  ADDRESS_TYPE_VALIDATOR = 1;
  ADDRESS_TYPE_BLS_ACCOUNT = 2;
}

// Message containing address information.
message AddressInfo {
  // The address string.
  string address = 1;
  // The public key associated with the address.
  string public_key = 2;
  // A label associated with the address.
  string label = 3;
  // The Hierarchical Deterministic path of the address within the wallet.
  string path = 4;
}

// Message containing transaction history information for an address.
message HistoryInfo {
  // The transaction ID hash.
  string transaction_id = 1;
  // The timestamp of the transaction.
  uint32 time = 2;
  // The payload type of the transaction.
  string payload_type = 3;
  // A description of the transaction.
  string description = 4;
  // The amount involved in the transaction.
  int64 amount = 5;
}

// Request message to get an address transaction history.
message GetAddressHistoryRequest {
  // The name of the wallet.
  string wallet_name = 1;
  // The address to retrieve the transaction history for.
  string address = 2;
}

// Response message containing the address transaction history.
message GetAddressHistoryResponse {
  // Array of history information for the address.
  repeated HistoryInfo history_info = 1;
}

// Request message for generating a new address.
message GetNewAddressRequest {
  // The name of the wallet to generate a new address.
  string wallet_name = 1;
  // The type of address to generate.
  AddressType address_type = 2;
  // A label for the new address.
  string label = 3;
}

// Response message containing the newly generated address.
message GetNewAddressResponse {
  // The name of the wallet from which the address is generated.
  string wallet_name = 1;
  // Information about the newly generated address.
  AddressInfo address_info = 2;
}

// Request message for restoring an existing wallet.
message RestoreWalletRequest {
  // The name of the wallet to restore.
  string wallet_name = 1;
  // The mnemonic for wallet recovery.
  string mnemonic = 2;
  // The password for securing the wallet.
  string password = 3;
}

// Response message containing the name of the restored wallet.
message RestoreWalletResponse {
  // The name of the restored wallet.
  string wallet_name = 1;
}

// Request message for creating a new wallet.
message CreateWalletRequest {
  // The name of the new wallet.
  string wallet_name = 1;
  // The password for securing the wallet.
  string password = 4;
}

// Response message containing the mnemonic for wallet recovery.
message CreateWalletResponse {
  // The mnemonic for wallet recovery.
  string mnemonic = 2;
}

// Request message for loading an existing wallet.
message LoadWalletRequest {
  // The name of the wallet to load.
  string wallet_name = 1;
}

// Response message containing the name of the loaded wallet.
message LoadWalletResponse {
  // The name of the loaded wallet.
  string wallet_name = 1;
}

// Request message for unloading a currently loaded wallet.
message UnloadWalletRequest {
  // The name of the wallet to unload.
  string wallet_name = 1;
}

// Response message containing the name of the unloaded wallet.
message UnloadWalletResponse {
  // The name of the unloaded wallet.
  string wallet_name = 1;
}

// Request message for obtaining the validator address associated with a public
// key.
message GetValidatorAddressRequest {
  // The public key for which the validator address is requested.
  string public_key = 1;
}

// Response message containing the validator address corresponding to a public
// key.
message GetValidatorAddressResponse {
  // The validator address associated with the public key.
  string address = 1;
}

// Request message for signing a raw transaction.
message SignRawTransactionRequest {
  // The name of the wallet used for signing.
  string wallet_name = 1;
  // The raw transaction data to be signed.
  string raw_transaction = 2;
  // The password for unlocking the wallet for signing.
  string password = 3;
}

// Response message containing the transaction ID and signed raw transaction.
message SignRawTransactionResponse {
  // The ID of the signed transaction.
  string transaction_id = 1;
  // The signed raw transaction data.
  string signed_raw_transaction = 2;
}

// Request message for obtaining the available balance of a wallet.
message GetTotalBalanceRequest {
  // The name of the wallet to get the total balance.
  string wallet_name = 1;
}

// Response message containing the available balance of the wallet.
message GetTotalBalanceResponse {
  // The name of the wallet.
  string wallet_name = 1;
  // The total balance of the wallet in NanoPAC.
  int64 total_balance = 2;
}

// Request message to sign an arbitrary message.
message SignMessageRequest {
  // The name of the wallet.
  string wallet_name = 1;
  // The password for unlocking the wallet for signing.
  string password = 2;
  // The account address associated with the private key.
  string address = 3;
  // The arbitrary message to be signed.
  string message = 4;
}

// Response message containing the available balance of the wallet.
message SignMessageResponse {
  // Signature of the message.
  string signature = 1;
}
