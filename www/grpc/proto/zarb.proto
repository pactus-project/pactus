syntax = 'proto3';

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "payloads.proto";

option go_package = "github.com/zarbchain/zarb-go/www/grpc/zarb";

package zarb;

service Zarb {
  rpc GetBlock(BlockRequest) returns (BlockResponse) {
    option (google.api.http).get = "/api/block/hash/{hash}";
  }
  rpc GetBlockHash(BlockHashRequest) returns (BlockHashResponse) {
    option (google.api.http).get = "/api/block_hash/{height}";
  }
  rpc GetTransaction(TransactionRequest) returns (TransactionResponse) {
    option (google.api.http).get = "/api/tranaction/id/{id}";
  }
  rpc GetAccount(AccountRequest) returns (AccountResponse) {
    option (google.api.http).get = "/api/account/address/{address}";
  }
  rpc GetValidators(ValidatorsRequest) returns (ValidatorsResponse) {
    option (google.api.http).get = "/api/validators";
  }
  rpc GetValidator(ValidatorRequest) returns (ValidatorResponse) {
    option (google.api.http).get = "/api/validator/address/{address}";
  }
  rpc GetValidatorByNumber(ValidatorByNumberRequest)
      returns (ValidatorResponse) {
    option (google.api.http).get = "/api/validator/{number}";
  }
  rpc GetBlockchainInfo(BlockchainInfoRequest)
      returns (BlockchainInfoResponse) {
    option (google.api.http).get = "/api/blockchain";
  }
  rpc GetNetworkInfo(NetworkInfoRequest) returns (NetworkInfoResponse) {
    option (google.api.http).get = "/api/network";
  }
  rpc SendRawTransaction(SendRawTransactionRequest)
      returns (SendRawTransactionResponse) {
    option (google.api.http).put = "/api/send_raw_transaction/{data}";
  };
}

message AccountRequest { string address = 1; }

message AccountResponse { AccountInfo account = 1; }

message ValidatorsRequest {}

message ValidatorRequest { string address = 1; }
message ValidatorByNumberRequest { int32 number = 1; }

message ValidatorsResponse { repeated ValidatorInfo validators = 1; }

message ValidatorResponse { ValidatorInfo validator = 1; }

message BlockRequest {
  bytes hash = 1;
  BlockVerbosity verbosity = 2;
}

message BlockResponse {
  uint32 height = 1;
  bytes hash = 2;
  google.protobuf.Timestamp block_time = 3;
  BlockHeaderInfo header = 4;
  CertificateInfo prev_cert = 5;
  repeated TransactionInfo txs = 6;
}

message BlockHashRequest { uint32 height = 1; }

message BlockHashResponse { bytes hash = 1; }

message BlockchainInfoRequest {}

message BlockchainInfoResponse {
  uint32 last_block_height = 1;
  bytes last_block_hash = 2;
}

message NetworkInfoRequest {}

message NetworkInfoResponse {
  bytes self_id = 1;
  repeated PeerInfo peers = 2;
}

message TransactionRequest { string id = 1; }

message TransactionResponse { TransactionInfo tranaction = 1; }

message SendRawTransactionRequest { string data = 1; }

message SendRawTransactionResponse { string id = 2; }

message ValidatorInfo {
  bytes public_key = 1;
  int32 number = 2;
  int32 sequence = 3;
  int64 stake = 4;
  uint32 last_bonding_height = 5;
  uint32 last_joined_height = 6;
  uint32 unbonding_height = 7;
  string address = 8;
}

message PeerInfo {
  string moniker = 1;
  string agent = 2;
  bytes peer_id = 3;
  bytes public_key = 4;
  int32 flags = 5;
  uint32 height = 6;
  int32 received_messages = 7;
  int32 invalid_messages = 8;
  int32 received_bytes = 9;
}

message AccountInfo {
  string address = 1;
  int32 number = 2;
  int32 sequence = 3;
  int64 Balance = 4;
}

message BlockHeaderInfo {
  int32 version = 1;
  bytes prev_block_hash = 2;
  bytes state_root = 3;
  bytes sortition_seed = 4;
  string proposer_address = 5;
}

message CertificateInfo {
  int32 round = 1;
  repeated int32 committers = 2;
  repeated int32 absentees = 3;
  bytes signature = 4;
}

message TransactionInfo {
  bytes id = 1;
  int32 version = 2;
  bytes stamp = 3;
  int32 sequence = 4;
  int64 fee = 5;
  PayloadType Type = 6;
  oneof Payload {
    payloads.SEND_PAYLOAD send = 30;
    payloads.BOND_PAYLOAD bond = 31;
    payloads.SORTITION_PAYLOAD sortition = 32;
  };
  string memo = 7;
  bytes public_key = 8;
  bytes signature = 9;
}

enum PayloadType {
  UNKNOWN = 0;
  SEND_PAYLOAD = 1;
  BOND_PAYLOAD = 2;
  SORTITION_PAYLOAD = 3;
  UNBOND_PAYLOAD = 4;
}

enum BlockVerbosity {
  BLOCK_HASH = 0;
  BLOCK_INFO = 1;
  BLOCK_TRANSACTIONS = 2;
}
