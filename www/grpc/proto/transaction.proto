syntax = "proto3";
package pactus;
option go_package = "github.com/pactus-project/pactus/www/grpc/pactus";
option java_package = "pactus.transaction";

// Transaction service defines various RPC methods for interacting with
// transactions.
service Transaction {
  // GetTransaction retrieves transaction details based on the provided request
  // parameters.
  rpc GetTransaction(GetTransactionRequest) returns (GetTransactionResponse);

  // CalculateFee calculates the transaction fee based on the specified amount
  // and payload type.
  rpc CalculateFee(CalculateFeeRequest) returns (CalculateFeeResponse);

  // BroadcastTransaction broadcasts a signed transaction to the network.
  rpc BroadcastTransaction(BroadcastTransactionRequest)
      returns (BroadcastTransactionResponse);

  // GetRawTransferTransaction retrieves raw details of a transfer transaction.
  rpc GetRawTransferTransaction(GetRawTransferTransactionRequest)
      returns (GetRawTransactionResponse);

  // GetRawBondTransaction retrieves raw details of a bond transaction.
  rpc GetRawBondTransaction(GetRawBondTransactionRequest)
      returns (GetRawTransactionResponse);

  // GetRawUnbondTransaction retrieves raw details of an unbond transaction.
  rpc GetRawUnbondTransaction(GetRawUnbondTransactionRequest)
      returns (GetRawTransactionResponse);

  // GetRawWithdrawTransaction retrieves raw details of a withdraw transaction.
  rpc GetRawWithdrawTransaction(GetRawWithdrawTransactionRequest)
      returns (GetRawTransactionResponse);
}

// Request message for retrieving transaction details.
message GetTransactionRequest {
  // Transaction ID.
  bytes id = 1;
  // Verbosity level for transaction details.
  TransactionVerbosity verbosity = 2;
}

// Response message containing details of a transaction.
message GetTransactionResponse {
  // Height of the block containing the transaction.
  uint32 block_height = 1;
  // Time of the block containing the transaction.
  uint32 block_time = 2;
  // Information about the transaction.
  TransactionInfo transaction = 3;
}

// Request message for calculating transaction fee.
message CalculateFeeRequest {
  // Transaction amount in NanoPAC.
  int64 amount = 1;
  // Type of transaction payload.
  PayloadType payload_type = 2;
  // Indicates that amount should be fixed and includes the fee.
  bool fixed_amount = 3;
}

// Response message containing the calculated transaction fee.
message CalculateFeeResponse {
  // Calculated amount in NanoPAC.
  int64 amount = 1;
  // Calculated transaction fee in NanoPAC.
  int64 fee = 2;
}

// Request message for broadcasting a signed transaction.
message BroadcastTransactionRequest {
  // Signed raw transaction data.
  bytes signed_raw_transaction = 1;
}

// Response message containing the ID of the broadcasted transaction.
message BroadcastTransactionResponse {
  // Transaction ID.
  bytes id = 1;
}

// Request message for retrieving raw details of a transfer transaction.
message GetRawTransferTransactionRequest {
  // Lock time for the transaction.
  // If not explicitly set, it sets to the last block height.
  uint32 lock_time = 1;
  // Sender's account address.
  string sender = 2;
  // Receiver's account address.
  string receiver = 3;
  // Transfer amount in NanoPAC.
  // It should be greater than 0.
  int64 amount = 4;
  // Transaction fee in NanoPAC.
  // If not explicitly set, it is calculated based on the amount.
  int64 fee = 5;
  // Transaction memo.
  string memo = 6;
}

// Request message for retrieving raw details of a bond transaction.
message GetRawBondTransactionRequest {
  // Lock time for the transaction.
  // If not explicitly set, it sets to the last block height.
  uint32 lock_time = 1;
  // Sender's account address.
  string sender = 2;
  // Receiver's validator address.
  string receiver = 3;
  // Stake amount in NanoPAC.
  // It should be greater than 0.
  int64 stake = 4;
  // Public key of the validator.
  string public_key = 5;
  // Transaction fee in NanoPAC.
  // If not explicitly set, it is calculated based on the stake.
  int64 fee = 6;
  // Transaction memo.
  string memo = 7;
}

// Request message for retrieving raw details of an unbond transaction.
message GetRawUnbondTransactionRequest {
  // Lock time for the transaction.
  // If not explicitly set, it sets to the last block height.
  uint32 lock_time = 1;
  // Address of the validator to unbond from.
  string validator_address = 3;
  // Transaction memo.
  string memo = 4;
}

// Request message for retrieving raw details of a withdraw transaction.
message GetRawWithdrawTransactionRequest {
  // Lock time for the transaction.
  // If not explicitly set, it sets to the last block height.
  uint32 lock_time = 1;
  // Address of the validator to withdraw from.
  string validator_address = 2;
  // Address of the account to withdraw to.
  string account_address = 3;
  // Withdrawal amount in NanoPAC.
  // It should be greater than 0.
  int64 amount = 4;
  // Transaction fee in NanoPAC.
  // If not explicitly set, it is calculated based on the amount.
  int64 fee = 5;
  // Transaction memo.
  string memo = 6;
}

// Response message containing raw transaction data.
message GetRawTransactionResponse {
  // Raw transaction data.
  bytes raw_transaction = 1;
}

// Payload for a transfer transaction.
message PayloadTransfer {
  // Sender's address.
  string sender = 1;
  // Receiver's address.
  string receiver = 2;
  // Transaction amount in NanoPAC.
  int64 amount = 3;
}

// Payload for a bond transaction.
message PayloadBond {
  // Sender's address.
  string sender = 1;
  // Receiver's address.
  string receiver = 2;
  // Stake amount in NanoPAC.
  int64 stake = 3;
}

// Payload for a sortition transaction.
message PayloadSortition {
  // Address associated with the sortition.
  string address = 1;
  // Proof for the sortition.
  bytes proof = 2;
}

// Payload for an unbond transaction.
message PayloadUnbond {
  // Address of the validator to unbond from.
  string validator = 1;
}

// Payload for a withdraw transaction.
message PayloadWithdraw {
  // Address to withdraw from.
  string from = 1;
  // Address to withdraw to.
  string to = 2;
  // Withdrawal amount in NanoPAC.
  int64 amount = 3;
}

// Information about a transaction.
message TransactionInfo {
  // Transaction ID.
  bytes id = 1;
  // Transaction data.
  bytes data = 2;
  // Transaction version.
  int32 version = 3;
  // Lock time for the transaction.
  uint32 lock_time = 4;
  // Transaction value in NanoPAC.
  int64 value = 5;
  // Transaction fee in NanoPAC.
  int64 fee = 6;
  // Type of transaction payload.
  PayloadType payload_type = 7;
  oneof payload {
    // Transfer payload.
    PayloadTransfer transfer = 30;
    // Bond payload.
    PayloadBond bond = 31;
    // Sortition payload.
    PayloadSortition sortition = 32;
    // Unbond payload.
    PayloadUnbond unbond = 33;
    // Withdraw payload.
    PayloadWithdraw withdraw = 34;
  };
  // Transaction memo.
  string memo = 8;
  // Public key associated with the transaction.
  string public_key = 9;
  // Transaction signature.
  bytes signature = 10;
}

// Enumeration for different types of transaction payloads.
enum PayloadType {
  // Unknown payload type.
  UNKNOWN = 0;
  // Transfer payload type.
  TRANSFER_PAYLOAD = 1;
  // Bond payload type.
  BOND_PAYLOAD = 2;
  // Sortition payload type.
  SORTITION_PAYLOAD = 3;
  // Unbond payload type.
  UNBOND_PAYLOAD = 4;
  // Withdraw payload type.
  WITHDRAW_PAYLOAD = 5;
}

// Enumeration for verbosity level when requesting transaction details.
enum TransactionVerbosity {
  // Request transaction data only.
  TRANSACTION_DATA = 0;
  // Request transaction details.
  TRANSACTION_INFO = 1;
}
