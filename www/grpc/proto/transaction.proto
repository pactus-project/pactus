syntax = "proto3";
package pactus;

option go_package = "github.com/pactus-project/pactus/www/grpc/pactus";
option java_package = "pactus.transaction";

// Transaction service defines various RPC methods for interacting with
// transactions.
service Transaction {
  // GetTransaction retrieves transaction details based on the provided request
  // parameters.
  rpc GetTransaction(GetTransactionRequest) returns (GetTransactionResponse);

  // CalculateFee calculates the transaction fee based on the specified amount
  // and payload type.
  rpc CalculateFee(CalculateFeeRequest) returns (CalculateFeeResponse);

  // BroadcastTransaction broadcasts a signed transaction to the network.
  rpc BroadcastTransaction(BroadcastTransactionRequest)
      returns (BroadcastTransactionResponse);

  // GetRawTransferTransaction retrieves raw details of a transfer transaction.
  rpc GetRawTransferTransaction(GetRawTransferTransactionRequest)
      returns (GetRawTransactionResponse);

  // GetRawBondTransaction retrieves raw details of a bond transaction.
  rpc GetRawBondTransaction(GetRawBondTransactionRequest)
      returns (GetRawTransactionResponse);

  // GetRawUnbondTransaction retrieves raw details of an unbond transaction.
  rpc GetRawUnbondTransaction(GetRawUnbondTransactionRequest)
      returns (GetRawTransactionResponse);

  // GetRawWithdrawTransaction retrieves raw details of a withdraw transaction.
  rpc GetRawWithdrawTransaction(GetRawWithdrawTransactionRequest)
      returns (GetRawTransactionResponse);
}

// Request message for retrieving transaction details.
message GetTransactionRequest {
  // The unique ID of the transaction to retrieve.
  string id = 1;
  // The verbosity level for transaction details.
  TransactionVerbosity verbosity = 2;
}

// Response message containing details of a transaction.
message GetTransactionResponse {
  // The height of the block containing the transaction.
  uint32 block_height = 1;
  // The UNIX timestamp of the block containing the transaction.
  uint32 block_time = 2;
  // Detailed information about the transaction.
  TransactionInfo transaction = 3;
}

// Request message for calculating transaction fee.
message CalculateFeeRequest {
  // The amount involved in the transaction, specified in NanoPAC.
  int64 amount = 1;
  // The type of transaction payload.
  PayloadType payload_type = 2;
  // Indicates if the amount should be fixed and include the fee.
  bool fixed_amount = 3;
}

// Response message containing the calculated transaction fee.
message CalculateFeeResponse {
  // The calculated amount in NanoPAC.
  int64 amount = 1;
  // The calculated transaction fee in NanoPAC.
  int64 fee = 2;
}

// Request message for broadcasting a signed transaction.
message BroadcastTransactionRequest {
  // The signed raw transaction data to be broadcasted.
  string signed_raw_transaction = 1;
}

// Response message containing the ID of the broadcasted transaction.
message BroadcastTransactionResponse {
  // The unique ID of the broadcasted transaction.
  string id = 1;
}

// Request message for retrieving raw details of a transfer transaction.
message GetRawTransferTransactionRequest {
  // The lock time for the transaction. If not set, defaults to the last block
  // height.
  uint32 lock_time = 1;
  // The sender's account address.
  string sender = 2;
  // The receiver's account address.
  string receiver = 3;
  // The amount to be transferred, specified in NanoPAC. Must be greater than 0.
  int64 amount = 4;
  // The transaction fee in NanoPAC. If not set, it is set to the estimated fee.
  int64 fee = 5;
  // A memo string for the transaction.
  string memo = 6;
}

// Request message for retrieving raw details of a bond transaction.
message GetRawBondTransactionRequest {
  // The lock time for the transaction. If not set, defaults to the last block
  // height.
  uint32 lock_time = 1;
  // The sender's account address.
  string sender = 2;
  // The receiver's validator address.
  string receiver = 3;
  // The stake amount in NanoPAC. Must be greater than 0.
  int64 stake = 4;
  // The public key of the validator.
  string public_key = 5;
  // The transaction fee in NanoPAC. If not set, it is set to the estimated fee.
  int64 fee = 6;
  // A memo string for the transaction.
  string memo = 7;
}

// Request message for retrieving raw details of an unbond transaction.
message GetRawUnbondTransactionRequest {
  // The lock time for the transaction. If not set, defaults to the last block
  // height.
  uint32 lock_time = 1;
  // The address of the validator to unbond from.
  string validator_address = 3;
  // A memo string for the transaction.
  string memo = 4;
}

// Request message for retrieving raw details of a withdraw transaction.
message GetRawWithdrawTransactionRequest {
  // The lock time for the transaction. If not set, defaults to the last block
  // height.
  uint32 lock_time = 1;
  // The address of the validator to withdraw from.
  string validator_address = 2;
  // The address of the account to withdraw to.
  string account_address = 3;
  // The withdrawal amount in NanoPAC. Must be greater than 0.
  int64 amount = 4;
  // The transaction fee in NanoPAC. If not set, it is set to the estimated fee.
  int64 fee = 5;
  // A memo string for the transaction.
  string memo = 6;
}

// Response message containing raw transaction data.
message GetRawTransactionResponse {
  // The raw transaction data.
  string raw_transaction = 1;
}

// Payload for a transfer transaction.
message PayloadTransfer {
  // The sender's address.
  string sender = 1;
  // The receiver's address.
  string receiver = 2;
  // The amount to be transferred in NanoPAC.
  int64 amount = 3;
}

// Payload for a bond transaction.
message PayloadBond {
  // The sender's address.
  string sender = 1;
  // The receiver's address.
  string receiver = 2;
  // The stake amount in NanoPAC.
  int64 stake = 3;
}

// Payload for a sortition transaction.
message PayloadSortition {
  // The validator address associated with the sortition proof.
  string address = 1;
  // The proof for the sortition.
  string proof = 2;
}

// Payload for an unbond transaction.
message PayloadUnbond {
  // The address of the validator to unbond from.
  string validator = 1;
}

// Payload for a withdraw transaction.
message PayloadWithdraw {
  // The address to withdraw from.
  string from = 1;
  // The address to withdraw to.
  string to = 2;
  // The withdrawal amount in NanoPAC.
  int64 amount = 3;
}

// Information about a transaction.
message TransactionInfo {
  // The unique ID of the transaction.
  string id = 1;
  // The raw transaction data.
  string data = 2;
  // The version of the transaction.
  int32 version = 3;
  // The lock time for the transaction.
  uint32 lock_time = 4;
  // The value of the transaction in NanoPAC.
  int64 value = 5;
  // The fee for the transaction in NanoPAC.
  int64 fee = 6;
  // The type of transaction payload.
  PayloadType payload_type = 7;
  oneof payload {
    // Transfer transaction payload.
    PayloadTransfer transfer = 30;
    // Bond transaction payload.
    PayloadBond bond = 31;
    // Sortition transaction payload.
    PayloadSortition sortition = 32;
    // Unbond transaction payload.
    PayloadUnbond unbond = 33;
    // Withdraw transaction payload.
    PayloadWithdraw withdraw = 34;
  };
  // A memo string for the transaction.
  string memo = 8;
  // The public key associated with the transaction.
  string public_key = 9;
  // The signature for the transaction.
  string signature = 10;
}

// Enumeration for different types of transaction payloads.
enum PayloadType {
  // Unknown payload type.
  UNKNOWN = 0;
  // Transfer payload type.
  TRANSFER_PAYLOAD = 1;
  // Bond payload type.
  BOND_PAYLOAD = 2;
  // Sortition payload type.
  SORTITION_PAYLOAD = 3;
  // Unbond payload type.
  UNBOND_PAYLOAD = 4;
  // Withdraw payload type.
  WITHDRAW_PAYLOAD = 5;
}

// Enumeration for verbosity levels when requesting transaction details.
enum TransactionVerbosity {
  // Request transaction data only.
  TRANSACTION_DATA = 0;
  // Request detailed transaction information.
  TRANSACTION_INFO = 1;
}
