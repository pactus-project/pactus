syntax = "proto3";
package pactus;

option go_package = "github.com/pactus-project/pactus/www/grpc/pactus";
option java_package = "pactus";

// Network service provides RPCs for retrieving information about the network.
service Network {
  // GetNetworkInfo retrieves information about the overall network.
  rpc GetNetworkInfo(GetNetworkInfoRequest) returns (GetNetworkInfoResponse);

  // GetNodeInfo retrieves information about a specific node in the network.
  rpc GetNodeInfo(GetNodeInfoRequest) returns (GetNodeInfoResponse);
}

// Request message for retrieving overall network information.
message GetNetworkInfoRequest {
  // If true, returns only peers that are currently connected.
  bool only_connected = 1;
}

// Response message contains information about the overall network.
message GetNetworkInfoResponse {
  // Name of the network.
  string network_name = 1;
  // Number of connected peers.
  uint32 connected_peers_count = 2;
  // List of connected peers.
  repeated PeerInfo connected_peers = 3;
  // Metrics related to node activity.
  MetricInfo metric_info = 4;
}

// Request message for retrieving information of the node.
message GetNodeInfoRequest {}

// Response message contains information about a specific node in the network.
message GetNodeInfoResponse {
  // Moniker or Human-readable name identifying this node in the network.
  string moniker = 1;
  // Version and agent details of the node.
  string agent = 2;
  // Peer ID of the node.
  string peer_id = 3;
  // Time the node was started (in epoch format).
  uint64 started_at = 4;
  // Reachability status of the node.
  string reachability = 5;
  // Bitfield representing the services provided by the node.
  int32 services = 6;
  // Names of services provided by the node.
  string services_names = 7;
  // List of addresses associated with the node.
  repeated string local_addrs = 8;
  // List of protocols supported by the node.
  repeated string protocols = 9;
  // Offset between the node's clock and the network's clock (in seconds).
  double clock_offset = 13;
  // Information about the node's connections.
  ConnectionInfo connection_info = 14;
  // List of active ZeroMQ publishers.
  repeated ZMQPublisherInfo zmq_publishers = 15;
}

// ZMQPublisherInfo contains information about a ZeroMQ publisher.
message ZMQPublisherInfo {
  // The topic associated with the publisher.
  string topic = 1;
  // The address of the publisher.
  string address = 2;
  // The high-water mark (HWM) for the publisher, indicating the
  // maximum number of messages to queue before dropping older ones.
  int32 hwm = 3;
}

// PeerInfo contains information about a peer in the network.
message PeerInfo {
  // Current status of the peer (e.g., connected, disconnected).
  int32 status = 1;
  // Moniker or Human-Readable name of the peer.
  string moniker = 2;
  // Version and agent details of the peer.
  string agent = 3;
  // Peer ID of the peer in P2P network.
  string peer_id = 4;
  // List of consensus keys used by the peer.
  repeated string consensus_keys = 5;
  // List of consensus addresses used by the peer.
  repeated string consensus_addresses = 6;
  // Bitfield representing the services provided by the peer.
  uint32 services = 7;
  // Hash of the last block the peer knows.
  string last_block_hash = 8;
  // Blockchain height of the peer.
  uint32 height = 9;
  // Time the last bundle sent to the peer (in epoch format).
  int64 last_sent = 10;
  // Time the last bundle received from the peer (in epoch format).
  int64 last_received = 11;
  // Network address of the peer.
  string address = 12;
  // Connection direction (e.g., inbound, outbound).
  string direction = 13;
  // List of protocols supported by the peer.
  repeated string protocols = 14;
  // Total download sessions with the peer.
  int32 total_sessions = 15;
  // Completed download sessions with the peer.
  int32 completed_sessions = 16;
  // Metrics related to peer activity.
  MetricInfo metric_info = 17;
}

// ConnectionInfo contains information about the node's connections.
message ConnectionInfo {
  // Total number of connections.
  uint64 connections = 1;
  // Number of inbound connections.
  uint64 inbound_connections = 2;
  // Number of outbound connections.
  uint64 outbound_connections = 3;
}

// MetricInfo contains metrics data regarding network activity.
message MetricInfo {
  // Total number of invalid bundles.
  CounterInfo total_invalid = 1;
  // Total number of bundles sent.
  CounterInfo total_sent = 2;
  // Total number of bundles received.
  CounterInfo total_received = 3;
  // Number of sent bundles categorized by message type.
  map<int32, CounterInfo> message_sent = 4;
  // Number of received bundles categorized by message type.
  map<int32, CounterInfo> message_received = 5;
}

// CounterInfo holds counter data regarding byte and bundle counts.
message CounterInfo {
  // Total number of bytes.
  uint64 bytes = 1;
  // Total number of bundles.
  uint64 bundles = 2;
}
