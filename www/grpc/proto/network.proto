syntax = "proto3";
package pactus;

option go_package = "github.com/pactus-project/pactus/www/grpc/pactus";
option java_package = "pactus.network";

// Network service provides RPCs for retrieving information about the network.
service Network {
  // GetNetworkInfo retrieves information about the overall network.
  rpc GetNetworkInfo(GetNetworkInfoRequest) returns (GetNetworkInfoResponse);

  // GetNodeInfo retrieves information about a specific node in the network.
  rpc GetNodeInfo(GetNodeInfoRequest) returns (GetNodeInfoResponse);
}

// Request message for retrieving overall network information.
message GetNetworkInfoRequest {
  // If true, only returns peers with connected status.
  bool only_connected = 1;
}

// Response message containing information about the overall network.
message GetNetworkInfoResponse {
  // Name of the network.
  string network_name = 1;
  // Total bytes sent across the network.
  int64 total_sent_bytes = 2;
  // Total bytes received across the network.
  int64 total_received_bytes = 3;
  // Number of connected peers.
  uint32 connected_peers_count = 4;
  // List of connected peers.
  repeated PeerInfo connected_peers = 5;
  // Bytes sent per peer ID.
  map<int32, int64> sent_bytes = 6;
  // Bytes received per peer ID.
  map<int32, int64> received_bytes = 7;
}

// Request message for retrieving information about a specific node in the
// network.
message GetNodeInfoRequest {}

// Response message containing information about a specific node in the network.
message GetNodeInfoResponse {
  // Moniker of the node.
  string moniker = 1;
  // Agent information of the node.
  string agent = 2;
  // Peer ID of the node.
  string peer_id = 3;
  // Timestamp when the node started.
  uint64 started_at = 4;
  // Reachability status of the node.
  string reachability = 5;
  // A bitfield indicating the services provided by the node.
  int32 services = 6;
  // Names of services provided by the node.
  string services_names = 7;
  // List of addresses associated with the node.
  repeated string local_addrs = 8;
  // List of protocols supported by the node.
  repeated string protocols = 9;
  // Clock offset of the node.
  double clock_offset = 13;
  // Information about the node's connections.
  ConnectionInfo connection_info = 14;
}

// Information about a peer in the network.
message PeerInfo {
  // Status of the peer.
  int32 status = 1;
  // Moniker of the peer.
  string moniker = 2;
  // Agent information of the peer.
  string agent = 3;
  // Peer ID of the peer.
  string peer_id = 4;
  // Consensus keys used by the peer.
  repeated string consensus_keys = 5;
  // Consensus addresses of the peer.
  repeated string consensus_addresses = 6;
  // Services provided by the peer.
  uint32 services = 7;
  // Hash of the last block the peer knows.
  string last_block_hash = 8;
  // Blockchain height of the peer.
  uint32 height = 9;
  // Number of received bundles.
  int32 received_bundles = 10;
  // Number of invalid bundles received.
  int32 invalid_bundles = 11;
  // Timestamp of the last sent bundle.
  int64 last_sent = 12;
  // Timestamp of the last received bundle.
  int64 last_received = 13;
  // Bytes sent per message type.
  map<int32, int64> sent_bytes = 14;
  // Bytes received per message type.
  map<int32, int64> received_bytes = 15;
  // Network address of the peer.
  string address = 16;
  // Direction of connection with the peer.
  string direction = 17;
  // List of protocols supported by the peer.
  repeated string protocols = 18;
  // Total download sessions with the peer.
  int32 total_sessions = 19;
  // Completed download sessions with the peer.
  int32 completed_sessions = 20;
}

// ConnectionInfo contains information about the node's connections.
message ConnectionInfo {
  // Total number of connections.
  uint64 connections = 1;
  // Number of inbound connections.
  uint64 inbound_connections = 2;
  // Number of outbound connections.
  uint64 outbound_connections = 3;
}
