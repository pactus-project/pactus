syntax = 'proto3';

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "transaction.proto";

option go_package = "github.com/zarbchain/zarb-go/www/grpc/zarb";

package zarb;

service Blockchain {
  rpc GetBlock(BlockRequest) returns (BlockResponse) {
    option (google.api.http).get = "/v1/blockchain/block/hash/{hash}";
  }
  rpc GetBlockHash(BlockHashRequest) returns (BlockHashResponse) {
    option (google.api.http).get = "/v1/blockchain/block_hash/{height}";
  }
  rpc GetAccount(AccountRequest) returns (AccountResponse) {
    option (google.api.http).get = "/v1/blockchain/account/address/{address}";
  }
  rpc GetValidators(ValidatorsRequest) returns (ValidatorsResponse) {
    option (google.api.http).get = "/v1/blockchain/validators";
  }
  rpc GetValidator(ValidatorRequest) returns (ValidatorResponse) {
    option (google.api.http).get = "/v1/blockchain/validator/address/{address}";
  }
  rpc GetValidatorByNumber(ValidatorByNumberRequest)
      returns (ValidatorResponse) {
    option (google.api.http).get = "/v1/blockchain/validator/{number}";
  }
  rpc GetBlockchainInfo(BlockchainInfoRequest)
      returns (BlockchainInfoResponse) {
    option (google.api.http).get = "/v1/blockchain/info";
  }
}

message AccountRequest { string address = 1; }

message AccountResponse { AccountInfo account = 1; }

message ValidatorsRequest {}

message ValidatorRequest { string address = 1; }
message ValidatorByNumberRequest { int32 number = 1; }

message ValidatorsResponse { repeated ValidatorInfo validators = 1; }

message ValidatorResponse { ValidatorInfo validator = 1; }

message BlockRequest {
  bytes hash = 1;
  BlockVerbosity verbosity = 2;
}

message BlockResponse {
  uint32 height = 1;
  bytes hash = 2;
  google.protobuf.Timestamp block_time = 3;
  BlockHeaderInfo header = 4;
  CertificateInfo prev_cert = 5;
  repeated TransactionInfo txs = 6;
}

message BlockHashRequest { uint32 height = 1; }

message BlockHashResponse { bytes hash = 1; }

message BlockchainInfoRequest {}

message BlockchainInfoResponse {
  uint32 last_block_height = 1;
  bytes last_block_hash = 2;
}

message ValidatorInfo {
  string public_key = 1;
  int32 number = 2;
  int32 sequence = 3;
  int64 stake = 4;
  uint32 last_bonding_height = 5;
  uint32 last_joined_height = 6;
  uint32 unbonding_height = 7;
  string address = 8;
}

message AccountInfo {
  string address = 1;
  int32 number = 2;
  int32 sequence = 3;
  int64 Balance = 4;
}

message BlockHeaderInfo {
  int32 version = 1;
  bytes prev_block_hash = 2;
  bytes state_root = 3;
  bytes sortition_seed = 4;
  string proposer_address = 5;
}

message CertificateInfo {
  int32 round = 1;
  repeated int32 committers = 2;
  repeated int32 absentees = 3;
  bytes signature = 4;
}

enum BlockVerbosity {
  BLOCK_HASH = 0;
  BLOCK_INFO = 1;
  BLOCK_TRANSACTIONS = 2;
}
