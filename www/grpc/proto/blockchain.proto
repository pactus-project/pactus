syntax = "proto3";
package pactus;

option go_package = "github.com/pactus-project/pactus/www/grpc/pactus";
option java_package = "pactus.blockchain";

import "transaction.proto";

// Blockchain service defines RPC methods for interacting with the blockchain.
service Blockchain {
  // GetBlock retrieves information about a block based on the provided request
  // parameters.
  rpc GetBlock(GetBlockRequest) returns (GetBlockResponse);

  // GetBlockHash retrieves the hash of a block at the specified height.
  rpc GetBlockHash(GetBlockHashRequest) returns (GetBlockHashResponse);

  // GetBlockHeight retrieves the height of a block with the specified hash.
  rpc GetBlockHeight(GetBlockHeightRequest) returns (GetBlockHeightResponse);

  // GetBlockchainInfo retrieves general information about the blockchain.
  rpc GetBlockchainInfo(GetBlockchainInfoRequest)
      returns (GetBlockchainInfoResponse);

  // GetConsensusInfo retrieves information about the consensus instances.
  rpc GetConsensusInfo(GetConsensusInfoRequest)
      returns (GetConsensusInfoResponse);

  // GetAccount retrieves information about an account based on the provided
  // address.
  rpc GetAccount(GetAccountRequest) returns (GetAccountResponse);

  // GetValidator retrieves information about a validator based on the provided
  // address.
  rpc GetValidator(GetValidatorRequest) returns (GetValidatorResponse);

  // GetValidatorByNumber retrieves information about a validator based on the
  // provided number.
  rpc GetValidatorByNumber(GetValidatorByNumberRequest)
      returns (GetValidatorResponse);

  // GetValidatorAddresses retrieves a list of all validator addresses.
  rpc GetValidatorAddresses(GetValidatorAddressesRequest)
      returns (GetValidatorAddressesResponse);

  // GetPublicKey retrieves the public key of an account based on the provided
  // address.
  rpc GetPublicKey(GetPublicKeyRequest) returns (GetPublicKeyResponse);

  // GetTxPoolContent retrieves current transactions in the transaction pool.
  rpc GetTxPoolContent(GetTxPoolContentRequest)
      returns (GetTxPoolContentResponse);
}

// Message to request account information based on an address.
message GetAccountRequest {
  // The address of the account to retrieve information for.
  string address = 1;
}

// Message containing the response with account information.
message GetAccountResponse {
  // Detailed information about the account.
  AccountInfo account = 1;
}

// Message to request validator addresses.
message GetValidatorAddressesRequest {}

// Message containing the response with a list of validator addresses.
message GetValidatorAddressesResponse {
  // List of validator addresses.
  repeated string addresses = 1;
}

// Message to request validator information based on an address.
message GetValidatorRequest {
  // The address of the validator to retrieve information for.
  string address = 1;
}

// Message to request validator information based on a validator number.
message GetValidatorByNumberRequest {
  // The unique number of the validator to retrieve information for.
  int32 number = 1;
}

// Message containing the response with validator information.
message GetValidatorResponse {
  // Detailed information about the validator.
  ValidatorInfo validator = 1;
}

// Message to request public key based on an address.
message GetPublicKeyRequest {
  // The address for which to retrieve the public key.
  string address = 1;
}

// Message containing the response with the public key.
message GetPublicKeyResponse {
  // The public key associated with the provided address.
  string public_key = 1;
}

// Message to request block information based on height and verbosity level.
message GetBlockRequest {
  // The height of the block to retrieve.
  uint32 height = 1;
  // The verbosity level for block information.
  BlockVerbosity verbosity = 2;
}

// Message containing the response with block information.
message GetBlockResponse {
  // The height of the block.
  uint32 height = 1;
  // The hash of the block.
  string hash = 2;
  // Block data, available only if verbosity level is set to BLOCK_DATA.
  string data = 3;
  // The timestamp of the block.
  uint32 block_time = 4;
  // Header information of the block.
  BlockHeaderInfo header = 5;
  // Certificate information of the previous block.
  CertificateInfo prev_cert = 6;
  // List of transactions in the block, available when verbosity level is set to
  // BLOCK_TRANSACTIONS.
  repeated TransactionInfo txs = 7;
}

// Message to request block hash based on height.
message GetBlockHashRequest {
  // The height of the block to retrieve the hash for.
  uint32 height = 1;
}

// Message containing the response with the block hash.
message GetBlockHashResponse {
  // The hash of the block.
  string hash = 1;
}

// Message to request block height based on hash.
message GetBlockHeightRequest {
  // The hash of the block to retrieve the height for.
  string hash = 1;
}

// Message containing the response with the block height.
message GetBlockHeightResponse {
  // The height of the block.
  uint32 height = 1;
}

// Message to request general information about the blockchain.
message GetBlockchainInfoRequest {}

// Message containing the response with general blockchain information.
message GetBlockchainInfoResponse {
  // The height of the last block in the blockchain.
  uint32 last_block_height = 1;
  // The hash of the last block in the blockchain.
  string last_block_hash = 2;
  // The total number of accounts in the blockchain.
  int32 total_accounts = 3;
  // The total number of validators in the blockchain.
  int32 total_validators = 4;
  // The total power of the blockchain.
  int64 total_power = 5;
  // The power of the committee.
  int64 committee_power = 6;
  // List of committee validators.
  repeated ValidatorInfo committee_validators = 7;
  // If the blocks are subject to pruning.
  bool is_pruned = 8;
  // Lowest-height block stored (only present if pruning is enabled)
  uint32 pruning_height = 9;
  // Timestamp of the last block in Unix format
  int64 last_block_time = 10;
}

// Message to request consensus information.
message GetConsensusInfoRequest {}

// Message containing the response with consensus information.
message GetConsensusInfoResponse {
  // The proposal of the consensus info.
  Proposal proposal = 1;
  // List of consensus instances.
  repeated ConsensusInfo instances = 2;
}

// Request message to retrieve transactions in the transaction pool.
message GetTxPoolContentRequest {
  // The type of transactions to retrieve from the transaction pool. 0 means all
  // types.
  PayloadType payload_type = 1;
}

// Response message containing transactions in the transaction pool.
message GetTxPoolContentResponse {
  // List of transactions currently in the pool.
  repeated TransactionInfo txs = 1;
}

// Message containing information about a validator.
message ValidatorInfo {
  // The hash of the validator.
  string hash = 1;
  // The serialized data of the validator.
  string data = 2;
  // The public key of the validator.
  string public_key = 3;
  // The unique number assigned to the validator.
  int32 number = 4;
  // The stake of the validator in NanoPAC.
  int64 stake = 5;
  // The height at which the validator last bonded.
  uint32 last_bonding_height = 6;
  // The height at which the validator last participated in sortition.
  uint32 last_sortition_height = 7;
  // The height at which the validator will unbond.
  uint32 unbonding_height = 8;
  // The address of the validator.
  string address = 9;
  // The availability score of the validator.
  double availability_score = 10;
}

// Message containing information about an account.
message AccountInfo {
  // The hash of the account.
  string hash = 1;
  // The serialized data of the account.
  string data = 2;
  // The unique number assigned to the account.
  int32 number = 3;
  // The balance of the account in NanoPAC.
  int64 balance = 4;
  // The address of the account.
  string address = 5;
}

// Message containing information about the header of a block.
message BlockHeaderInfo {
  // The version of the block.
  int32 version = 1;
  // The hash of the previous block.
  string prev_block_hash = 2;
  // The state root hash of the blockchain.
  string state_root = 3;
  // The sortition seed of the block.
  string sortition_seed = 4;
  // The address of the proposer of the block.
  string proposer_address = 5;
}

// Message containing information about a certificate.
message CertificateInfo {
  // The hash of the certificate.
  string hash = 1;
  // The round of the certificate.
  int32 round = 2;
  // List of committers in the certificate.
  repeated int32 committers = 3;
  // List of absentees in the certificate.
  repeated int32 absentees = 4;
  // The signature of the certificate.
  string signature = 5;
}

// Message containing information about a vote.
message VoteInfo {
  // The type of the vote.
  VoteType type = 1;
  // The address of the voter.
  string voter = 2;
  // The hash of the block being voted on.
  string block_hash = 3;
  // The consensus round of the vote.
  int32 round = 4;
  // The change-proposer round of the vote.
  int32 cp_round = 5;
  // The change-proposer value of the vote.
  int32 cp_value = 6;
}

// Message containing information about a consensus instance.
message ConsensusInfo {
  // The address of the consensus instance.
  string address = 1;
  // Indicates whether the consensus instance is active and part of the
  // committee.
  bool active = 2;
  // The height of the consensus instance.
  uint32 height = 3;
  // The round of the consensus instance.
  int32 round = 4;
  // List of votes in the consensus instance.
  repeated VoteInfo votes = 5;
}

// Message containing information about a proposal.
message Proposal {
  // The height of the proposal.
  uint32 height = 1;
  // The round of the proposal.
  int32 round = 2;
  // The block data of the proposal.
  string block_data = 3;
  // The signature data of the proposal.
  string signature_data = 4;
}



// Enumeration for verbosity levels when requesting block information.
enum BlockVerbosity {
  // Request only block data.
  BLOCK_DATA = 0;
  // Request block information and transaction IDs.
  BLOCK_INFO = 1;
  // Request block information and detailed transaction data.
  BLOCK_TRANSACTIONS = 2;
}

// Enumeration for types of votes.
enum VoteType {
  // Unknown vote type.
  VOTE_UNKNOWN = 0;
  // Prepare vote type.
  VOTE_PREPARE = 1;
  // Precommit vote type.
  VOTE_PRECOMMIT = 2;
  // Change proposer vote type.
  VOTE_CHANGE_PROPOSER = 3;
}
