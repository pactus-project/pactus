syntax = 'proto3';
package pactus;

option go_package = "github.com/pactus-project/pactus/www/grpc/pactus";
option java_package = "pactus.blockchain";

import "transaction.proto";

service Blockchain {
  rpc GetBlock(GetBlockRequest) returns (GetBlockResponse);
  rpc GetBlockHash(GetBlockHashRequest) returns (GetBlockHashResponse);
  rpc GetBlockHeight(GetBlockHeightRequest) returns (GetBlockHeightResponse);
  rpc GetBlockchainInfo(GetBlockchainInfoRequest)
      returns (GetBlockchainInfoResponse);
  rpc GetConsensusInfo(GetConsensusInfoRequest)
      returns (GetConsensusInfoResponse);
  rpc GetAccount(GetAccountRequest) returns (GetAccountResponse);
  rpc GetAccountByNumber(GetAccountByNumberRequest) returns(GetAccountResponse);
  rpc GetValidator(GetValidatorRequest) returns (GetValidatorResponse);
  rpc GetValidatorByNumber(GetValidatorByNumberRequest)
      returns (GetValidatorResponse);
  rpc GetValidatorAddresses(GetValidatorAddressesRequest)
      returns(GetValidatorAddressesResponse);
}

message GetAccountRequest { string address = 1; }

message  GetAccountByNumberRequest {
  int32 number = 1;
}

message GetAccountResponse { AccountInfo account = 1; }

message GetValidatorAddressesRequest {}

message GetValidatorAddressesResponse { repeated string addresses = 1; }

message GetValidatorRequest { string address = 1; }

message GetValidatorByNumberRequest { int32 number = 1; }

message GetValidatorResponse { ValidatorInfo validator = 1; }

message GetBlockRequest {
  uint32 height = 1;
  BlockVerbosity verbosity = 2;
}

message GetBlockResponse {
  uint32 height = 1;
  bytes hash = 2;
  bytes data = 3;
  uint32 block_time = 4;
  BlockHeaderInfo header = 5;
  CertificateInfo prev_cert = 6;
  repeated TransactionInfo txs = 7;
}

message GetBlockHashRequest { uint32 height = 1; }

message GetBlockHashResponse { bytes hash = 1; }

message GetBlockHeightRequest { bytes hash = 1; }

message GetBlockHeightResponse { uint32 height = 1; }

message GetBlockchainInfoRequest {}

message GetBlockchainInfoResponse {
  uint32 last_block_height = 1;
  bytes last_block_hash = 2;
  int32 total_accounts = 3;
  int32 total_validators = 4;
  int64 total_power = 5;
  int64 committee_power = 6;
  repeated ValidatorInfo committee_validators = 7;
}

message GetConsensusInfoRequest {}

message GetConsensusInfoResponse {
  repeated ConsensusInfo instances = 1;
}

message ValidatorInfo {
  bytes hash = 1;
  bytes data = 2;
  string public_key = 3;
  int32 number = 4;
  int64 stake = 5;
  uint32 last_bonding_height = 6;
  uint32 last_sortition_height = 7;
  uint32 unbonding_height = 8;
  string address = 9;
}

message AccountInfo {
  bytes hash = 1;
  bytes data = 2;
  int32 number = 3;
  int64 balance = 4;
}

message BlockHeaderInfo {
  int32 version = 1;
  bytes prev_block_hash = 2;
  bytes state_root = 3;
  bytes sortition_seed = 4;
  string proposer_address = 5;
}

message CertificateInfo {
  bytes hash = 1;
  int32 round = 2;
  repeated int32 committers = 3;
  repeated int32 absentees = 4;
  bytes signature = 5;
}

message VoteInfo {
  VoteType type = 1;
  string voter = 2;
  bytes block_hash = 3;
  int32 round = 4;
}

message ConsensusInfo {
  string address = 1;
  bool Active = 2;
  uint32 height = 3;
  int32 round = 4;
  repeated VoteInfo votes = 5;
}

enum BlockVerbosity {
  BLOCK_DATA = 0;
  BLOCK_INFO = 1;
  BLOCK_TRANSACTIONS = 2;
}

enum VoteType {
  VOTE_UNKNOWN = 0;
  VOTE_PREPARE = 1;
  VOTE_PRECOMMIT = 2;
  VOTE_CHANGE_PROPOSER = 3;
}
