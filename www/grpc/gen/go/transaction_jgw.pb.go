// Code generated by protoc-gen-jrpc-gateway. DO NOT EDIT.
// source: transaction.proto

/*
Package pactus is a reverse proxy.

It translates gRPC into JSON-RPC 2.0
*/
package pactus

import (
	"context"
	"encoding/json"

	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
	"google.golang.org/protobuf/encoding/protojson"
)

type TransactionJsonRPC struct {
	client TransactionClient
}

type paramsAndHeadersTransaction struct {
	Headers metadata.MD     `json:"headers,omitempty"`
	Params  json.RawMessage `json:"params"`
}

// RegisterTransactionJsonRPC register the grpc client Transaction for json-rpc.
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterTransactionJsonRPC(conn *grpc.ClientConn) *TransactionJsonRPC {
	return &TransactionJsonRPC{
		client: NewTransactionClient(conn),
	}
}

func (s *TransactionJsonRPC) Methods() map[string]func(ctx context.Context, message json.RawMessage) (any, error) {
	return map[string]func(ctx context.Context, params json.RawMessage) (any, error){

		"pactus.transaction.get_transaction": func(ctx context.Context, data json.RawMessage) (any, error) {
			req := new(GetTransactionRequest)

			var jrpcData paramsAndHeadersTransaction

			if err := json.Unmarshal(data, &jrpcData); err != nil {
				return nil, err
			}

			err := protojson.Unmarshal(jrpcData.Params, req)
			if err != nil {
				return nil, err
			}

			return s.client.GetTransaction(metadata.NewOutgoingContext(ctx, jrpcData.Headers), req)
		},

		"pactus.transaction.calculate_fee": func(ctx context.Context, data json.RawMessage) (any, error) {
			req := new(CalculateFeeRequest)

			var jrpcData paramsAndHeadersTransaction

			if err := json.Unmarshal(data, &jrpcData); err != nil {
				return nil, err
			}

			err := protojson.Unmarshal(jrpcData.Params, req)
			if err != nil {
				return nil, err
			}

			return s.client.CalculateFee(metadata.NewOutgoingContext(ctx, jrpcData.Headers), req)
		},

		"pactus.transaction.broadcast_transaction": func(ctx context.Context, data json.RawMessage) (any, error) {
			req := new(BroadcastTransactionRequest)

			var jrpcData paramsAndHeadersTransaction

			if err := json.Unmarshal(data, &jrpcData); err != nil {
				return nil, err
			}

			err := protojson.Unmarshal(jrpcData.Params, req)
			if err != nil {
				return nil, err
			}

			return s.client.BroadcastTransaction(metadata.NewOutgoingContext(ctx, jrpcData.Headers), req)
		},

		"pactus.transaction.get_raw_transfer_transaction": func(ctx context.Context, data json.RawMessage) (any, error) {
			req := new(GetRawTransferTransactionRequest)

			var jrpcData paramsAndHeadersTransaction

			if err := json.Unmarshal(data, &jrpcData); err != nil {
				return nil, err
			}

			err := protojson.Unmarshal(jrpcData.Params, req)
			if err != nil {
				return nil, err
			}

			return s.client.GetRawTransferTransaction(metadata.NewOutgoingContext(ctx, jrpcData.Headers), req)
		},

		"pactus.transaction.get_raw_bond_transaction": func(ctx context.Context, data json.RawMessage) (any, error) {
			req := new(GetRawBondTransactionRequest)

			var jrpcData paramsAndHeadersTransaction

			if err := json.Unmarshal(data, &jrpcData); err != nil {
				return nil, err
			}

			err := protojson.Unmarshal(jrpcData.Params, req)
			if err != nil {
				return nil, err
			}

			return s.client.GetRawBondTransaction(metadata.NewOutgoingContext(ctx, jrpcData.Headers), req)
		},

		"pactus.transaction.get_raw_unbond_transaction": func(ctx context.Context, data json.RawMessage) (any, error) {
			req := new(GetRawUnbondTransactionRequest)

			var jrpcData paramsAndHeadersTransaction

			if err := json.Unmarshal(data, &jrpcData); err != nil {
				return nil, err
			}

			err := protojson.Unmarshal(jrpcData.Params, req)
			if err != nil {
				return nil, err
			}

			return s.client.GetRawUnbondTransaction(metadata.NewOutgoingContext(ctx, jrpcData.Headers), req)
		},

		"pactus.transaction.get_raw_withdraw_transaction": func(ctx context.Context, data json.RawMessage) (any, error) {
			req := new(GetRawWithdrawTransactionRequest)

			var jrpcData paramsAndHeadersTransaction

			if err := json.Unmarshal(data, &jrpcData); err != nil {
				return nil, err
			}

			err := protojson.Unmarshal(jrpcData.Params, req)
			if err != nil {
				return nil, err
			}

			return s.client.GetRawWithdrawTransaction(metadata.NewOutgoingContext(ctx, jrpcData.Headers), req)
		},
	}
}
