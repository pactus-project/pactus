// Code generated by protoc-gen-jrpc-gateway. DO NOT EDIT.
// source: network.proto

/*
Package pactus is a reverse proxy.

It translates gRPC into JSON-RPC 2.0
*/
package pactus

import (
	"context"
	"encoding/json"

	"google.golang.org/protobuf/encoding/protojson"
)

type NetworkJsonRpcService struct {
	client NetworkClient
}

func NewNetworkJsonRpcService(client NetworkClient) NetworkJsonRpcService {
	return NetworkJsonRpcService{
		client: client,
	}
}

func (s *NetworkJsonRpcService) Methods() map[string]func(ctx context.Context, message json.RawMessage) (any, error) {
	return map[string]func(ctx context.Context, params json.RawMessage) (any, error){

		"pactus.network.get_network_info": func(ctx context.Context, data json.RawMessage) (any, error) {
			req := new(GetNetworkInfoRequest)
			err := protojson.Unmarshal(data, req)
			if err != nil {
				return nil, err
			}
			return s.client.GetNetworkInfo(ctx, req)
		},

		"pactus.network.get_node_info": func(ctx context.Context, data json.RawMessage) (any, error) {
			req := new(GetNodeInfoRequest)
			err := protojson.Unmarshal(data, req)
			if err != nil {
				return nil, err
			}
			return s.client.GetNodeInfo(ctx, req)
		},
	}
}
