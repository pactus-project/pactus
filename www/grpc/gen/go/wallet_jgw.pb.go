// Code generated by protoc-gen-jrpc-gateway. DO NOT EDIT.
// source: wallet.proto

/*
Package pactus is a reverse proxy.

It translates gRPC into JSON-RPC 2.0
*/
package pactus

import (
	"context"
	"encoding/json"

	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
	"google.golang.org/protobuf/encoding/protojson"
)

type WalletJsonRPC struct {
	client WalletClient
}

type paramsAndHeadersWallet struct {
	Headers metadata.MD     `json:"headers,omitempty"`
	Params  json.RawMessage `json:"params"`
}

// RegisterWalletJsonRPC register the grpc client Wallet for json-rpc.
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterWalletJsonRPC(conn *grpc.ClientConn) *WalletJsonRPC {
	return &WalletJsonRPC{
		client: NewWalletClient(conn),
	}
}

func (s *WalletJsonRPC) Methods() map[string]func(ctx context.Context, message json.RawMessage) (any, error) {
	return map[string]func(ctx context.Context, params json.RawMessage) (any, error){

		"pactus.wallet.create_wallet": func(ctx context.Context, data json.RawMessage) (any, error) {
			req := new(CreateWalletRequest)

			var jrpcData paramsAndHeadersWallet

			if err := json.Unmarshal(data, &jrpcData); err != nil {
				return nil, err
			}

			err := protojson.Unmarshal(jrpcData.Params, req)
			if err != nil {
				return nil, err
			}

			return s.client.CreateWallet(metadata.NewOutgoingContext(ctx, jrpcData.Headers), req)
		},

		"pactus.wallet.restore_wallet": func(ctx context.Context, data json.RawMessage) (any, error) {
			req := new(RestoreWalletRequest)

			var jrpcData paramsAndHeadersWallet

			if err := json.Unmarshal(data, &jrpcData); err != nil {
				return nil, err
			}

			err := protojson.Unmarshal(jrpcData.Params, req)
			if err != nil {
				return nil, err
			}

			return s.client.RestoreWallet(metadata.NewOutgoingContext(ctx, jrpcData.Headers), req)
		},

		"pactus.wallet.load_wallet": func(ctx context.Context, data json.RawMessage) (any, error) {
			req := new(LoadWalletRequest)

			var jrpcData paramsAndHeadersWallet

			if err := json.Unmarshal(data, &jrpcData); err != nil {
				return nil, err
			}

			err := protojson.Unmarshal(jrpcData.Params, req)
			if err != nil {
				return nil, err
			}

			return s.client.LoadWallet(metadata.NewOutgoingContext(ctx, jrpcData.Headers), req)
		},

		"pactus.wallet.unload_wallet": func(ctx context.Context, data json.RawMessage) (any, error) {
			req := new(UnloadWalletRequest)

			var jrpcData paramsAndHeadersWallet

			if err := json.Unmarshal(data, &jrpcData); err != nil {
				return nil, err
			}

			err := protojson.Unmarshal(jrpcData.Params, req)
			if err != nil {
				return nil, err
			}

			return s.client.UnloadWallet(metadata.NewOutgoingContext(ctx, jrpcData.Headers), req)
		},

		"pactus.wallet.get_total_balance": func(ctx context.Context, data json.RawMessage) (any, error) {
			req := new(GetTotalBalanceRequest)

			var jrpcData paramsAndHeadersWallet

			if err := json.Unmarshal(data, &jrpcData); err != nil {
				return nil, err
			}

			err := protojson.Unmarshal(jrpcData.Params, req)
			if err != nil {
				return nil, err
			}

			return s.client.GetTotalBalance(metadata.NewOutgoingContext(ctx, jrpcData.Headers), req)
		},

		"pactus.wallet.sign_raw_transaction": func(ctx context.Context, data json.RawMessage) (any, error) {
			req := new(SignRawTransactionRequest)

			var jrpcData paramsAndHeadersWallet

			if err := json.Unmarshal(data, &jrpcData); err != nil {
				return nil, err
			}

			err := protojson.Unmarshal(jrpcData.Params, req)
			if err != nil {
				return nil, err
			}

			return s.client.SignRawTransaction(metadata.NewOutgoingContext(ctx, jrpcData.Headers), req)
		},

		"pactus.wallet.get_validator_address": func(ctx context.Context, data json.RawMessage) (any, error) {
			req := new(GetValidatorAddressRequest)

			var jrpcData paramsAndHeadersWallet

			if err := json.Unmarshal(data, &jrpcData); err != nil {
				return nil, err
			}

			err := protojson.Unmarshal(jrpcData.Params, req)
			if err != nil {
				return nil, err
			}

			return s.client.GetValidatorAddress(metadata.NewOutgoingContext(ctx, jrpcData.Headers), req)
		},

		"pactus.wallet.get_new_address": func(ctx context.Context, data json.RawMessage) (any, error) {
			req := new(GetNewAddressRequest)

			var jrpcData paramsAndHeadersWallet

			if err := json.Unmarshal(data, &jrpcData); err != nil {
				return nil, err
			}

			err := protojson.Unmarshal(jrpcData.Params, req)
			if err != nil {
				return nil, err
			}

			return s.client.GetNewAddress(metadata.NewOutgoingContext(ctx, jrpcData.Headers), req)
		},

		"pactus.wallet.get_address_history": func(ctx context.Context, data json.RawMessage) (any, error) {
			req := new(GetAddressHistoryRequest)

			var jrpcData paramsAndHeadersWallet

			if err := json.Unmarshal(data, &jrpcData); err != nil {
				return nil, err
			}

			err := protojson.Unmarshal(jrpcData.Params, req)
			if err != nil {
				return nil, err
			}

			return s.client.GetAddressHistory(metadata.NewOutgoingContext(ctx, jrpcData.Headers), req)
		},

		"pactus.wallet.sign_message": func(ctx context.Context, data json.RawMessage) (any, error) {
			req := new(SignMessageRequest)

			var jrpcData paramsAndHeadersWallet

			if err := json.Unmarshal(data, &jrpcData); err != nil {
				return nil, err
			}

			err := protojson.Unmarshal(jrpcData.Params, req)
			if err != nil {
				return nil, err
			}

			return s.client.SignMessage(metadata.NewOutgoingContext(ctx, jrpcData.Headers), req)
		},
	}
}
