// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: utils.proto

package pactus

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UtilsService_SignMessageWithPrivateKey_FullMethodName = "/pactus.UtilsService/SignMessageWithPrivateKey"
	UtilsService_VerifyMessage_FullMethodName             = "/pactus.UtilsService/VerifyMessage"
	UtilsService_PublicKeyAggregation_FullMethodName      = "/pactus.UtilsService/PublicKeyAggregation"
	UtilsService_SignatureAggregation_FullMethodName      = "/pactus.UtilsService/SignatureAggregation"
)

// UtilsServiceClient is the client API for UtilsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Utils service defines RPC methods for utility functions such as message
// signing, verification, and etc.
type UtilsServiceClient interface {
	// SignMessageWithPrivateKey signs a message with the provided private key.
	SignMessageWithPrivateKey(ctx context.Context, in *SignMessageWithPrivateKeyRequest, opts ...grpc.CallOption) (*SignMessageWithPrivateKeyResponse, error)
	// VerifyMessage verifies a signature against the public key and message.
	VerifyMessage(ctx context.Context, in *VerifyMessageRequest, opts ...grpc.CallOption) (*VerifyMessageResponse, error)
	// PublicKeyAggregation aggregates multiple BLS public keys into a single key.
	PublicKeyAggregation(ctx context.Context, in *PublicKeyAggregationRequest, opts ...grpc.CallOption) (*PublicKeyAggregationResponse, error)
	// SignatureAggregation aggregates multiple BLS signatures into a single signature.
	SignatureAggregation(ctx context.Context, in *SignatureAggregationRequest, opts ...grpc.CallOption) (*SignatureAggregationResponse, error)
}

type utilsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUtilsServiceClient(cc grpc.ClientConnInterface) UtilsServiceClient {
	return &utilsServiceClient{cc}
}

func (c *utilsServiceClient) SignMessageWithPrivateKey(ctx context.Context, in *SignMessageWithPrivateKeyRequest, opts ...grpc.CallOption) (*SignMessageWithPrivateKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignMessageWithPrivateKeyResponse)
	err := c.cc.Invoke(ctx, UtilsService_SignMessageWithPrivateKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilsServiceClient) VerifyMessage(ctx context.Context, in *VerifyMessageRequest, opts ...grpc.CallOption) (*VerifyMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyMessageResponse)
	err := c.cc.Invoke(ctx, UtilsService_VerifyMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilsServiceClient) PublicKeyAggregation(ctx context.Context, in *PublicKeyAggregationRequest, opts ...grpc.CallOption) (*PublicKeyAggregationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublicKeyAggregationResponse)
	err := c.cc.Invoke(ctx, UtilsService_PublicKeyAggregation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilsServiceClient) SignatureAggregation(ctx context.Context, in *SignatureAggregationRequest, opts ...grpc.CallOption) (*SignatureAggregationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignatureAggregationResponse)
	err := c.cc.Invoke(ctx, UtilsService_SignatureAggregation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UtilsServiceServer is the server API for UtilsService service.
// All implementations should embed UnimplementedUtilsServiceServer
// for forward compatibility.
//
// Utils service defines RPC methods for utility functions such as message
// signing, verification, and etc.
type UtilsServiceServer interface {
	// SignMessageWithPrivateKey signs a message with the provided private key.
	SignMessageWithPrivateKey(context.Context, *SignMessageWithPrivateKeyRequest) (*SignMessageWithPrivateKeyResponse, error)
	// VerifyMessage verifies a signature against the public key and message.
	VerifyMessage(context.Context, *VerifyMessageRequest) (*VerifyMessageResponse, error)
	// PublicKeyAggregation aggregates multiple BLS public keys into a single key.
	PublicKeyAggregation(context.Context, *PublicKeyAggregationRequest) (*PublicKeyAggregationResponse, error)
	// SignatureAggregation aggregates multiple BLS signatures into a single signature.
	SignatureAggregation(context.Context, *SignatureAggregationRequest) (*SignatureAggregationResponse, error)
}

// UnimplementedUtilsServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUtilsServiceServer struct{}

func (UnimplementedUtilsServiceServer) SignMessageWithPrivateKey(context.Context, *SignMessageWithPrivateKeyRequest) (*SignMessageWithPrivateKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignMessageWithPrivateKey not implemented")
}
func (UnimplementedUtilsServiceServer) VerifyMessage(context.Context, *VerifyMessageRequest) (*VerifyMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyMessage not implemented")
}
func (UnimplementedUtilsServiceServer) PublicKeyAggregation(context.Context, *PublicKeyAggregationRequest) (*PublicKeyAggregationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicKeyAggregation not implemented")
}
func (UnimplementedUtilsServiceServer) SignatureAggregation(context.Context, *SignatureAggregationRequest) (*SignatureAggregationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignatureAggregation not implemented")
}
func (UnimplementedUtilsServiceServer) testEmbeddedByValue() {}

// UnsafeUtilsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UtilsServiceServer will
// result in compilation errors.
type UnsafeUtilsServiceServer interface {
	mustEmbedUnimplementedUtilsServiceServer()
}

func RegisterUtilsServiceServer(s grpc.ServiceRegistrar, srv UtilsServiceServer) {
	// If the following call pancis, it indicates UnimplementedUtilsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UtilsService_ServiceDesc, srv)
}

func _UtilsService_SignMessageWithPrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignMessageWithPrivateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilsServiceServer).SignMessageWithPrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UtilsService_SignMessageWithPrivateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilsServiceServer).SignMessageWithPrivateKey(ctx, req.(*SignMessageWithPrivateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtilsService_VerifyMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilsServiceServer).VerifyMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UtilsService_VerifyMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilsServiceServer).VerifyMessage(ctx, req.(*VerifyMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtilsService_PublicKeyAggregation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicKeyAggregationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilsServiceServer).PublicKeyAggregation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UtilsService_PublicKeyAggregation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilsServiceServer).PublicKeyAggregation(ctx, req.(*PublicKeyAggregationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtilsService_SignatureAggregation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignatureAggregationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilsServiceServer).SignatureAggregation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UtilsService_SignatureAggregation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilsServiceServer).SignatureAggregation(ctx, req.(*SignatureAggregationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UtilsService_ServiceDesc is the grpc.ServiceDesc for UtilsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UtilsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pactus.UtilsService",
	HandlerType: (*UtilsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignMessageWithPrivateKey",
			Handler:    _UtilsService_SignMessageWithPrivateKey_Handler,
		},
		{
			MethodName: "VerifyMessage",
			Handler:    _UtilsService_VerifyMessage_Handler,
		},
		{
			MethodName: "PublicKeyAggregation",
			Handler:    _UtilsService_PublicKeyAggregation_Handler,
		},
		{
			MethodName: "SignatureAggregation",
			Handler:    _UtilsService_SignatureAggregation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "utils.proto",
}
