// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: network.proto

package pactus

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for retrieving overall network information.
type GetNetworkInfoRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If true, returns only peers that are currently connected.
	OnlyConnected bool `protobuf:"varint,1,opt,name=only_connected,json=onlyConnected,proto3" json:"only_connected,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNetworkInfoRequest) Reset() {
	*x = GetNetworkInfoRequest{}
	mi := &file_network_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNetworkInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkInfoRequest) ProtoMessage() {}

func (x *GetNetworkInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkInfoRequest.ProtoReflect.Descriptor instead.
func (*GetNetworkInfoRequest) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{0}
}

func (x *GetNetworkInfoRequest) GetOnlyConnected() bool {
	if x != nil {
		return x.OnlyConnected
	}
	return false
}

// Response message contains information about the overall network.
type GetNetworkInfoResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the network.
	NetworkName string `protobuf:"bytes,1,opt,name=network_name,json=networkName,proto3" json:"network_name,omitempty"`
	// Number of connected peers.
	ConnectedPeersCount uint32 `protobuf:"varint,2,opt,name=connected_peers_count,json=connectedPeersCount,proto3" json:"connected_peers_count,omitempty"`
	// List of connected peers.
	ConnectedPeers []*PeerInfo `protobuf:"bytes,3,rep,name=connected_peers,json=connectedPeers,proto3" json:"connected_peers,omitempty"`
	// Metrics related to node activity.
	MetricInfo    *MetricInfo `protobuf:"bytes,4,opt,name=metric_info,json=metricInfo,proto3" json:"metric_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNetworkInfoResponse) Reset() {
	*x = GetNetworkInfoResponse{}
	mi := &file_network_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNetworkInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkInfoResponse) ProtoMessage() {}

func (x *GetNetworkInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkInfoResponse.ProtoReflect.Descriptor instead.
func (*GetNetworkInfoResponse) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{1}
}

func (x *GetNetworkInfoResponse) GetNetworkName() string {
	if x != nil {
		return x.NetworkName
	}
	return ""
}

func (x *GetNetworkInfoResponse) GetConnectedPeersCount() uint32 {
	if x != nil {
		return x.ConnectedPeersCount
	}
	return 0
}

func (x *GetNetworkInfoResponse) GetConnectedPeers() []*PeerInfo {
	if x != nil {
		return x.ConnectedPeers
	}
	return nil
}

func (x *GetNetworkInfoResponse) GetMetricInfo() *MetricInfo {
	if x != nil {
		return x.MetricInfo
	}
	return nil
}

// Request message for retrieving information of the node.
type GetNodeInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNodeInfoRequest) Reset() {
	*x = GetNodeInfoRequest{}
	mi := &file_network_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNodeInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeInfoRequest) ProtoMessage() {}

func (x *GetNodeInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeInfoRequest.ProtoReflect.Descriptor instead.
func (*GetNodeInfoRequest) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{2}
}

// Response message contains information about a specific node in the network.
type GetNodeInfoResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Moniker or Human-readable name identifying this node in the network.
	Moniker string `protobuf:"bytes,1,opt,name=moniker,proto3" json:"moniker,omitempty"`
	// Version and agent details of the node.
	Agent string `protobuf:"bytes,2,opt,name=agent,proto3" json:"agent,omitempty"`
	// Peer ID of the node.
	PeerId string `protobuf:"bytes,3,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	// Time the node was started (in epoch format).
	StartedAt uint64 `protobuf:"varint,4,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	// Reachability status of the node.
	Reachability string `protobuf:"bytes,5,opt,name=reachability,proto3" json:"reachability,omitempty"`
	// Bitfield representing the services provided by the node.
	Services int32 `protobuf:"varint,6,opt,name=services,proto3" json:"services,omitempty"`
	// Names of services provided by the node.
	ServicesNames string `protobuf:"bytes,7,opt,name=services_names,json=servicesNames,proto3" json:"services_names,omitempty"`
	// List of addresses associated with the node.
	LocalAddrs []string `protobuf:"bytes,8,rep,name=local_addrs,json=localAddrs,proto3" json:"local_addrs,omitempty"`
	// List of protocols supported by the node.
	Protocols []string `protobuf:"bytes,9,rep,name=protocols,proto3" json:"protocols,omitempty"`
	// Offset between the node's clock and the network's clock (in seconds).
	ClockOffset float64 `protobuf:"fixed64,13,opt,name=clock_offset,json=clockOffset,proto3" json:"clock_offset,omitempty"`
	// Information about the node's connections.
	ConnectionInfo *ConnectionInfo `protobuf:"bytes,14,opt,name=connection_info,json=connectionInfo,proto3" json:"connection_info,omitempty"`
	// List of active ZeroMQ publishers.
	ZmqPublishers []*ZMQPublisherInfo `protobuf:"bytes,15,rep,name=zmq_publishers,json=zmqPublishers,proto3" json:"zmq_publishers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNodeInfoResponse) Reset() {
	*x = GetNodeInfoResponse{}
	mi := &file_network_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNodeInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeInfoResponse) ProtoMessage() {}

func (x *GetNodeInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeInfoResponse.ProtoReflect.Descriptor instead.
func (*GetNodeInfoResponse) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{3}
}

func (x *GetNodeInfoResponse) GetMoniker() string {
	if x != nil {
		return x.Moniker
	}
	return ""
}

func (x *GetNodeInfoResponse) GetAgent() string {
	if x != nil {
		return x.Agent
	}
	return ""
}

func (x *GetNodeInfoResponse) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

func (x *GetNodeInfoResponse) GetStartedAt() uint64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *GetNodeInfoResponse) GetReachability() string {
	if x != nil {
		return x.Reachability
	}
	return ""
}

func (x *GetNodeInfoResponse) GetServices() int32 {
	if x != nil {
		return x.Services
	}
	return 0
}

func (x *GetNodeInfoResponse) GetServicesNames() string {
	if x != nil {
		return x.ServicesNames
	}
	return ""
}

func (x *GetNodeInfoResponse) GetLocalAddrs() []string {
	if x != nil {
		return x.LocalAddrs
	}
	return nil
}

func (x *GetNodeInfoResponse) GetProtocols() []string {
	if x != nil {
		return x.Protocols
	}
	return nil
}

func (x *GetNodeInfoResponse) GetClockOffset() float64 {
	if x != nil {
		return x.ClockOffset
	}
	return 0
}

func (x *GetNodeInfoResponse) GetConnectionInfo() *ConnectionInfo {
	if x != nil {
		return x.ConnectionInfo
	}
	return nil
}

func (x *GetNodeInfoResponse) GetZmqPublishers() []*ZMQPublisherInfo {
	if x != nil {
		return x.ZmqPublishers
	}
	return nil
}

// ZMQPublisherInfo contains information about a ZeroMQ publisher.
type ZMQPublisherInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The topic associated with the publisher.
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// The address of the publisher.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// The high-water mark (HWM) for the publisher, indicating the
	// maximum number of messages to queue before dropping older ones.
	Hwm           int32 `protobuf:"varint,3,opt,name=hwm,proto3" json:"hwm,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ZMQPublisherInfo) Reset() {
	*x = ZMQPublisherInfo{}
	mi := &file_network_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ZMQPublisherInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZMQPublisherInfo) ProtoMessage() {}

func (x *ZMQPublisherInfo) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZMQPublisherInfo.ProtoReflect.Descriptor instead.
func (*ZMQPublisherInfo) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{4}
}

func (x *ZMQPublisherInfo) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *ZMQPublisherInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ZMQPublisherInfo) GetHwm() int32 {
	if x != nil {
		return x.Hwm
	}
	return 0
}

// PeerInfo contains information about a peer in the network.
type PeerInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Current status of the peer (e.g., connected, disconnected).
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// Moniker or Human-Readable name of the peer.
	Moniker string `protobuf:"bytes,2,opt,name=moniker,proto3" json:"moniker,omitempty"`
	// Version and agent details of the peer.
	Agent string `protobuf:"bytes,3,opt,name=agent,proto3" json:"agent,omitempty"`
	// Peer ID of the peer in P2P network.
	PeerId string `protobuf:"bytes,4,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	// List of consensus keys used by the peer.
	ConsensusKeys []string `protobuf:"bytes,5,rep,name=consensus_keys,json=consensusKeys,proto3" json:"consensus_keys,omitempty"`
	// List of consensus addresses used by the peer.
	ConsensusAddresses []string `protobuf:"bytes,6,rep,name=consensus_addresses,json=consensusAddresses,proto3" json:"consensus_addresses,omitempty"`
	// Bitfield representing the services provided by the peer.
	Services uint32 `protobuf:"varint,7,opt,name=services,proto3" json:"services,omitempty"`
	// Hash of the last block the peer knows.
	LastBlockHash string `protobuf:"bytes,8,opt,name=last_block_hash,json=lastBlockHash,proto3" json:"last_block_hash,omitempty"`
	// Blockchain height of the peer.
	Height uint32 `protobuf:"varint,9,opt,name=height,proto3" json:"height,omitempty"`
	// Time the last bundle sent to the peer (in epoch format).
	LastSent int64 `protobuf:"varint,10,opt,name=last_sent,json=lastSent,proto3" json:"last_sent,omitempty"`
	// Time the last bundle received from the peer (in epoch format).
	LastReceived int64 `protobuf:"varint,11,opt,name=last_received,json=lastReceived,proto3" json:"last_received,omitempty"`
	// Network address of the peer.
	Address string `protobuf:"bytes,12,opt,name=address,proto3" json:"address,omitempty"`
	// Connection direction (e.g., inbound, outbound).
	Direction string `protobuf:"bytes,13,opt,name=direction,proto3" json:"direction,omitempty"`
	// List of protocols supported by the peer.
	Protocols []string `protobuf:"bytes,14,rep,name=protocols,proto3" json:"protocols,omitempty"`
	// Total download sessions with the peer.
	TotalSessions int32 `protobuf:"varint,15,opt,name=total_sessions,json=totalSessions,proto3" json:"total_sessions,omitempty"`
	// Completed download sessions with the peer.
	CompletedSessions int32 `protobuf:"varint,16,opt,name=completed_sessions,json=completedSessions,proto3" json:"completed_sessions,omitempty"`
	// Metrics related to peer activity.
	MetricInfo    *MetricInfo `protobuf:"bytes,17,opt,name=metric_info,json=metricInfo,proto3" json:"metric_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PeerInfo) Reset() {
	*x = PeerInfo{}
	mi := &file_network_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerInfo) ProtoMessage() {}

func (x *PeerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerInfo.ProtoReflect.Descriptor instead.
func (*PeerInfo) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{5}
}

func (x *PeerInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PeerInfo) GetMoniker() string {
	if x != nil {
		return x.Moniker
	}
	return ""
}

func (x *PeerInfo) GetAgent() string {
	if x != nil {
		return x.Agent
	}
	return ""
}

func (x *PeerInfo) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

func (x *PeerInfo) GetConsensusKeys() []string {
	if x != nil {
		return x.ConsensusKeys
	}
	return nil
}

func (x *PeerInfo) GetConsensusAddresses() []string {
	if x != nil {
		return x.ConsensusAddresses
	}
	return nil
}

func (x *PeerInfo) GetServices() uint32 {
	if x != nil {
		return x.Services
	}
	return 0
}

func (x *PeerInfo) GetLastBlockHash() string {
	if x != nil {
		return x.LastBlockHash
	}
	return ""
}

func (x *PeerInfo) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *PeerInfo) GetLastSent() int64 {
	if x != nil {
		return x.LastSent
	}
	return 0
}

func (x *PeerInfo) GetLastReceived() int64 {
	if x != nil {
		return x.LastReceived
	}
	return 0
}

func (x *PeerInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *PeerInfo) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *PeerInfo) GetProtocols() []string {
	if x != nil {
		return x.Protocols
	}
	return nil
}

func (x *PeerInfo) GetTotalSessions() int32 {
	if x != nil {
		return x.TotalSessions
	}
	return 0
}

func (x *PeerInfo) GetCompletedSessions() int32 {
	if x != nil {
		return x.CompletedSessions
	}
	return 0
}

func (x *PeerInfo) GetMetricInfo() *MetricInfo {
	if x != nil {
		return x.MetricInfo
	}
	return nil
}

// ConnectionInfo contains information about the node's connections.
type ConnectionInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Total number of connections.
	Connections uint64 `protobuf:"varint,1,opt,name=connections,proto3" json:"connections,omitempty"`
	// Number of inbound connections.
	InboundConnections uint64 `protobuf:"varint,2,opt,name=inbound_connections,json=inboundConnections,proto3" json:"inbound_connections,omitempty"`
	// Number of outbound connections.
	OutboundConnections uint64 `protobuf:"varint,3,opt,name=outbound_connections,json=outboundConnections,proto3" json:"outbound_connections,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ConnectionInfo) Reset() {
	*x = ConnectionInfo{}
	mi := &file_network_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionInfo) ProtoMessage() {}

func (x *ConnectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionInfo.ProtoReflect.Descriptor instead.
func (*ConnectionInfo) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{6}
}

func (x *ConnectionInfo) GetConnections() uint64 {
	if x != nil {
		return x.Connections
	}
	return 0
}

func (x *ConnectionInfo) GetInboundConnections() uint64 {
	if x != nil {
		return x.InboundConnections
	}
	return 0
}

func (x *ConnectionInfo) GetOutboundConnections() uint64 {
	if x != nil {
		return x.OutboundConnections
	}
	return 0
}

// MetricInfo contains metrics data regarding network activity.
type MetricInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Total number of invalid bundles.
	TotalInvalid *CounterInfo `protobuf:"bytes,1,opt,name=total_invalid,json=totalInvalid,proto3" json:"total_invalid,omitempty"`
	// Total number of bundles sent.
	TotalSent *CounterInfo `protobuf:"bytes,2,opt,name=total_sent,json=totalSent,proto3" json:"total_sent,omitempty"`
	// Total number of bundles received.
	TotalReceived *CounterInfo `protobuf:"bytes,3,opt,name=total_received,json=totalReceived,proto3" json:"total_received,omitempty"`
	// Number of sent bundles categorized by message type.
	MessageSent map[int32]*CounterInfo `protobuf:"bytes,4,rep,name=message_sent,json=messageSent,proto3" json:"message_sent,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Number of received bundles categorized by message type.
	MessageReceived map[int32]*CounterInfo `protobuf:"bytes,5,rep,name=message_received,json=messageReceived,proto3" json:"message_received,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MetricInfo) Reset() {
	*x = MetricInfo{}
	mi := &file_network_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricInfo) ProtoMessage() {}

func (x *MetricInfo) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricInfo.ProtoReflect.Descriptor instead.
func (*MetricInfo) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{7}
}

func (x *MetricInfo) GetTotalInvalid() *CounterInfo {
	if x != nil {
		return x.TotalInvalid
	}
	return nil
}

func (x *MetricInfo) GetTotalSent() *CounterInfo {
	if x != nil {
		return x.TotalSent
	}
	return nil
}

func (x *MetricInfo) GetTotalReceived() *CounterInfo {
	if x != nil {
		return x.TotalReceived
	}
	return nil
}

func (x *MetricInfo) GetMessageSent() map[int32]*CounterInfo {
	if x != nil {
		return x.MessageSent
	}
	return nil
}

func (x *MetricInfo) GetMessageReceived() map[int32]*CounterInfo {
	if x != nil {
		return x.MessageReceived
	}
	return nil
}

// CounterInfo holds counter data regarding byte and bundle counts.
type CounterInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Total number of bytes.
	Bytes uint64 `protobuf:"varint,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
	// Total number of bundles.
	Bundles       uint64 `protobuf:"varint,2,opt,name=bundles,proto3" json:"bundles,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CounterInfo) Reset() {
	*x = CounterInfo{}
	mi := &file_network_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CounterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounterInfo) ProtoMessage() {}

func (x *CounterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_network_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounterInfo.ProtoReflect.Descriptor instead.
func (*CounterInfo) Descriptor() ([]byte, []int) {
	return file_network_proto_rawDescGZIP(), []int{8}
}

func (x *CounterInfo) GetBytes() uint64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *CounterInfo) GetBundles() uint64 {
	if x != nil {
		return x.Bundles
	}
	return 0
}

var File_network_proto protoreflect.FileDescriptor

const file_network_proto_rawDesc = "" +
	"\n" +
	"\rnetwork.proto\x12\x06pactus\">\n" +
	"\x15GetNetworkInfoRequest\x12%\n" +
	"\x0eonly_connected\x18\x01 \x01(\bR\ronlyConnected\"\xdf\x01\n" +
	"\x16GetNetworkInfoResponse\x12!\n" +
	"\fnetwork_name\x18\x01 \x01(\tR\vnetworkName\x122\n" +
	"\x15connected_peers_count\x18\x02 \x01(\rR\x13connectedPeersCount\x129\n" +
	"\x0fconnected_peers\x18\x03 \x03(\v2\x10.pactus.PeerInfoR\x0econnectedPeers\x123\n" +
	"\vmetric_info\x18\x04 \x01(\v2\x12.pactus.MetricInfoR\n" +
	"metricInfo\"\x14\n" +
	"\x12GetNodeInfoRequest\"\xc8\x03\n" +
	"\x13GetNodeInfoResponse\x12\x18\n" +
	"\amoniker\x18\x01 \x01(\tR\amoniker\x12\x14\n" +
	"\x05agent\x18\x02 \x01(\tR\x05agent\x12\x17\n" +
	"\apeer_id\x18\x03 \x01(\tR\x06peerId\x12\x1d\n" +
	"\n" +
	"started_at\x18\x04 \x01(\x04R\tstartedAt\x12\"\n" +
	"\freachability\x18\x05 \x01(\tR\freachability\x12\x1a\n" +
	"\bservices\x18\x06 \x01(\x05R\bservices\x12%\n" +
	"\x0eservices_names\x18\a \x01(\tR\rservicesNames\x12\x1f\n" +
	"\vlocal_addrs\x18\b \x03(\tR\n" +
	"localAddrs\x12\x1c\n" +
	"\tprotocols\x18\t \x03(\tR\tprotocols\x12!\n" +
	"\fclock_offset\x18\r \x01(\x01R\vclockOffset\x12?\n" +
	"\x0fconnection_info\x18\x0e \x01(\v2\x16.pactus.ConnectionInfoR\x0econnectionInfo\x12?\n" +
	"\x0ezmq_publishers\x18\x0f \x03(\v2\x18.pactus.ZMQPublisherInfoR\rzmqPublishers\"T\n" +
	"\x10ZMQPublisherInfo\x12\x14\n" +
	"\x05topic\x18\x01 \x01(\tR\x05topic\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\tR\aaddress\x12\x10\n" +
	"\x03hwm\x18\x03 \x01(\x05R\x03hwm\"\xc2\x04\n" +
	"\bPeerInfo\x12\x16\n" +
	"\x06status\x18\x01 \x01(\x05R\x06status\x12\x18\n" +
	"\amoniker\x18\x02 \x01(\tR\amoniker\x12\x14\n" +
	"\x05agent\x18\x03 \x01(\tR\x05agent\x12\x17\n" +
	"\apeer_id\x18\x04 \x01(\tR\x06peerId\x12%\n" +
	"\x0econsensus_keys\x18\x05 \x03(\tR\rconsensusKeys\x12/\n" +
	"\x13consensus_addresses\x18\x06 \x03(\tR\x12consensusAddresses\x12\x1a\n" +
	"\bservices\x18\a \x01(\rR\bservices\x12&\n" +
	"\x0flast_block_hash\x18\b \x01(\tR\rlastBlockHash\x12\x16\n" +
	"\x06height\x18\t \x01(\rR\x06height\x12\x1b\n" +
	"\tlast_sent\x18\n" +
	" \x01(\x03R\blastSent\x12#\n" +
	"\rlast_received\x18\v \x01(\x03R\flastReceived\x12\x18\n" +
	"\aaddress\x18\f \x01(\tR\aaddress\x12\x1c\n" +
	"\tdirection\x18\r \x01(\tR\tdirection\x12\x1c\n" +
	"\tprotocols\x18\x0e \x03(\tR\tprotocols\x12%\n" +
	"\x0etotal_sessions\x18\x0f \x01(\x05R\rtotalSessions\x12-\n" +
	"\x12completed_sessions\x18\x10 \x01(\x05R\x11completedSessions\x123\n" +
	"\vmetric_info\x18\x11 \x01(\v2\x12.pactus.MetricInfoR\n" +
	"metricInfo\"\x96\x01\n" +
	"\x0eConnectionInfo\x12 \n" +
	"\vconnections\x18\x01 \x01(\x04R\vconnections\x12/\n" +
	"\x13inbound_connections\x18\x02 \x01(\x04R\x12inboundConnections\x121\n" +
	"\x14outbound_connections\x18\x03 \x01(\x04R\x13outboundConnections\"\x80\x04\n" +
	"\n" +
	"MetricInfo\x128\n" +
	"\rtotal_invalid\x18\x01 \x01(\v2\x13.pactus.CounterInfoR\ftotalInvalid\x122\n" +
	"\n" +
	"total_sent\x18\x02 \x01(\v2\x13.pactus.CounterInfoR\ttotalSent\x12:\n" +
	"\x0etotal_received\x18\x03 \x01(\v2\x13.pactus.CounterInfoR\rtotalReceived\x12F\n" +
	"\fmessage_sent\x18\x04 \x03(\v2#.pactus.MetricInfo.MessageSentEntryR\vmessageSent\x12R\n" +
	"\x10message_received\x18\x05 \x03(\v2'.pactus.MetricInfo.MessageReceivedEntryR\x0fmessageReceived\x1aS\n" +
	"\x10MessageSentEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12)\n" +
	"\x05value\x18\x02 \x01(\v2\x13.pactus.CounterInfoR\x05value:\x028\x01\x1aW\n" +
	"\x14MessageReceivedEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12)\n" +
	"\x05value\x18\x02 \x01(\v2\x13.pactus.CounterInfoR\x05value:\x028\x01\"=\n" +
	"\vCounterInfo\x12\x14\n" +
	"\x05bytes\x18\x01 \x01(\x04R\x05bytes\x12\x18\n" +
	"\abundles\x18\x02 \x01(\x04R\abundles2\xa2\x01\n" +
	"\aNetwork\x12O\n" +
	"\x0eGetNetworkInfo\x12\x1d.pactus.GetNetworkInfoRequest\x1a\x1e.pactus.GetNetworkInfoResponse\x12F\n" +
	"\vGetNodeInfo\x12\x1a.pactus.GetNodeInfoRequest\x1a\x1b.pactus.GetNodeInfoResponseB:\n" +
	"\x06pactusZ0github.com/pactus-project/pactus/www/grpc/pactusb\x06proto3"

var (
	file_network_proto_rawDescOnce sync.Once
	file_network_proto_rawDescData []byte
)

func file_network_proto_rawDescGZIP() []byte {
	file_network_proto_rawDescOnce.Do(func() {
		file_network_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_network_proto_rawDesc), len(file_network_proto_rawDesc)))
	})
	return file_network_proto_rawDescData
}

var file_network_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_network_proto_goTypes = []any{
	(*GetNetworkInfoRequest)(nil),  // 0: pactus.GetNetworkInfoRequest
	(*GetNetworkInfoResponse)(nil), // 1: pactus.GetNetworkInfoResponse
	(*GetNodeInfoRequest)(nil),     // 2: pactus.GetNodeInfoRequest
	(*GetNodeInfoResponse)(nil),    // 3: pactus.GetNodeInfoResponse
	(*ZMQPublisherInfo)(nil),       // 4: pactus.ZMQPublisherInfo
	(*PeerInfo)(nil),               // 5: pactus.PeerInfo
	(*ConnectionInfo)(nil),         // 6: pactus.ConnectionInfo
	(*MetricInfo)(nil),             // 7: pactus.MetricInfo
	(*CounterInfo)(nil),            // 8: pactus.CounterInfo
	nil,                            // 9: pactus.MetricInfo.MessageSentEntry
	nil,                            // 10: pactus.MetricInfo.MessageReceivedEntry
}
var file_network_proto_depIdxs = []int32{
	5,  // 0: pactus.GetNetworkInfoResponse.connected_peers:type_name -> pactus.PeerInfo
	7,  // 1: pactus.GetNetworkInfoResponse.metric_info:type_name -> pactus.MetricInfo
	6,  // 2: pactus.GetNodeInfoResponse.connection_info:type_name -> pactus.ConnectionInfo
	4,  // 3: pactus.GetNodeInfoResponse.zmq_publishers:type_name -> pactus.ZMQPublisherInfo
	7,  // 4: pactus.PeerInfo.metric_info:type_name -> pactus.MetricInfo
	8,  // 5: pactus.MetricInfo.total_invalid:type_name -> pactus.CounterInfo
	8,  // 6: pactus.MetricInfo.total_sent:type_name -> pactus.CounterInfo
	8,  // 7: pactus.MetricInfo.total_received:type_name -> pactus.CounterInfo
	9,  // 8: pactus.MetricInfo.message_sent:type_name -> pactus.MetricInfo.MessageSentEntry
	10, // 9: pactus.MetricInfo.message_received:type_name -> pactus.MetricInfo.MessageReceivedEntry
	8,  // 10: pactus.MetricInfo.MessageSentEntry.value:type_name -> pactus.CounterInfo
	8,  // 11: pactus.MetricInfo.MessageReceivedEntry.value:type_name -> pactus.CounterInfo
	0,  // 12: pactus.Network.GetNetworkInfo:input_type -> pactus.GetNetworkInfoRequest
	2,  // 13: pactus.Network.GetNodeInfo:input_type -> pactus.GetNodeInfoRequest
	1,  // 14: pactus.Network.GetNetworkInfo:output_type -> pactus.GetNetworkInfoResponse
	3,  // 15: pactus.Network.GetNodeInfo:output_type -> pactus.GetNodeInfoResponse
	14, // [14:16] is the sub-list for method output_type
	12, // [12:14] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_network_proto_init() }
func file_network_proto_init() {
	if File_network_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_network_proto_rawDesc), len(file_network_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_network_proto_goTypes,
		DependencyIndexes: file_network_proto_depIdxs,
		MessageInfos:      file_network_proto_msgTypes,
	}.Build()
	File_network_proto = out.File
	file_network_proto_goTypes = nil
	file_network_proto_depIdxs = nil
}
