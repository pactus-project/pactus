// source: network.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.pactus.ConnectionInfo', null, global);
goog.exportSymbol('proto.pactus.CounterInfo', null, global);
goog.exportSymbol('proto.pactus.GetNetworkInfoRequest', null, global);
goog.exportSymbol('proto.pactus.GetNetworkInfoResponse', null, global);
goog.exportSymbol('proto.pactus.GetNodeInfoRequest', null, global);
goog.exportSymbol('proto.pactus.GetNodeInfoResponse', null, global);
goog.exportSymbol('proto.pactus.MetricInfo', null, global);
goog.exportSymbol('proto.pactus.PeerInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pactus.GetNetworkInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pactus.GetNetworkInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pactus.GetNetworkInfoRequest.displayName = 'proto.pactus.GetNetworkInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pactus.GetNetworkInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pactus.GetNetworkInfoResponse.repeatedFields_, null);
};
goog.inherits(proto.pactus.GetNetworkInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pactus.GetNetworkInfoResponse.displayName = 'proto.pactus.GetNetworkInfoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pactus.GetNodeInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pactus.GetNodeInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pactus.GetNodeInfoRequest.displayName = 'proto.pactus.GetNodeInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pactus.GetNodeInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pactus.GetNodeInfoResponse.repeatedFields_, null);
};
goog.inherits(proto.pactus.GetNodeInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pactus.GetNodeInfoResponse.displayName = 'proto.pactus.GetNodeInfoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pactus.PeerInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pactus.PeerInfo.repeatedFields_, null);
};
goog.inherits(proto.pactus.PeerInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pactus.PeerInfo.displayName = 'proto.pactus.PeerInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pactus.ConnectionInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pactus.ConnectionInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pactus.ConnectionInfo.displayName = 'proto.pactus.ConnectionInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pactus.MetricInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pactus.MetricInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pactus.MetricInfo.displayName = 'proto.pactus.MetricInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pactus.CounterInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pactus.CounterInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pactus.CounterInfo.displayName = 'proto.pactus.CounterInfo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pactus.GetNetworkInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pactus.GetNetworkInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pactus.GetNetworkInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pactus.GetNetworkInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    onlyConnected: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pactus.GetNetworkInfoRequest}
 */
proto.pactus.GetNetworkInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pactus.GetNetworkInfoRequest;
  return proto.pactus.GetNetworkInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pactus.GetNetworkInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pactus.GetNetworkInfoRequest}
 */
proto.pactus.GetNetworkInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOnlyConnected(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pactus.GetNetworkInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pactus.GetNetworkInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pactus.GetNetworkInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pactus.GetNetworkInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOnlyConnected();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool only_connected = 1;
 * @return {boolean}
 */
proto.pactus.GetNetworkInfoRequest.prototype.getOnlyConnected = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.pactus.GetNetworkInfoRequest} returns this
 */
proto.pactus.GetNetworkInfoRequest.prototype.setOnlyConnected = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pactus.GetNetworkInfoResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pactus.GetNetworkInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pactus.GetNetworkInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pactus.GetNetworkInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pactus.GetNetworkInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    networkName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    connectedPeersCount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    connectedPeersList: jspb.Message.toObjectList(msg.getConnectedPeersList(),
    proto.pactus.PeerInfo.toObject, includeInstance),
    metricInfo: (f = msg.getMetricInfo()) && proto.pactus.MetricInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pactus.GetNetworkInfoResponse}
 */
proto.pactus.GetNetworkInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pactus.GetNetworkInfoResponse;
  return proto.pactus.GetNetworkInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pactus.GetNetworkInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pactus.GetNetworkInfoResponse}
 */
proto.pactus.GetNetworkInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetworkName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setConnectedPeersCount(value);
      break;
    case 3:
      var value = new proto.pactus.PeerInfo;
      reader.readMessage(value,proto.pactus.PeerInfo.deserializeBinaryFromReader);
      msg.addConnectedPeers(value);
      break;
    case 4:
      var value = new proto.pactus.MetricInfo;
      reader.readMessage(value,proto.pactus.MetricInfo.deserializeBinaryFromReader);
      msg.setMetricInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pactus.GetNetworkInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pactus.GetNetworkInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pactus.GetNetworkInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pactus.GetNetworkInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNetworkName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConnectedPeersCount();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getConnectedPeersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.pactus.PeerInfo.serializeBinaryToWriter
    );
  }
  f = message.getMetricInfo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.pactus.MetricInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string network_name = 1;
 * @return {string}
 */
proto.pactus.GetNetworkInfoResponse.prototype.getNetworkName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pactus.GetNetworkInfoResponse} returns this
 */
proto.pactus.GetNetworkInfoResponse.prototype.setNetworkName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 connected_peers_count = 2;
 * @return {number}
 */
proto.pactus.GetNetworkInfoResponse.prototype.getConnectedPeersCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pactus.GetNetworkInfoResponse} returns this
 */
proto.pactus.GetNetworkInfoResponse.prototype.setConnectedPeersCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated PeerInfo connected_peers = 3;
 * @return {!Array<!proto.pactus.PeerInfo>}
 */
proto.pactus.GetNetworkInfoResponse.prototype.getConnectedPeersList = function() {
  return /** @type{!Array<!proto.pactus.PeerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pactus.PeerInfo, 3));
};


/**
 * @param {!Array<!proto.pactus.PeerInfo>} value
 * @return {!proto.pactus.GetNetworkInfoResponse} returns this
*/
proto.pactus.GetNetworkInfoResponse.prototype.setConnectedPeersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.pactus.PeerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pactus.PeerInfo}
 */
proto.pactus.GetNetworkInfoResponse.prototype.addConnectedPeers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.pactus.PeerInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pactus.GetNetworkInfoResponse} returns this
 */
proto.pactus.GetNetworkInfoResponse.prototype.clearConnectedPeersList = function() {
  return this.setConnectedPeersList([]);
};


/**
 * optional MetricInfo metric_info = 4;
 * @return {?proto.pactus.MetricInfo}
 */
proto.pactus.GetNetworkInfoResponse.prototype.getMetricInfo = function() {
  return /** @type{?proto.pactus.MetricInfo} */ (
    jspb.Message.getWrapperField(this, proto.pactus.MetricInfo, 4));
};


/**
 * @param {?proto.pactus.MetricInfo|undefined} value
 * @return {!proto.pactus.GetNetworkInfoResponse} returns this
*/
proto.pactus.GetNetworkInfoResponse.prototype.setMetricInfo = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pactus.GetNetworkInfoResponse} returns this
 */
proto.pactus.GetNetworkInfoResponse.prototype.clearMetricInfo = function() {
  return this.setMetricInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pactus.GetNetworkInfoResponse.prototype.hasMetricInfo = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pactus.GetNodeInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pactus.GetNodeInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pactus.GetNodeInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pactus.GetNodeInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pactus.GetNodeInfoRequest}
 */
proto.pactus.GetNodeInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pactus.GetNodeInfoRequest;
  return proto.pactus.GetNodeInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pactus.GetNodeInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pactus.GetNodeInfoRequest}
 */
proto.pactus.GetNodeInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pactus.GetNodeInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pactus.GetNodeInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pactus.GetNodeInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pactus.GetNodeInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pactus.GetNodeInfoResponse.repeatedFields_ = [8,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pactus.GetNodeInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pactus.GetNodeInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pactus.GetNodeInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pactus.GetNodeInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    moniker: jspb.Message.getFieldWithDefault(msg, 1, ""),
    agent: jspb.Message.getFieldWithDefault(msg, 2, ""),
    peerId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    startedAt: jspb.Message.getFieldWithDefault(msg, 4, 0),
    reachability: jspb.Message.getFieldWithDefault(msg, 5, ""),
    services: jspb.Message.getFieldWithDefault(msg, 6, 0),
    servicesNames: jspb.Message.getFieldWithDefault(msg, 7, ""),
    localAddrsList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,
    protocolsList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f,
    clockOffset: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.0),
    connectionInfo: (f = msg.getConnectionInfo()) && proto.pactus.ConnectionInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pactus.GetNodeInfoResponse}
 */
proto.pactus.GetNodeInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pactus.GetNodeInfoResponse;
  return proto.pactus.GetNodeInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pactus.GetNodeInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pactus.GetNodeInfoResponse}
 */
proto.pactus.GetNodeInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMoniker(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAgent(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeerId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStartedAt(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setReachability(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setServices(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setServicesNames(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addLocalAddrs(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.addProtocols(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setClockOffset(value);
      break;
    case 14:
      var value = new proto.pactus.ConnectionInfo;
      reader.readMessage(value,proto.pactus.ConnectionInfo.deserializeBinaryFromReader);
      msg.setConnectionInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pactus.GetNodeInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pactus.GetNodeInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pactus.GetNodeInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pactus.GetNodeInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMoniker();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAgent();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPeerId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStartedAt();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getReachability();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getServices();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getServicesNames();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getLocalAddrsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
  f = message.getProtocolsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      9,
      f
    );
  }
  f = message.getClockOffset();
  if (f !== 0.0) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = message.getConnectionInfo();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.pactus.ConnectionInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string moniker = 1;
 * @return {string}
 */
proto.pactus.GetNodeInfoResponse.prototype.getMoniker = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pactus.GetNodeInfoResponse} returns this
 */
proto.pactus.GetNodeInfoResponse.prototype.setMoniker = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string agent = 2;
 * @return {string}
 */
proto.pactus.GetNodeInfoResponse.prototype.getAgent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pactus.GetNodeInfoResponse} returns this
 */
proto.pactus.GetNodeInfoResponse.prototype.setAgent = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string peer_id = 3;
 * @return {string}
 */
proto.pactus.GetNodeInfoResponse.prototype.getPeerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pactus.GetNodeInfoResponse} returns this
 */
proto.pactus.GetNodeInfoResponse.prototype.setPeerId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 started_at = 4;
 * @return {number}
 */
proto.pactus.GetNodeInfoResponse.prototype.getStartedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.pactus.GetNodeInfoResponse} returns this
 */
proto.pactus.GetNodeInfoResponse.prototype.setStartedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string reachability = 5;
 * @return {string}
 */
proto.pactus.GetNodeInfoResponse.prototype.getReachability = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.pactus.GetNodeInfoResponse} returns this
 */
proto.pactus.GetNodeInfoResponse.prototype.setReachability = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 services = 6;
 * @return {number}
 */
proto.pactus.GetNodeInfoResponse.prototype.getServices = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.pactus.GetNodeInfoResponse} returns this
 */
proto.pactus.GetNodeInfoResponse.prototype.setServices = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string services_names = 7;
 * @return {string}
 */
proto.pactus.GetNodeInfoResponse.prototype.getServicesNames = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.pactus.GetNodeInfoResponse} returns this
 */
proto.pactus.GetNodeInfoResponse.prototype.setServicesNames = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * repeated string local_addrs = 8;
 * @return {!Array<string>}
 */
proto.pactus.GetNodeInfoResponse.prototype.getLocalAddrsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.pactus.GetNodeInfoResponse} returns this
 */
proto.pactus.GetNodeInfoResponse.prototype.setLocalAddrsList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.pactus.GetNodeInfoResponse} returns this
 */
proto.pactus.GetNodeInfoResponse.prototype.addLocalAddrs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pactus.GetNodeInfoResponse} returns this
 */
proto.pactus.GetNodeInfoResponse.prototype.clearLocalAddrsList = function() {
  return this.setLocalAddrsList([]);
};


/**
 * repeated string protocols = 9;
 * @return {!Array<string>}
 */
proto.pactus.GetNodeInfoResponse.prototype.getProtocolsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.pactus.GetNodeInfoResponse} returns this
 */
proto.pactus.GetNodeInfoResponse.prototype.setProtocolsList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.pactus.GetNodeInfoResponse} returns this
 */
proto.pactus.GetNodeInfoResponse.prototype.addProtocols = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pactus.GetNodeInfoResponse} returns this
 */
proto.pactus.GetNodeInfoResponse.prototype.clearProtocolsList = function() {
  return this.setProtocolsList([]);
};


/**
 * optional double clock_offset = 13;
 * @return {number}
 */
proto.pactus.GetNodeInfoResponse.prototype.getClockOffset = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.pactus.GetNodeInfoResponse} returns this
 */
proto.pactus.GetNodeInfoResponse.prototype.setClockOffset = function(value) {
  return jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional ConnectionInfo connection_info = 14;
 * @return {?proto.pactus.ConnectionInfo}
 */
proto.pactus.GetNodeInfoResponse.prototype.getConnectionInfo = function() {
  return /** @type{?proto.pactus.ConnectionInfo} */ (
    jspb.Message.getWrapperField(this, proto.pactus.ConnectionInfo, 14));
};


/**
 * @param {?proto.pactus.ConnectionInfo|undefined} value
 * @return {!proto.pactus.GetNodeInfoResponse} returns this
*/
proto.pactus.GetNodeInfoResponse.prototype.setConnectionInfo = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pactus.GetNodeInfoResponse} returns this
 */
proto.pactus.GetNodeInfoResponse.prototype.clearConnectionInfo = function() {
  return this.setConnectionInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pactus.GetNodeInfoResponse.prototype.hasConnectionInfo = function() {
  return jspb.Message.getField(this, 14) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pactus.PeerInfo.repeatedFields_ = [5,6,14];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pactus.PeerInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pactus.PeerInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pactus.PeerInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pactus.PeerInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    moniker: jspb.Message.getFieldWithDefault(msg, 2, ""),
    agent: jspb.Message.getFieldWithDefault(msg, 3, ""),
    peerId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    consensusKeysList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    consensusAddressesList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    services: jspb.Message.getFieldWithDefault(msg, 7, 0),
    lastBlockHash: jspb.Message.getFieldWithDefault(msg, 8, ""),
    height: jspb.Message.getFieldWithDefault(msg, 9, 0),
    lastSent: jspb.Message.getFieldWithDefault(msg, 10, 0),
    lastReceived: jspb.Message.getFieldWithDefault(msg, 11, 0),
    address: jspb.Message.getFieldWithDefault(msg, 12, ""),
    direction: jspb.Message.getFieldWithDefault(msg, 13, ""),
    protocolsList: (f = jspb.Message.getRepeatedField(msg, 14)) == null ? undefined : f,
    totalSessions: jspb.Message.getFieldWithDefault(msg, 15, 0),
    completedSessions: jspb.Message.getFieldWithDefault(msg, 16, 0),
    metricInfo: (f = msg.getMetricInfo()) && proto.pactus.MetricInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pactus.PeerInfo}
 */
proto.pactus.PeerInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pactus.PeerInfo;
  return proto.pactus.PeerInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pactus.PeerInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pactus.PeerInfo}
 */
proto.pactus.PeerInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMoniker(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAgent(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeerId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addConsensusKeys(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addConsensusAddresses(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setServices(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastBlockHash(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastSent(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastReceived(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setDirection(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.addProtocols(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalSessions(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCompletedSessions(value);
      break;
    case 17:
      var value = new proto.pactus.MetricInfo;
      reader.readMessage(value,proto.pactus.MetricInfo.deserializeBinaryFromReader);
      msg.setMetricInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pactus.PeerInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pactus.PeerInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pactus.PeerInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pactus.PeerInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMoniker();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAgent();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPeerId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getConsensusKeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getConsensusAddressesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getServices();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getLastBlockHash();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getLastSent();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getLastReceived();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getDirection();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getProtocolsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      14,
      f
    );
  }
  f = message.getTotalSessions();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getCompletedSessions();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getMetricInfo();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.pactus.MetricInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 status = 1;
 * @return {number}
 */
proto.pactus.PeerInfo.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string moniker = 2;
 * @return {string}
 */
proto.pactus.PeerInfo.prototype.getMoniker = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.setMoniker = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string agent = 3;
 * @return {string}
 */
proto.pactus.PeerInfo.prototype.getAgent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.setAgent = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string peer_id = 4;
 * @return {string}
 */
proto.pactus.PeerInfo.prototype.getPeerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.setPeerId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated string consensus_keys = 5;
 * @return {!Array<string>}
 */
proto.pactus.PeerInfo.prototype.getConsensusKeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.setConsensusKeysList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.addConsensusKeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.clearConsensusKeysList = function() {
  return this.setConsensusKeysList([]);
};


/**
 * repeated string consensus_addresses = 6;
 * @return {!Array<string>}
 */
proto.pactus.PeerInfo.prototype.getConsensusAddressesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.setConsensusAddressesList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.addConsensusAddresses = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.clearConsensusAddressesList = function() {
  return this.setConsensusAddressesList([]);
};


/**
 * optional uint32 services = 7;
 * @return {number}
 */
proto.pactus.PeerInfo.prototype.getServices = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.setServices = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string last_block_hash = 8;
 * @return {string}
 */
proto.pactus.PeerInfo.prototype.getLastBlockHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.setLastBlockHash = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional uint32 height = 9;
 * @return {number}
 */
proto.pactus.PeerInfo.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int64 last_sent = 10;
 * @return {number}
 */
proto.pactus.PeerInfo.prototype.getLastSent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.setLastSent = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int64 last_received = 11;
 * @return {number}
 */
proto.pactus.PeerInfo.prototype.getLastReceived = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.setLastReceived = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional string address = 12;
 * @return {string}
 */
proto.pactus.PeerInfo.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string direction = 13;
 * @return {string}
 */
proto.pactus.PeerInfo.prototype.getDirection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.setDirection = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * repeated string protocols = 14;
 * @return {!Array<string>}
 */
proto.pactus.PeerInfo.prototype.getProtocolsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 14));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.setProtocolsList = function(value) {
  return jspb.Message.setField(this, 14, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.addProtocols = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 14, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.clearProtocolsList = function() {
  return this.setProtocolsList([]);
};


/**
 * optional int32 total_sessions = 15;
 * @return {number}
 */
proto.pactus.PeerInfo.prototype.getTotalSessions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.setTotalSessions = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int32 completed_sessions = 16;
 * @return {number}
 */
proto.pactus.PeerInfo.prototype.getCompletedSessions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.setCompletedSessions = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional MetricInfo metric_info = 17;
 * @return {?proto.pactus.MetricInfo}
 */
proto.pactus.PeerInfo.prototype.getMetricInfo = function() {
  return /** @type{?proto.pactus.MetricInfo} */ (
    jspb.Message.getWrapperField(this, proto.pactus.MetricInfo, 17));
};


/**
 * @param {?proto.pactus.MetricInfo|undefined} value
 * @return {!proto.pactus.PeerInfo} returns this
*/
proto.pactus.PeerInfo.prototype.setMetricInfo = function(value) {
  return jspb.Message.setWrapperField(this, 17, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.clearMetricInfo = function() {
  return this.setMetricInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pactus.PeerInfo.prototype.hasMetricInfo = function() {
  return jspb.Message.getField(this, 17) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pactus.ConnectionInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pactus.ConnectionInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pactus.ConnectionInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pactus.ConnectionInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    connections: jspb.Message.getFieldWithDefault(msg, 1, 0),
    inboundConnections: jspb.Message.getFieldWithDefault(msg, 2, 0),
    outboundConnections: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pactus.ConnectionInfo}
 */
proto.pactus.ConnectionInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pactus.ConnectionInfo;
  return proto.pactus.ConnectionInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pactus.ConnectionInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pactus.ConnectionInfo}
 */
proto.pactus.ConnectionInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setConnections(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setInboundConnections(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOutboundConnections(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pactus.ConnectionInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pactus.ConnectionInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pactus.ConnectionInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pactus.ConnectionInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnections();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getInboundConnections();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getOutboundConnections();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional uint64 connections = 1;
 * @return {number}
 */
proto.pactus.ConnectionInfo.prototype.getConnections = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pactus.ConnectionInfo} returns this
 */
proto.pactus.ConnectionInfo.prototype.setConnections = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 inbound_connections = 2;
 * @return {number}
 */
proto.pactus.ConnectionInfo.prototype.getInboundConnections = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pactus.ConnectionInfo} returns this
 */
proto.pactus.ConnectionInfo.prototype.setInboundConnections = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 outbound_connections = 3;
 * @return {number}
 */
proto.pactus.ConnectionInfo.prototype.getOutboundConnections = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.pactus.ConnectionInfo} returns this
 */
proto.pactus.ConnectionInfo.prototype.setOutboundConnections = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pactus.MetricInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pactus.MetricInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pactus.MetricInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pactus.MetricInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalinvalid: (f = msg.getTotalinvalid()) && proto.pactus.CounterInfo.toObject(includeInstance, f),
    totalsent: (f = msg.getTotalsent()) && proto.pactus.CounterInfo.toObject(includeInstance, f),
    totalreceived: (f = msg.getTotalreceived()) && proto.pactus.CounterInfo.toObject(includeInstance, f),
    messagesentMap: (f = msg.getMessagesentMap()) ? f.toObject(includeInstance, proto.pactus.CounterInfo.toObject) : [],
    messagereceivedMap: (f = msg.getMessagereceivedMap()) ? f.toObject(includeInstance, proto.pactus.CounterInfo.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pactus.MetricInfo}
 */
proto.pactus.MetricInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pactus.MetricInfo;
  return proto.pactus.MetricInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pactus.MetricInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pactus.MetricInfo}
 */
proto.pactus.MetricInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pactus.CounterInfo;
      reader.readMessage(value,proto.pactus.CounterInfo.deserializeBinaryFromReader);
      msg.setTotalinvalid(value);
      break;
    case 2:
      var value = new proto.pactus.CounterInfo;
      reader.readMessage(value,proto.pactus.CounterInfo.deserializeBinaryFromReader);
      msg.setTotalsent(value);
      break;
    case 3:
      var value = new proto.pactus.CounterInfo;
      reader.readMessage(value,proto.pactus.CounterInfo.deserializeBinaryFromReader);
      msg.setTotalreceived(value);
      break;
    case 4:
      var value = msg.getMessagesentMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.pactus.CounterInfo.deserializeBinaryFromReader, 0, new proto.pactus.CounterInfo());
         });
      break;
    case 5:
      var value = msg.getMessagereceivedMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.pactus.CounterInfo.deserializeBinaryFromReader, 0, new proto.pactus.CounterInfo());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pactus.MetricInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pactus.MetricInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pactus.MetricInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pactus.MetricInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalinvalid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pactus.CounterInfo.serializeBinaryToWriter
    );
  }
  f = message.getTotalsent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pactus.CounterInfo.serializeBinaryToWriter
    );
  }
  f = message.getTotalreceived();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pactus.CounterInfo.serializeBinaryToWriter
    );
  }
  f = message.getMessagesentMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.pactus.CounterInfo.serializeBinaryToWriter);
  }
  f = message.getMessagereceivedMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.pactus.CounterInfo.serializeBinaryToWriter);
  }
};


/**
 * optional CounterInfo TotalInvalid = 1;
 * @return {?proto.pactus.CounterInfo}
 */
proto.pactus.MetricInfo.prototype.getTotalinvalid = function() {
  return /** @type{?proto.pactus.CounterInfo} */ (
    jspb.Message.getWrapperField(this, proto.pactus.CounterInfo, 1));
};


/**
 * @param {?proto.pactus.CounterInfo|undefined} value
 * @return {!proto.pactus.MetricInfo} returns this
*/
proto.pactus.MetricInfo.prototype.setTotalinvalid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pactus.MetricInfo} returns this
 */
proto.pactus.MetricInfo.prototype.clearTotalinvalid = function() {
  return this.setTotalinvalid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pactus.MetricInfo.prototype.hasTotalinvalid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CounterInfo TotalSent = 2;
 * @return {?proto.pactus.CounterInfo}
 */
proto.pactus.MetricInfo.prototype.getTotalsent = function() {
  return /** @type{?proto.pactus.CounterInfo} */ (
    jspb.Message.getWrapperField(this, proto.pactus.CounterInfo, 2));
};


/**
 * @param {?proto.pactus.CounterInfo|undefined} value
 * @return {!proto.pactus.MetricInfo} returns this
*/
proto.pactus.MetricInfo.prototype.setTotalsent = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pactus.MetricInfo} returns this
 */
proto.pactus.MetricInfo.prototype.clearTotalsent = function() {
  return this.setTotalsent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pactus.MetricInfo.prototype.hasTotalsent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CounterInfo TotalReceived = 3;
 * @return {?proto.pactus.CounterInfo}
 */
proto.pactus.MetricInfo.prototype.getTotalreceived = function() {
  return /** @type{?proto.pactus.CounterInfo} */ (
    jspb.Message.getWrapperField(this, proto.pactus.CounterInfo, 3));
};


/**
 * @param {?proto.pactus.CounterInfo|undefined} value
 * @return {!proto.pactus.MetricInfo} returns this
*/
proto.pactus.MetricInfo.prototype.setTotalreceived = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pactus.MetricInfo} returns this
 */
proto.pactus.MetricInfo.prototype.clearTotalreceived = function() {
  return this.setTotalreceived(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pactus.MetricInfo.prototype.hasTotalreceived = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * map<int32, CounterInfo> MessageSent = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.pactus.CounterInfo>}
 */
proto.pactus.MetricInfo.prototype.getMessagesentMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.pactus.CounterInfo>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.pactus.CounterInfo));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.pactus.MetricInfo} returns this
 */
proto.pactus.MetricInfo.prototype.clearMessagesentMap = function() {
  this.getMessagesentMap().clear();
  return this;
};


/**
 * map<int32, CounterInfo> MessageReceived = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.pactus.CounterInfo>}
 */
proto.pactus.MetricInfo.prototype.getMessagereceivedMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.pactus.CounterInfo>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      proto.pactus.CounterInfo));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.pactus.MetricInfo} returns this
 */
proto.pactus.MetricInfo.prototype.clearMessagereceivedMap = function() {
  this.getMessagereceivedMap().clear();
  return this;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pactus.CounterInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pactus.CounterInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pactus.CounterInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pactus.CounterInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    bytes: jspb.Message.getFieldWithDefault(msg, 1, 0),
    bundles: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pactus.CounterInfo}
 */
proto.pactus.CounterInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pactus.CounterInfo;
  return proto.pactus.CounterInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pactus.CounterInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pactus.CounterInfo}
 */
proto.pactus.CounterInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBytes(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBundles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pactus.CounterInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pactus.CounterInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pactus.CounterInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pactus.CounterInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBytes();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getBundles();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 Bytes = 1;
 * @return {number}
 */
proto.pactus.CounterInfo.prototype.getBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pactus.CounterInfo} returns this
 */
proto.pactus.CounterInfo.prototype.setBytes = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 Bundles = 2;
 * @return {number}
 */
proto.pactus.CounterInfo.prototype.getBundles = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pactus.CounterInfo} returns this
 */
proto.pactus.CounterInfo.prototype.setBundles = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


goog.object.extend(exports, proto.pactus);
