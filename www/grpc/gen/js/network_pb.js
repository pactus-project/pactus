// source: network.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.pactus.GetNetworkInfoRequest', null, global);
goog.exportSymbol('proto.pactus.GetNetworkInfoResponse', null, global);
goog.exportSymbol('proto.pactus.GetNodeInfoRequest', null, global);
goog.exportSymbol('proto.pactus.GetNodeInfoResponse', null, global);
goog.exportSymbol('proto.pactus.PeerInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pactus.GetNetworkInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pactus.GetNetworkInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pactus.GetNetworkInfoRequest.displayName = 'proto.pactus.GetNetworkInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pactus.GetNetworkInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pactus.GetNetworkInfoResponse.repeatedFields_, null);
};
goog.inherits(proto.pactus.GetNetworkInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pactus.GetNetworkInfoResponse.displayName = 'proto.pactus.GetNetworkInfoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pactus.GetNodeInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pactus.GetNodeInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pactus.GetNodeInfoRequest.displayName = 'proto.pactus.GetNodeInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pactus.GetNodeInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pactus.GetNodeInfoResponse.repeatedFields_, null);
};
goog.inherits(proto.pactus.GetNodeInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pactus.GetNodeInfoResponse.displayName = 'proto.pactus.GetNodeInfoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pactus.PeerInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pactus.PeerInfo.repeatedFields_, null);
};
goog.inherits(proto.pactus.PeerInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pactus.PeerInfo.displayName = 'proto.pactus.PeerInfo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pactus.GetNetworkInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pactus.GetNetworkInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pactus.GetNetworkInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pactus.GetNetworkInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pactus.GetNetworkInfoRequest}
 */
proto.pactus.GetNetworkInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pactus.GetNetworkInfoRequest;
  return proto.pactus.GetNetworkInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pactus.GetNetworkInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pactus.GetNetworkInfoRequest}
 */
proto.pactus.GetNetworkInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pactus.GetNetworkInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pactus.GetNetworkInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pactus.GetNetworkInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pactus.GetNetworkInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pactus.GetNetworkInfoResponse.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pactus.GetNetworkInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pactus.GetNetworkInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pactus.GetNetworkInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pactus.GetNetworkInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    networkName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    totalSentBytes: jspb.Message.getFieldWithDefault(msg, 2, 0),
    totalReceivedBytes: jspb.Message.getFieldWithDefault(msg, 3, 0),
    connectedPeersCount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    connectedPeersList: jspb.Message.toObjectList(msg.getConnectedPeersList(),
    proto.pactus.PeerInfo.toObject, includeInstance),
    sentBytesMap: (f = msg.getSentBytesMap()) ? f.toObject(includeInstance, undefined) : [],
    receivedBytesMap: (f = msg.getReceivedBytesMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pactus.GetNetworkInfoResponse}
 */
proto.pactus.GetNetworkInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pactus.GetNetworkInfoResponse;
  return proto.pactus.GetNetworkInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pactus.GetNetworkInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pactus.GetNetworkInfoResponse}
 */
proto.pactus.GetNetworkInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetworkName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalSentBytes(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalReceivedBytes(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setConnectedPeersCount(value);
      break;
    case 5:
      var value = new proto.pactus.PeerInfo;
      reader.readMessage(value,proto.pactus.PeerInfo.deserializeBinaryFromReader);
      msg.addConnectedPeers(value);
      break;
    case 6:
      var value = msg.getSentBytesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readUint64, null, 0, 0);
         });
      break;
    case 7:
      var value = msg.getReceivedBytesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readUint64, null, 0, 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pactus.GetNetworkInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pactus.GetNetworkInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pactus.GetNetworkInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pactus.GetNetworkInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNetworkName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTotalSentBytes();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getTotalReceivedBytes();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getConnectedPeersCount();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getConnectedPeersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.pactus.PeerInfo.serializeBinaryToWriter
    );
  }
  f = message.getSentBytesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeUint64);
  }
  f = message.getReceivedBytesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeUint64);
  }
};


/**
 * optional string network_name = 1;
 * @return {string}
 */
proto.pactus.GetNetworkInfoResponse.prototype.getNetworkName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pactus.GetNetworkInfoResponse} returns this
 */
proto.pactus.GetNetworkInfoResponse.prototype.setNetworkName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 total_sent_bytes = 2;
 * @return {number}
 */
proto.pactus.GetNetworkInfoResponse.prototype.getTotalSentBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.pactus.GetNetworkInfoResponse} returns this
 */
proto.pactus.GetNetworkInfoResponse.prototype.setTotalSentBytes = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 total_received_bytes = 3;
 * @return {number}
 */
proto.pactus.GetNetworkInfoResponse.prototype.getTotalReceivedBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.pactus.GetNetworkInfoResponse} returns this
 */
proto.pactus.GetNetworkInfoResponse.prototype.setTotalReceivedBytes = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 connected_peers_count = 4;
 * @return {number}
 */
proto.pactus.GetNetworkInfoResponse.prototype.getConnectedPeersCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.pactus.GetNetworkInfoResponse} returns this
 */
proto.pactus.GetNetworkInfoResponse.prototype.setConnectedPeersCount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated PeerInfo connected_peers = 5;
 * @return {!Array<!proto.pactus.PeerInfo>}
 */
proto.pactus.GetNetworkInfoResponse.prototype.getConnectedPeersList = function() {
  return /** @type{!Array<!proto.pactus.PeerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pactus.PeerInfo, 5));
};


/**
 * @param {!Array<!proto.pactus.PeerInfo>} value
 * @return {!proto.pactus.GetNetworkInfoResponse} returns this
*/
proto.pactus.GetNetworkInfoResponse.prototype.setConnectedPeersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.pactus.PeerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pactus.PeerInfo}
 */
proto.pactus.GetNetworkInfoResponse.prototype.addConnectedPeers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.pactus.PeerInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pactus.GetNetworkInfoResponse} returns this
 */
proto.pactus.GetNetworkInfoResponse.prototype.clearConnectedPeersList = function() {
  return this.setConnectedPeersList([]);
};


/**
 * map<uint32, uint64> sent_bytes = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.pactus.GetNetworkInfoResponse.prototype.getSentBytesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.pactus.GetNetworkInfoResponse} returns this
 */
proto.pactus.GetNetworkInfoResponse.prototype.clearSentBytesMap = function() {
  this.getSentBytesMap().clear();
  return this;
};


/**
 * map<uint32, uint64> received_bytes = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.pactus.GetNetworkInfoResponse.prototype.getReceivedBytesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.pactus.GetNetworkInfoResponse} returns this
 */
proto.pactus.GetNetworkInfoResponse.prototype.clearReceivedBytesMap = function() {
  this.getReceivedBytesMap().clear();
  return this;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pactus.GetNodeInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pactus.GetNodeInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pactus.GetNodeInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pactus.GetNodeInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pactus.GetNodeInfoRequest}
 */
proto.pactus.GetNodeInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pactus.GetNodeInfoRequest;
  return proto.pactus.GetNodeInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pactus.GetNodeInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pactus.GetNodeInfoRequest}
 */
proto.pactus.GetNodeInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pactus.GetNodeInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pactus.GetNodeInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pactus.GetNodeInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pactus.GetNodeInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pactus.GetNodeInfoResponse.repeatedFields_ = [6,7,8,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pactus.GetNodeInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pactus.GetNodeInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pactus.GetNodeInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pactus.GetNodeInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    moniker: jspb.Message.getFieldWithDefault(msg, 1, ""),
    agent: jspb.Message.getFieldWithDefault(msg, 2, ""),
    peerId: msg.getPeerId_asB64(),
    startedAt: jspb.Message.getFieldWithDefault(msg, 4, 0),
    reachability: jspb.Message.getFieldWithDefault(msg, 5, ""),
    servicesList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    servicesNamesList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    addrsList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,
    protocolsList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pactus.GetNodeInfoResponse}
 */
proto.pactus.GetNodeInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pactus.GetNodeInfoResponse;
  return proto.pactus.GetNodeInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pactus.GetNodeInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pactus.GetNodeInfoResponse}
 */
proto.pactus.GetNodeInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMoniker(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAgent(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPeerId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStartedAt(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setReachability(value);
      break;
    case 6:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addServices(values[i]);
      }
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addServicesNames(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addAddrs(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.addProtocols(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pactus.GetNodeInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pactus.GetNodeInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pactus.GetNodeInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pactus.GetNodeInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMoniker();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAgent();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPeerId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getStartedAt();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getReachability();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getServicesList();
  if (f.length > 0) {
    writer.writePackedInt32(
      6,
      f
    );
  }
  f = message.getServicesNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getAddrsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
  f = message.getProtocolsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      9,
      f
    );
  }
};


/**
 * optional string moniker = 1;
 * @return {string}
 */
proto.pactus.GetNodeInfoResponse.prototype.getMoniker = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pactus.GetNodeInfoResponse} returns this
 */
proto.pactus.GetNodeInfoResponse.prototype.setMoniker = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string agent = 2;
 * @return {string}
 */
proto.pactus.GetNodeInfoResponse.prototype.getAgent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pactus.GetNodeInfoResponse} returns this
 */
proto.pactus.GetNodeInfoResponse.prototype.setAgent = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes peer_id = 3;
 * @return {!(string|Uint8Array)}
 */
proto.pactus.GetNodeInfoResponse.prototype.getPeerId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes peer_id = 3;
 * This is a type-conversion wrapper around `getPeerId()`
 * @return {string}
 */
proto.pactus.GetNodeInfoResponse.prototype.getPeerId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPeerId()));
};


/**
 * optional bytes peer_id = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPeerId()`
 * @return {!Uint8Array}
 */
proto.pactus.GetNodeInfoResponse.prototype.getPeerId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPeerId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pactus.GetNodeInfoResponse} returns this
 */
proto.pactus.GetNodeInfoResponse.prototype.setPeerId = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional uint64 started_at = 4;
 * @return {number}
 */
proto.pactus.GetNodeInfoResponse.prototype.getStartedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.pactus.GetNodeInfoResponse} returns this
 */
proto.pactus.GetNodeInfoResponse.prototype.setStartedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string reachability = 5;
 * @return {string}
 */
proto.pactus.GetNodeInfoResponse.prototype.getReachability = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.pactus.GetNodeInfoResponse} returns this
 */
proto.pactus.GetNodeInfoResponse.prototype.setReachability = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated int32 services = 6;
 * @return {!Array<number>}
 */
proto.pactus.GetNodeInfoResponse.prototype.getServicesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.pactus.GetNodeInfoResponse} returns this
 */
proto.pactus.GetNodeInfoResponse.prototype.setServicesList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.pactus.GetNodeInfoResponse} returns this
 */
proto.pactus.GetNodeInfoResponse.prototype.addServices = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pactus.GetNodeInfoResponse} returns this
 */
proto.pactus.GetNodeInfoResponse.prototype.clearServicesList = function() {
  return this.setServicesList([]);
};


/**
 * repeated string services_names = 7;
 * @return {!Array<string>}
 */
proto.pactus.GetNodeInfoResponse.prototype.getServicesNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.pactus.GetNodeInfoResponse} returns this
 */
proto.pactus.GetNodeInfoResponse.prototype.setServicesNamesList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.pactus.GetNodeInfoResponse} returns this
 */
proto.pactus.GetNodeInfoResponse.prototype.addServicesNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pactus.GetNodeInfoResponse} returns this
 */
proto.pactus.GetNodeInfoResponse.prototype.clearServicesNamesList = function() {
  return this.setServicesNamesList([]);
};


/**
 * repeated string addrs = 8;
 * @return {!Array<string>}
 */
proto.pactus.GetNodeInfoResponse.prototype.getAddrsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.pactus.GetNodeInfoResponse} returns this
 */
proto.pactus.GetNodeInfoResponse.prototype.setAddrsList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.pactus.GetNodeInfoResponse} returns this
 */
proto.pactus.GetNodeInfoResponse.prototype.addAddrs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pactus.GetNodeInfoResponse} returns this
 */
proto.pactus.GetNodeInfoResponse.prototype.clearAddrsList = function() {
  return this.setAddrsList([]);
};


/**
 * repeated string protocols = 9;
 * @return {!Array<string>}
 */
proto.pactus.GetNodeInfoResponse.prototype.getProtocolsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.pactus.GetNodeInfoResponse} returns this
 */
proto.pactus.GetNodeInfoResponse.prototype.setProtocolsList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.pactus.GetNodeInfoResponse} returns this
 */
proto.pactus.GetNodeInfoResponse.prototype.addProtocols = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pactus.GetNodeInfoResponse} returns this
 */
proto.pactus.GetNodeInfoResponse.prototype.clearProtocolsList = function() {
  return this.setProtocolsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pactus.PeerInfo.repeatedFields_ = [5,6,18];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pactus.PeerInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.pactus.PeerInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pactus.PeerInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pactus.PeerInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    moniker: jspb.Message.getFieldWithDefault(msg, 2, ""),
    agent: jspb.Message.getFieldWithDefault(msg, 3, ""),
    peerId: msg.getPeerId_asB64(),
    consensusKeysList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    consensusAddressList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    services: jspb.Message.getFieldWithDefault(msg, 7, 0),
    lastBlockHash: msg.getLastBlockHash_asB64(),
    height: jspb.Message.getFieldWithDefault(msg, 9, 0),
    receivedMessages: jspb.Message.getFieldWithDefault(msg, 10, 0),
    invalidMessages: jspb.Message.getFieldWithDefault(msg, 11, 0),
    lastSent: jspb.Message.getFieldWithDefault(msg, 12, 0),
    lastReceived: jspb.Message.getFieldWithDefault(msg, 13, 0),
    sentBytesMap: (f = msg.getSentBytesMap()) ? f.toObject(includeInstance, undefined) : [],
    receivedBytesMap: (f = msg.getReceivedBytesMap()) ? f.toObject(includeInstance, undefined) : [],
    address: jspb.Message.getFieldWithDefault(msg, 16, ""),
    direction: jspb.Message.getFieldWithDefault(msg, 17, ""),
    protocolsList: (f = jspb.Message.getRepeatedField(msg, 18)) == null ? undefined : f,
    totalSessions: jspb.Message.getFieldWithDefault(msg, 19, 0),
    completedSessions: jspb.Message.getFieldWithDefault(msg, 20, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pactus.PeerInfo}
 */
proto.pactus.PeerInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pactus.PeerInfo;
  return proto.pactus.PeerInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pactus.PeerInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pactus.PeerInfo}
 */
proto.pactus.PeerInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMoniker(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAgent(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPeerId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addConsensusKeys(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addConsensusAddress(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setServices(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLastBlockHash(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReceivedMessages(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInvalidMessages(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastSent(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastReceived(value);
      break;
    case 14:
      var value = msg.getSentBytesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readInt64, null, 0, 0);
         });
      break;
    case 15:
      var value = msg.getReceivedBytesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readInt64, null, 0, 0);
         });
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setDirection(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.addProtocols(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalSessions(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCompletedSessions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pactus.PeerInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pactus.PeerInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pactus.PeerInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pactus.PeerInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMoniker();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAgent();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPeerId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getConsensusKeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getConsensusAddressList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getServices();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getLastBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getReceivedMessages();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getInvalidMessages();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getLastSent();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getLastReceived();
  if (f !== 0) {
    writer.writeInt64(
      13,
      f
    );
  }
  f = message.getSentBytesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(14, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeInt64);
  }
  f = message.getReceivedBytesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(15, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeInt64);
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getDirection();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getProtocolsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      18,
      f
    );
  }
  f = message.getTotalSessions();
  if (f !== 0) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = message.getCompletedSessions();
  if (f !== 0) {
    writer.writeInt32(
      20,
      f
    );
  }
};


/**
 * optional int32 status = 1;
 * @return {number}
 */
proto.pactus.PeerInfo.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string moniker = 2;
 * @return {string}
 */
proto.pactus.PeerInfo.prototype.getMoniker = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.setMoniker = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string agent = 3;
 * @return {string}
 */
proto.pactus.PeerInfo.prototype.getAgent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.setAgent = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bytes peer_id = 4;
 * @return {!(string|Uint8Array)}
 */
proto.pactus.PeerInfo.prototype.getPeerId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes peer_id = 4;
 * This is a type-conversion wrapper around `getPeerId()`
 * @return {string}
 */
proto.pactus.PeerInfo.prototype.getPeerId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPeerId()));
};


/**
 * optional bytes peer_id = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPeerId()`
 * @return {!Uint8Array}
 */
proto.pactus.PeerInfo.prototype.getPeerId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPeerId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.setPeerId = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * repeated string consensus_keys = 5;
 * @return {!Array<string>}
 */
proto.pactus.PeerInfo.prototype.getConsensusKeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.setConsensusKeysList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.addConsensusKeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.clearConsensusKeysList = function() {
  return this.setConsensusKeysList([]);
};


/**
 * repeated string consensus_address = 6;
 * @return {!Array<string>}
 */
proto.pactus.PeerInfo.prototype.getConsensusAddressList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.setConsensusAddressList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.addConsensusAddress = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.clearConsensusAddressList = function() {
  return this.setConsensusAddressList([]);
};


/**
 * optional uint32 services = 7;
 * @return {number}
 */
proto.pactus.PeerInfo.prototype.getServices = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.setServices = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bytes last_block_hash = 8;
 * @return {!(string|Uint8Array)}
 */
proto.pactus.PeerInfo.prototype.getLastBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes last_block_hash = 8;
 * This is a type-conversion wrapper around `getLastBlockHash()`
 * @return {string}
 */
proto.pactus.PeerInfo.prototype.getLastBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLastBlockHash()));
};


/**
 * optional bytes last_block_hash = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLastBlockHash()`
 * @return {!Uint8Array}
 */
proto.pactus.PeerInfo.prototype.getLastBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLastBlockHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.setLastBlockHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional uint32 height = 9;
 * @return {number}
 */
proto.pactus.PeerInfo.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 received_messages = 10;
 * @return {number}
 */
proto.pactus.PeerInfo.prototype.getReceivedMessages = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.setReceivedMessages = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 invalid_messages = 11;
 * @return {number}
 */
proto.pactus.PeerInfo.prototype.getInvalidMessages = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.setInvalidMessages = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int64 last_sent = 12;
 * @return {number}
 */
proto.pactus.PeerInfo.prototype.getLastSent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.setLastSent = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int64 last_received = 13;
 * @return {number}
 */
proto.pactus.PeerInfo.prototype.getLastReceived = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.setLastReceived = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * map<int32, int64> sent_bytes = 14;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.pactus.PeerInfo.prototype.getSentBytesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 14, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.clearSentBytesMap = function() {
  this.getSentBytesMap().clear();
  return this;
};


/**
 * map<int32, int64> received_bytes = 15;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.pactus.PeerInfo.prototype.getReceivedBytesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 15, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.clearReceivedBytesMap = function() {
  this.getReceivedBytesMap().clear();
  return this;
};


/**
 * optional string address = 16;
 * @return {string}
 */
proto.pactus.PeerInfo.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string direction = 17;
 * @return {string}
 */
proto.pactus.PeerInfo.prototype.getDirection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.setDirection = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * repeated string protocols = 18;
 * @return {!Array<string>}
 */
proto.pactus.PeerInfo.prototype.getProtocolsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 18));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.setProtocolsList = function(value) {
  return jspb.Message.setField(this, 18, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.addProtocols = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 18, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.clearProtocolsList = function() {
  return this.setProtocolsList([]);
};


/**
 * optional int32 total_sessions = 19;
 * @return {number}
 */
proto.pactus.PeerInfo.prototype.getTotalSessions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.setTotalSessions = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional int32 completed_sessions = 20;
 * @return {number}
 */
proto.pactus.PeerInfo.prototype.getCompletedSessions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.pactus.PeerInfo} returns this
 */
proto.pactus.PeerInfo.prototype.setCompletedSessions = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};


goog.object.extend(exports, proto.pactus);
