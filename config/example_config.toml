### This configuration file specifies configurations for running a Pactus node.

# `node` contains configuration options for the Pactus node.
[node]

  # `reward_addresses` specifies the addresses for collecting rewards.
  # If it is empty, reward addresses will be obtained from the wallet.
  # The number of reward addresses should be the same as the number of validators.
 ## reward_addresses = []

# `store` contains configuration options for the store module, which manages storage and retrieval of blockchain data.
[store]

  # `path` specifies the directory where blockchain data will be stored.
  # Default is `"data"`.
 ## path = "data"

# `network` contains configuration options for the network module, which manages communication between nodes.
[network]

  # `network_key` specifies the private key filename to use for node authentication and encryption in the p2p protocol.
  # Default is `"network_key"`.
 ## network_key = "network_key"

  # `public_addr` is the the address that is public and accessible to other nodes.
 ## public_addr = ""

  # `listen_addrs` specifies the addresses and ports where the node will listen for incoming connections from other nodes.
 ## listen_addrs = []

  # `bootstrap_addrs` is a list of peer addresses needed for peer discovery.
  # These addresses are used by the Pactus node to discover and connect to other peers on the network.
 ## bootstrap_addrs = []

  # `max_connections` is the maximum number of connections that the Pactus node maintains.
  # Default is `64`.
 ## max_connections = 64

  # `enable_udp` indicates whether the UDP transport protocol should be enabled or not.
  # Enabling UDP can improve the network connectivity of the node, but it might also lead to many packet losses.
  # Default is `false`.
 ## enable_udp = false

  # `enable_nat_service` provides a service to other peer for determining their reachability status.
  # Default is `false`.
 ## enable_nat_service = false

  # `enable_upnp` will attempt to open a port in your network's firewall using UPnP.
  # Default is `false`.
 ## enable_upnp = false

  # `enable_relay` indicates whether relay service should be enabled or not.
  # Relay service is a transport protocol that routes traffic between two peers over a third-party “relay” peer.
  # Default is `true`.
 ## enable_relay = true

  # `enable_relay_service` indicates whether relay service should be enabled or not.
  # Relay service is a transport protocol that enables peers to discover each other on the peer-to-peer network.
  # Default is `false`.
 ## enable_relay_service = false

  # `enable_mdns` indicates whether MDNS should be enabled or not.
  # MDNS is a protocol to discover local peers quickly and efficiently.
  # Default is `false`.
 ## enable_mdns = false

  # `enable_metrics` provides the network metrics for the Prometheus software.
  # Default is `false`.
 ## enable_metrics = false

  # `force_private_network` forces the connection to nodes within a private network.
  # A private network is a computer network that uses private addresses.
  # Read more about private networks here: https://en.wikipedia.org/wiki/Private_network
  # Default is `false`.
 ## force_private_network = false

# `sync` contains configuration of sync module.
[sync]

  # `moniker` is a custom human-readable name for this node.
 ## moniker = ""

  # `session_timeout` is a timeout for a session to be opened.
  # Default is `10s`.
 ## session_timeout = "10s"

  # `node_network` indicates whether the node is capable of serving the complete blockchain.
  # Default is `true`.
 ## node_network = true

  # `sync.firewall` contains configuration options for the sync firewall.
  [sync.firewall]
    # `enable` indicates whether the firewall should be enabled or not.
    # Default is `false`.
   ## enable = false

# `tx_pool` contains configuration options for the transaction pool module.
[tx_pool]

  # `max_size` indicates the maximum number of unconfirmed transactions inside the pool.
  # Default is `2000`.
 ## max_size = 2000

# `logger` contains configuration options for the logger.
[logger]
  # `colorful` indicates whether log can be colorful or not.
  # Default is `true`.
 ## colorful = true

  # `max_backups` is the maximum number of old log files to retain.
  # Default is `0`.
 ## max_backups = 0

  # `rotate_log_after_days` is the maximum number of days to retain old log files.
  # Default is `1`.
 ## rotate_log_after_days = 1

  # `compress` determines if the rotated log files should be compressed.
  # Default is `true`.
 ## compress = true

  # `logger.levels` contains the level of logger per module.
  # Available log levels are:
  #   "trace", "debug", "info", "warn", and "error".
  [logger.levels]
   ## _consensus = "warn"
   ## _grpc = "info"
   ## _http = "info"
   ## _network = "error"
   ## _nonomsg = "info"
   ## _pool = "error"
   ## _state = "info"
   ## _sync = "error"
   ## default = "info"

# `grpc` contains configuration of the gRRC module.
[grpc]

  # `enable` indicates whether gRPC service should be enabled or not.
  # Default is `false`.
 ## enable = true

  # `enable_wallet` indicates whether Wallet service should be enabled or not.
  # Default is `false`.
 ## enable_wallet = false

  # `listen` is the address to listen for incoming connections for gRPC server.
 ## listen = "127.0.0.1:50051"

  # `grpc.gateway` contains configuration for the gRPC Gateway server
  # which translates a RESTful HTTP API into gRPC.
  [grpc.gateway]

    # `enable` indicates whether gRPCGateway service should be enabled or not.
    # Default is `false`.
   ## enable = false

    # `listen` is the address to listen for incoming connections for gRPCGateway server.
   ## listen = "127.0.0.1:8080"

    # `enable_cors` indicates whether Cross-Origin Request Sharing (CORS)
    # protection should be enabled or not.
    # Default is `false`.
   ## enable_cors = false

# `http` configuration.
[http]

  # `enable` indicates whether HTTP service should be enabled or not.
  # Default is `false`.
 ## enable = false

  # `listen` is the address address to listen for incoming connections for HTTP server.
 ## listen = "127.0.0.1:80"

# Nanomsg configuration.
[nanomsg]

  # `enable` indicates whether nanomsg service should be enabled or not.
  # Default is `false`.
 ## enable = false

  # `listen` is the address to listen for incoming connections for nanomsg server.
 ## listen = "tcp://127.0.0.1:40899"
